id: moduleContainer
parentSlotId: '2'
definitionId: customReactApp
styles:
  xl:
    gridItem:
      x: 0
      y: 0
      w: 24
      h: 40
properties:
  name: moduleContainer
  heightMode: auto
  margin: false
  fileSystem:
    app/app.tsx: >
      import React, { useState } from 'react';

      import { AppProvider } from '@/context/app-context';

      import { ThemeProvider } from '@/components/theme-provider';

      import { SideNavigation, BottomNavigation } from
      '@/components/layout/navigation';

      import { DashboardPage } from '@/components/dashboard/dashboard-page';

      import { TransactionsPage } from
      '@/components/transactions/transactions-page';

      import { CalendarPage } from '@/components/calendar/calendar-page';

      import { BudgetPage } from '@/components/budget/budget-page';

      import { GoalsPage } from '@/components/goals/goals-page';

      import { SalaryPage } from '@/components/salary/salary-page';

      import { AnalyticsPage } from '@/components/analytics/analytics-page';

      import { Toaster } from '@/components/ui/toaster';


      function App() {
        const [currentPage, setCurrentPage] = useState('dashboard');

        const renderPage = () => {
          switch (currentPage) {
            case 'dashboard':
              return <DashboardPage onNavigate={setCurrentPage} />;
            case 'transactions':
              return <TransactionsPage />;
            case 'calendar':
              return <CalendarPage />;
            case 'budget':
              return <BudgetPage />;
            case 'goals':
              return <GoalsPage />;
            case 'salary':
              return <SalaryPage />;
            case 'analytics':
              return <AnalyticsPage />;
            default:
              return <DashboardPage onNavigate={setCurrentPage} />;
          }
        };

        return (
          <ThemeProvider defaultTheme="system">
            <AppProvider>
              <div className="min-h-screen bg-background">
                <SideNavigation currentPage={currentPage} onNavigate={setCurrentPage} />
                
                <main className="lg:pl-64">
                  {renderPage()}
                </main>
                
                <BottomNavigation currentPage={currentPage} onNavigate={setCurrentPage} />
                
                <Toaster />
              </div>
            </AppProvider>
          </ThemeProvider>
        );
      }


      export default App;
    components/ui/button.tsx: |+
      import * as React from "react"
      import { Slot } from "@radix-ui/react-slot"
      import { cva, type VariantProps } from "class-variance-authority"

      import { cn } from "@/lib/utils"

      const buttonVariants = cva(
        "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
        {
          variants: {
            variant: {
              default:
                "bg-primary text-primary-foreground shadow hover:bg-primary/90",
              destructive:
                "bg-destructive text-destructive-foreground shadow-sm hover:bg-destructive/90",
              outline:
                "border border-input bg-background shadow-sm hover:bg-accent hover:text-accent-foreground",
              secondary:
                "bg-secondary text-secondary-foreground shadow-sm hover:bg-secondary/80",
              ghost: "hover:bg-accent hover:text-accent-foreground",
              link: "text-primary underline-offset-4 hover:underline",
            },
            size: {
              default: "h-9 px-4 py-2",
              sm: "h-8 rounded-md px-3 text-xs",
              lg: "h-10 rounded-md px-8",
              icon: "h-9 w-9",
            },
          },
          defaultVariants: {
            variant: "default",
            size: "default",
          },
        }
      )

      export interface ButtonProps
        extends React.ButtonHTMLAttributes<HTMLButtonElement>,
          VariantProps<typeof buttonVariants> {
        asChild?: boolean
      }

      const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
        ({ className, variant, size, asChild = false, ...props }, ref) => {
          const Comp = asChild ? Slot : "button"
          return (
            <Comp
              className={cn(buttonVariants({ variant, size, className }))}
              ref={ref}
              {...props}
            />
          )
        }
      )
      Button.displayName = "Button"

      export { Button, buttonVariants }



    components/ui/card.tsx: >+
      import * as React from "react"


      import { cn } from "@/lib/utils"


      const Card = React.forwardRef<
        HTMLDivElement,
        React.HTMLAttributes<HTMLDivElement>
      >(({ className, ...props }, ref) => (
        <div
          ref={ref}
          className={cn(
            "rounded-lg border bg-card text-card-foreground shadow-sm",
            className,
          )}
          {...props}
        />
      ))

      Card.displayName = "Card"


      const CardHeader = React.forwardRef<
        HTMLDivElement,
        React.HTMLAttributes<HTMLDivElement>
      >(({ className, ...props }, ref) => (
        <div
          ref={ref}
          className={cn("flex flex-col space-y-1.5 p-6", className)}
          {...props}
        />
      ))

      CardHeader.displayName = "CardHeader"


      const CardTitle = React.forwardRef<
        HTMLParagraphElement,
        React.HTMLAttributes<HTMLHeadingElement>
      >(({ className, ...props }, ref) => (
        <h3
          ref={ref}
          className={cn(
            "text-2xl font-semibold leading-none tracking-tight",
            className,
          )}
          {...props}
        />
      ))

      CardTitle.displayName = "CardTitle"


      const CardDescription = React.forwardRef<
        HTMLParagraphElement,
        React.HTMLAttributes<HTMLParagraphElement>
      >(({ className, ...props }, ref) => (
        <p
          ref={ref}
          className={cn("text-sm text-muted-foreground", className)}
          {...props}
        />
      ))

      CardDescription.displayName = "CardDescription"


      const CardContent = React.forwardRef<
        HTMLDivElement,
        React.HTMLAttributes<HTMLDivElement>
      >(({ className, ...props }, ref) => (
        <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
      ))

      CardContent.displayName = "CardContent"


      const CardFooter = React.forwardRef<
        HTMLDivElement,
        React.HTMLAttributes<HTMLDivElement>
      >(({ className, ...props }, ref) => (
        <div
          ref={ref}
          className={cn("flex items-center p-6 pt-0", className)}
          {...props}
        />
      ))

      CardFooter.displayName = "CardFooter"


      export { Card, CardHeader, CardFooter, CardTitle, CardDescription,
      CardContent }

    lib/utils.ts: |
      import { clsx, type ClassValue } from 'clsx';
      import { twMerge } from 'tailwind-merge';

      export function cn(...inputs: ClassValue[]) {
        return twMerge(clsx(inputs));
      }
    package.json: |
      {
        "name": "uib-module",
        "packageManager": "bun",
        "private": true,
        "version": "0.0.0",
        "type": "module",
        "scripts": {
          "lint": "eslint ."
        },
        "dependencies": {
          "@hookform/resolvers": "^3.9.0",
          "@radix-ui/react-dialog": "^1.1.1",
          "@radix-ui/react-dropdown-menu": "^2.1.1",
          "@radix-ui/react-icons": "1.3.0",
          "@radix-ui/react-label": "^2.1.0",
          "@radix-ui/react-popover": "^1.1.1",
          "@radix-ui/react-progress": "^1.1.0",
          "@radix-ui/react-select": "^2.1.1",
          "@radix-ui/react-separator": "^1.1.0",
          "@radix-ui/react-slot": "^1.1.0",
          "@radix-ui/react-switch": "^1.1.0",
          "@radix-ui/react-tabs": "^1.1.0",
          "@radix-ui/react-toast": "^1.2.1",
          "@uibakery/data": "0.0.8",
          "canvas-confetti": "1.9.3",
          "class-variance-authority": "0.7.0",
          "clsx": "2.1.1",
          "date-fns": "^3.0.0",
          "framer-motion": "^11.5.4",
          "lucide-react": "0.446.0",
          "react": "18.3.1",
          "react-dom": "18.3.1",
          "react-day-picker": "^9.7.0",
          "react-hook-form": "^7.53.0",
          "react-icons": "~5.5.0",
          "recharts": "^2.12.7",
          "sonner": "^1.5.0",
          "tailwind-merge": "2.5.2",
          "zod": "^3.23.8"
        },
        "devDependencies": {
          "@eslint/js": "9.11.1",
          "@types/node": "22.7.3",
          "@types/react": "18.3.9",
          "@types/react-dom": "18.3.0",
          "autoprefixer": "10.4.20",
          "eslint": "9.11.1",
          "eslint-plugin-react-hooks": "5.1.0-rc.0",
          "eslint-plugin-react-refresh": "0.4.12",
          "globals": "15.9.0",
          "postcss": "8.4.47",
          "tailwindcss": "3.4.13",
          "typescript": "5.5.3",
          "typescript-eslint": "8.7.0"
        }
      }
    initial.md: >
      # Requirements

      ## Summary

      Веб-приложение для управления семейным бюджетом с полным функционалом для
      двух профилей (я и девушка). Приложение включает учет транзакций,
      планирование бюджета по категориям, финансовые цели, календарь зарплат и
      отпусков, интерактивную аналитику с графиками. Все данные сохраняются в
      LocalStorage, вычисления происходят в реальном времени. Технологии: React
      18, TypeScript, Tailwind CSS, Recharts, React Hook Form, Framer Motion,
      Lucide React.


      ## Use cases

      - Главная страница и навигация
        1) Создать shell приложения с адаптивной навигацией (боковая для desktop, нижняя для mobile)
        2) Реализовать главный дашборд с виджетами: текущий баланс, доходы/расходы за месяц, активные цели (3 ближайшие), ближайшие зарплаты (2 следующие), превышения бюджета, мини-календарь
        3) Настроить переключение тем (dark/light) с сохранением в LocalStorage
        4) Добавить анимации появления виджетов и переходов между страницами

      - Управление транзакциями
        1) Создать форму добавления транзакции с полями: тип (доход/расход toggle), категория с иконками, сумма, дата (date picker), описание, источник дохода
        2) Реализовать таблицу транзакций с сортировкой по дате/сумме/категории, поиском по описанию, фильтрами (период, тип, категория)
        3) Добавить редактирование транзакций через модальное окно и удаление с подтверждением
        4) Реализовать группировку транзакций по дням/неделям с цветовыми индикаторами и иконками

      - Интерактивный календарь
        1) Создать календарный вид с переключением месяцев/лет и корректными датами
        2) Добавить визуальные маркеры: зарплаты (синие точки), превышения бюджета (красные границы), накопления целей (зеленые индикаторы), отпуска (желтый фон)
        3) Реализовать просмотр транзакций за день при клике на дату
        4) Добавить быстрый ввод транзакции при долгом нажатии на дату

      - Планирование бюджета
        1) Создать интерфейс планирования с таблицей категорий (название, план, факт, отклонение)
        2) Добавить предустановленные категории (Продукты, Транспорт, Развлечения, Коммунальные услуги, Одежда, Здоровье, Образование, Досуг) с возможностью добавления пользовательских
        3) Реализовать прогресс-бары для каждой категории с цветовой индикацией (зеленый - в плане, желтый - близко к лимиту, красный - превышение)
        4) Создать side-by-side сравнение план/факт с автоматическим расчетом отклонений в % и рублях

      - Финансовые цели
        1) Создать форму добавления цели с полями: название, целевая сумма, текущая сумма, срок, категория, приоритет
        2) Реализовать карточки целей с анимированными прогресс-барами, отображением оставшейся суммы и дней
        3) Добавить функционал внесения средств с быстрым вводом суммы
        4) Реализовать авторасчет рекомендуемых ежемесячных взносов и уведомления при достижении 50%/80%/100%

      - Модуль зарплат и отпусков
        1) Создать профили доходов для двух человек с источниками (основная работа, подработка) и датами выплат
        2) Реализовать календарь зарплат с цветными маркерами для разных источников, фактическими vs ожидаемыми суммами
        3) Добавить функционал добавления периодов отпусков с указанием типа (ежегодный, неоплачиваемый, больничный)
        4) Создать калькулятор отпускных с прогнозом изменений в зарплате

      - Аналитика и отчеты
        1) Создать круговую диаграмму расходов по категориям с анимацией и кликом на сегмент для фильтрации
        2) Реализовать линейный график динамики доходов/расходов за 6/12 месяцев с трендами
        3) Добавить столбчатую диаграмму план/факт по категориям с визуализацией отклонений
        4) Реализовать фильтры по периоду и категориям, экспорт в PDF/PNG/CSV

      ## Plan

      ### Главная страница и навигация

      1. [x] Создать структуру приложения с React Router, боковой навигацией для
      desktop (с иконками и лейблами), нижней навигацией для mobile

      2. [x] Реализовать TypeScript интерфейсы для всех типов данных
      (Transaction, BudgetPlan, BudgetCategory, IncomeSource, FinancialGoal,
      Vacation, AppSettings)

      3. [x] Создать систему хранения данных в LocalStorage с автосохранением
      (debounce 500ms), резервным копированием и восстановлением

      4. [x] Реализовать главный дашборд с виджетами: текущий баланс (∑доходы -
      ∑расходы), доходы за месяц (с % к прошлому месяцу), расходы за месяц (с %
      к прошлому месяцу)

      5. [x] Добавить виджеты активных целей (3 ближайшие с прогресс-барами),
      ближайших зарплат (2 следующие с датами), превышений бюджета,
      мини-календаря

      6. [x] Настроить переключение dark/light темы с автоматическим
      определением системной темы и сохранением в настройках

      7. [x] Добавить Framer Motion анимации для виджетов (fade-in при загрузке)
      и переходов между страницами (slide-up)


      ### Управление транзакциями

      1. [x] Создать форму добавления транзакции с React Hook Form валидацией:
      toggle switch для типа (доход/расход), выпадающий список категорий с
      Lucide иконками и цветами

      2. [x] Добавить поля: сумма (>0 валидация), date picker для даты,
      текстовое поле описания, выбор источника дохода (только для доходов)

      3. [x] Реализовать таблицу транзакций с сортировкой по колонкам (дата,
      сумма, категория), поиском по описанию с debounce, фильтрами (период, тип,
      категория)

      4. [x] Добавить функционал редактирования (модальное окно с анимацией
      slide-up) и удаления (с confirmation dialog)

      5. [x] Реализовать группировку транзакций по дням/неделям, цветовые
      индикаторы (зеленый - доход, красный - расход), анимации
      добавления/удаления

      6. [x] Создать real-time обновление баланса и всех связанных виджетов при
      изменении транзакций


      ### Интерактивный календарь

      1. [x] Создать месячный календарный вид с корректными датами текущего
      года, навигацией по месяцам/годам (стрелки prev/next)

      2. [x] Реализовать визуальные маркеры на датах: синие точки для зарплат,
      красные границы для превышений бюджета, зеленые индикаторы для целей,
      желтый фон для отпусков

      3. [x] Добавить интерактивность: клик на дату показывает модальное окно с
      транзакциями за день, клик на маркер - детальная информация

      4. [x] Реализовать быстрый ввод транзакции при долгом нажатии на дату
      (long-press gesture для mobile)

      5. [x] Добавить адаптивность: компактный вид для mobile, полный вид для
      desktop


      ### Планирование бюджета

      1. [x] Создать интерфейс планирования с таблицей категорий: колонки
      (название с иконкой, план, факт, отклонение в ₽ и %)

      2. [x] Добавить 8 предустановленных категорий с цветами и иконками:
      Продукты 🛒, Транспорт 🚗, Развлечения 🎮, Коммунальные услуги 💡, Одежда
      👔, Здоровье 💊, Образование 📚, Досуг 🎨

      3. [x] Реализовать функционал добавления пользовательских категорий с
      выбором иконки из Lucide React и цвета из палитры

      4. [x] Создать прогресс-бары для каждой категории с цветовой индикацией:
      зеленый (0-70%), желтый (70-90%), красный (>90%)

      5. [x] Реализовать side-by-side сравнение план/факт с автоматическим
      расчетом отклонений: (факт - план), % использования, визуальные индикаторы

      6. [x] Добавить уведомления при превышении 80%, 90%, 100% бюджета
      категории


      ### Финансовые цели

      1. [x] Создать форму добавления цели с валидацией: название
      (обязательное), целевая сумма (>0), текущая сумма (>=0, <=целевая), срок
      (date picker, опционально)

      2. [x] Добавить выбор категории цели (Техника, Отпуск, Авто, Недвижимость,
      Образование, Прочее) и приоритета (высокий/средний/низкий с цветовой
      индикацией)

      3. [x] Реализовать карточки целей с анимированными прогресс-барами (smooth
      transition), отображением прогресса в %, оставшейся суммы, дней до
      дедлайна

      4. [x] Добавить функционал внесения средств: быстрый ввод суммы, создание
      транзакции дохода с категорией "Накопления", обновление прогресса цели

      5. [x] Реализовать авторасчет рекомендуемых ежемесячных взносов: (целевая
      сумма - текущая) / количество месяцев до дедлайна

      6. [x] Добавить систему уведомлений: при достижении 50% (🎯), 80% (⏰),
      100% (🏆) с toast-уведомлениями


      ### Модуль зарплат и отпусков

      1. [x] Создать интерфейс управления профилями доходов для двух человек (я,
      девушка) с возможностью добавления источников

      2. [x] Добавить предустановленные источники: Мой профиль (Основная работа
      - 5 и 20 числа, Подработка - 10 и 25 числа), Профиль девушки (Основная
      работа - 10 числа)

      3. [x] Реализовать календарь зарплат с цветными маркерами для разных
      источников, отображением ожидаемых и фактических сумм

      4. [x] Добавить функционал отметки получения зарплаты (создает транзакцию
      дохода автоматически)

      5. [x] Создать интерфейс добавления периодов отпусков с полями: человек,
      даты начала/окончания, тип (ежегодный/неоплачиваемый/больничный), статус

      6. [x] Реализовать калькулятор отпускных: расчет на основе средней
      зарплаты за последние 3 месяца, отображение прогноза изменений

      7. [x] Добавить уведомления за 3 дня до зарплаты (💰), в день зарплаты
      (📅), после получения (✅)


      ### Аналитика и отчеты

      1. [x] Создать круговую диаграмму расходов по категориям с использованием
      Recharts, анимацией появления, легендой с процентами

      2. [x] Реализовать интерактивность: клик на сегмент фильтрует транзакции
      по категории, hover показывает детали (название, сумма, %)

      3. [x] Создать линейный график динамики доходов/расходов за выбираемый
      период (6/12 месяцев) с двумя линиями и area fill

      4. [x] Добавить сравнение с предыдущим периодом (% изменения), тренды
      (линейная регрессия), прогнозы на следующий месяц

      5. [x] Реализовать столбчатую диаграмму план/факт по категориям с
      группировкой столбцов, цветовой индикацией отклонений

      6. [x] Создать систему фильтров: выбор периода
      (месяц/квартал/год/произвольный date range), множественный выбор категорий

      7. [x] Добавить функционал экспорта: генерация PDF отчета с графиками,
      экспорт PNG изображений, CSV с данными транзакций
    components/ui/badge.tsx: |+
      import * as React from "react"
      import { cva, type VariantProps } from "class-variance-authority"

      import { cn } from "@/lib/utils"

      const badgeVariants = cva(
        "inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2",
        {
          variants: {
            variant: {
              default:
                "border-transparent bg-primary text-primary-foreground shadow hover:bg-primary/80",
              secondary:
                "border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80",
              destructive:
                "border-transparent bg-destructive text-destructive-foreground shadow hover:bg-destructive/80",
              outline: "text-foreground",
            },
          },
          defaultVariants: {
            variant: "default",
          },
        }
      )

      export interface BadgeProps
        extends React.HTMLAttributes<HTMLDivElement>,
          VariantProps<typeof badgeVariants> {}

      function Badge({ className, variant, ...props }: BadgeProps) {
        return (
          <div className={cn(badgeVariants({ variant }), className)} {...props} />
        )
      }

      export { Badge, badgeVariants }

    components/ui/progress.tsx: |+
      import * as React from "react"
      import * as ProgressPrimitive from "@radix-ui/react-progress"

      import { cn } from "@/lib/utils"

      const Progress = React.forwardRef<
        React.ElementRef<typeof ProgressPrimitive.Root>,
        React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>
      >(({ className, value, ...props }, ref) => (
        <ProgressPrimitive.Root
          ref={ref}
          className={cn(
            "relative h-2 w-full overflow-hidden rounded-full bg-primary/20",
            className
          )}
          {...props}
        >
          <ProgressPrimitive.Indicator
            className="h-full w-full flex-1 bg-primary transition-all"
            style={{ transform: `translateX(-${100 - (value || 0)}%)` }}
          />
        </ProgressPrimitive.Root>
      ))
      Progress.displayName = ProgressPrimitive.Root.displayName

      export { Progress }

    components/ui/dialog.tsx: |+
      "use client"

      import * as React from "react"
      import * as DialogPrimitive from "@radix-ui/react-dialog"
      import { cn } from "@/lib/utils"
      import { Cross2Icon } from "@radix-ui/react-icons"

      const Dialog = DialogPrimitive.Root

      const DialogTrigger = DialogPrimitive.Trigger

      const DialogPortal = DialogPrimitive.Portal

      const DialogClose = DialogPrimitive.Close

      const DialogOverlay = React.forwardRef<
        React.ElementRef<typeof DialogPrimitive.Overlay>,
        React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>
      >(({ className, ...props }, ref) => (
        <DialogPrimitive.Overlay
          ref={ref}
          className={cn(
            "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
            className
          )}
          {...props}
        />
      ))
      DialogOverlay.displayName = DialogPrimitive.Overlay.displayName

      const DialogContent = React.forwardRef<
        React.ElementRef<typeof DialogPrimitive.Content>,
        React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>
      >(({ className, children, ...props }, ref) => (
        <DialogPortal>
          <DialogOverlay />
          <DialogPrimitive.Content
            ref={ref}
            className={cn(
              "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
              className
            )}
            {...props}
          >
            {children}
            <DialogPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground">
              <Cross2Icon className="h-4 w-4" />
              <span className="sr-only">Close</span>
            </DialogPrimitive.Close>
          </DialogPrimitive.Content>
        </DialogPortal>
      ))
      DialogContent.displayName = DialogPrimitive.Content.displayName

      const DialogHeader = ({
        className,
        ...props
      }: React.HTMLAttributes<HTMLDivElement>) => (
        <div
          className={cn(
            "flex flex-col space-y-1.5 text-center sm:text-left",
            className
          )}
          {...props}
        />
      )
      DialogHeader.displayName = "DialogHeader"

      const DialogFooter = ({
        className,
        ...props
      }: React.HTMLAttributes<HTMLDivElement>) => (
        <div
          className={cn(
            "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
            className
          )}
          {...props}
        />
      )
      DialogFooter.displayName = "DialogFooter"

      const DialogTitle = React.forwardRef<
        React.ElementRef<typeof DialogPrimitive.Title>,
        React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>
      >(({ className, ...props }, ref) => (
        <DialogPrimitive.Title
          ref={ref}
          className={cn(
            "text-lg font-semibold leading-none tracking-tight",
            className
          )}
          {...props}
        />
      ))
      DialogTitle.displayName = DialogPrimitive.Title.displayName

      const DialogDescription = React.forwardRef<
        React.ElementRef<typeof DialogPrimitive.Description>,
        React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>
      >(({ className, ...props }, ref) => (
        <DialogPrimitive.Description
          ref={ref}
          className={cn("text-sm text-muted-foreground", className)}
          {...props}
        />
      ))
      DialogDescription.displayName = DialogPrimitive.Description.displayName

      export {
        Dialog,
        DialogPortal,
        DialogOverlay,
        DialogTrigger,
        DialogClose,
        DialogContent,
        DialogHeader,
        DialogFooter,
        DialogTitle,
        DialogDescription,
      }

    components/ui/dropdown-menu.tsx: >+
      import * as React from "react"

      import * as DropdownMenuPrimitive from "@radix-ui/react-dropdown-menu"

      import { cn } from "@/lib/utils"

      import { CheckIcon, ChevronRightIcon, DotFilledIcon } from
      "@radix-ui/react-icons"


      const DropdownMenu = DropdownMenuPrimitive.Root


      const DropdownMenuTrigger = DropdownMenuPrimitive.Trigger


      const DropdownMenuGroup = DropdownMenuPrimitive.Group


      const DropdownMenuPortal = DropdownMenuPrimitive.Portal


      const DropdownMenuSub = DropdownMenuPrimitive.Sub


      const DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup


      const DropdownMenuSubTrigger = React.forwardRef<
        React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,
        React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {
          inset?: boolean
        }
      >(({ className, inset, children, ...props }, ref) => (
        <DropdownMenuPrimitive.SubTrigger
          ref={ref}
          className={cn(
            "flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
            inset && "pl-8",
            className
          )}
          {...props}
        >
          {children}
          <ChevronRightIcon className="ml-auto" />
        </DropdownMenuPrimitive.SubTrigger>
      ))

      DropdownMenuSubTrigger.displayName =
        DropdownMenuPrimitive.SubTrigger.displayName

      const DropdownMenuSubContent = React.forwardRef<
        React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,
        React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>
      >(({ className, ...props }, ref) => (
        <DropdownMenuPrimitive.SubContent
          ref={ref}
          className={cn(
            "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]",
            className
          )}
          {...props}
        />
      ))

      DropdownMenuSubContent.displayName =
        DropdownMenuPrimitive.SubContent.displayName

      const DropdownMenuContent = React.forwardRef<
        React.ElementRef<typeof DropdownMenuPrimitive.Content>,
        React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>
      >(({ className, sideOffset = 4, ...props }, ref) => (
        <DropdownMenuPrimitive.Portal>
          <DropdownMenuPrimitive.Content
            ref={ref}
            sideOffset={sideOffset}
            className={cn(
              "z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md",
              "data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]",
              className
            )}
            {...props}
          />
        </DropdownMenuPrimitive.Portal>
      ))

      DropdownMenuContent.displayName =
      DropdownMenuPrimitive.Content.displayName


      const DropdownMenuItem = React.forwardRef<
        React.ElementRef<typeof DropdownMenuPrimitive.Item>,
        React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {
          inset?: boolean
        }
      >(({ className, inset, ...props }, ref) => (
        <DropdownMenuPrimitive.Item
          ref={ref}
          className={cn(
            "relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&>svg]:size-4 [&>svg]:shrink-0",
            inset && "pl-8",
            className
          )}
          {...props}
        />
      ))

      DropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName


      const DropdownMenuCheckboxItem = React.forwardRef<
        React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,
        React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>
      >(({ className, children, checked, ...props }, ref) => (
        <DropdownMenuPrimitive.CheckboxItem
          ref={ref}
          className={cn(
            "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
            className
          )}
          checked={checked}
          {...props}
        >
          <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
            <DropdownMenuPrimitive.ItemIndicator>
              <CheckIcon className="h-4 w-4" />
            </DropdownMenuPrimitive.ItemIndicator>
          </span>
          {children}
        </DropdownMenuPrimitive.CheckboxItem>
      ))

      DropdownMenuCheckboxItem.displayName =
        DropdownMenuPrimitive.CheckboxItem.displayName

      const DropdownMenuRadioItem = React.forwardRef<
        React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,
        React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>
      >(({ className, children, ...props }, ref) => (
        <DropdownMenuPrimitive.RadioItem
          ref={ref}
          className={cn(
            "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
            className
          )}
          {...props}
        >
          <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
            <DropdownMenuPrimitive.ItemIndicator>
              <DotFilledIcon className="h-2 w-2 fill-current" />
            </DropdownMenuPrimitive.ItemIndicator>
          </span>
          {children}
        </DropdownMenuPrimitive.RadioItem>
      ))

      DropdownMenuRadioItem.displayName =
      DropdownMenuPrimitive.RadioItem.displayName


      const DropdownMenuLabel = React.forwardRef<
        React.ElementRef<typeof DropdownMenuPrimitive.Label>,
        React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {
          inset?: boolean
        }
      >(({ className, inset, ...props }, ref) => (
        <DropdownMenuPrimitive.Label
          ref={ref}
          className={cn(
            "px-2 py-1.5 text-sm font-semibold",
            inset && "pl-8",
            className
          )}
          {...props}
        />
      ))

      DropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName


      const DropdownMenuSeparator = React.forwardRef<
        React.ElementRef<typeof DropdownMenuPrimitive.Separator>,
        React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>
      >(({ className, ...props }, ref) => (
        <DropdownMenuPrimitive.Separator
          ref={ref}
          className={cn("-mx-1 my-1 h-px bg-muted", className)}
          {...props}
        />
      ))

      DropdownMenuSeparator.displayName =
      DropdownMenuPrimitive.Separator.displayName


      const DropdownMenuShortcut = ({
        className,
        ...props
      }: React.HTMLAttributes<HTMLSpanElement>) => {
        return (
          <span
            className={cn("ml-auto text-xs tracking-widest opacity-60", className)}
            {...props}
          />
        )
      }

      DropdownMenuShortcut.displayName = "DropdownMenuShortcut"


      export {
        DropdownMenu,
        DropdownMenuTrigger,
        DropdownMenuContent,
        DropdownMenuItem,
        DropdownMenuCheckboxItem,
        DropdownMenuRadioItem,
        DropdownMenuLabel,
        DropdownMenuSeparator,
        DropdownMenuShortcut,
        DropdownMenuGroup,
        DropdownMenuPortal,
        DropdownMenuSub,
        DropdownMenuSubContent,
        DropdownMenuSubTrigger,
        DropdownMenuRadioGroup,
      }

    components/ui/switch.tsx: |+
      "use client"

      import * as React from "react"
      import * as SwitchPrimitives from "@radix-ui/react-switch"

      import { cn } from "@/lib/utils"

      const Switch = React.forwardRef<
        React.ElementRef<typeof SwitchPrimitives.Root>,
        React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>
      >(({ className, ...props }, ref) => (
        <SwitchPrimitives.Root
          className={cn(
            "peer inline-flex h-5 w-9 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent shadow-sm transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input",
            className
          )}
          {...props}
          ref={ref}
        >
          <SwitchPrimitives.Thumb
            className={cn(
              "pointer-events-none block h-4 w-4 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-4 data-[state=unchecked]:translate-x-0"
            )}
          />
        </SwitchPrimitives.Root>
      ))
      Switch.displayName = SwitchPrimitives.Root.displayName

      export { Switch }

    components/ui/toast.tsx: |+
      import * as React from "react"
      import * as ToastPrimitives from "@radix-ui/react-toast"
      import { cva, type VariantProps } from "class-variance-authority"
      import { cn } from "@/lib/utils"
      import { Cross2Icon } from "@radix-ui/react-icons"

      const ToastProvider = ToastPrimitives.Provider

      const ToastViewport = React.forwardRef<
        React.ElementRef<typeof ToastPrimitives.Viewport>,
        React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>
      >(({ className, ...props }, ref) => (
        <ToastPrimitives.Viewport
          ref={ref}
          className={cn(
            "fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]",
            className
          )}
          {...props}
        />
      ))
      ToastViewport.displayName = ToastPrimitives.Viewport.displayName

      const toastVariants = cva(
        "group pointer-events-auto relative flex w-full items-center justify-between space-x-2 overflow-hidden rounded-md border p-4 pr-6 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full",
        {
          variants: {
            variant: {
              default: "border bg-background text-foreground",
              destructive:
                "destructive group border-destructive bg-destructive text-destructive-foreground",
            },
          },
          defaultVariants: {
            variant: "default",
          },
        }
      )

      const Toast = React.forwardRef<
        React.ElementRef<typeof ToastPrimitives.Root>,
        React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &
          VariantProps<typeof toastVariants>
      >(({ className, variant, ...props }, ref) => {
        return (
          <ToastPrimitives.Root
            ref={ref}
            className={cn(toastVariants({ variant }), className)}
            {...props}
          />
        )
      })
      Toast.displayName = ToastPrimitives.Root.displayName

      const ToastAction = React.forwardRef<
        React.ElementRef<typeof ToastPrimitives.Action>,
        React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>
      >(({ className, ...props }, ref) => (
        <ToastPrimitives.Action
          ref={ref}
          className={cn(
            "inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium transition-colors hover:bg-secondary focus:outline-none focus:ring-1 focus:ring-ring disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive",
            className
          )}
          {...props}
        />
      ))
      ToastAction.displayName = ToastPrimitives.Action.displayName

      const ToastClose = React.forwardRef<
        React.ElementRef<typeof ToastPrimitives.Close>,
        React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>
      >(({ className, ...props }, ref) => (
        <ToastPrimitives.Close
          ref={ref}
          className={cn(
            "absolute right-1 top-1 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-1 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600",
            className
          )}
          toast-close=""
          {...props}
        >
          <Cross2Icon className="h-4 w-4" />
        </ToastPrimitives.Close>
      ))
      ToastClose.displayName = ToastPrimitives.Close.displayName

      const ToastTitle = React.forwardRef<
        React.ElementRef<typeof ToastPrimitives.Title>,
        React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>
      >(({ className, ...props }, ref) => (
        <ToastPrimitives.Title
          ref={ref}
          className={cn("text-sm font-semibold [&+div]:text-xs", className)}
          {...props}
        />
      ))
      ToastTitle.displayName = ToastPrimitives.Title.displayName

      const ToastDescription = React.forwardRef<
        React.ElementRef<typeof ToastPrimitives.Description>,
        React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>
      >(({ className, ...props }, ref) => (
        <ToastPrimitives.Description
          ref={ref}
          className={cn("text-sm opacity-90", className)}
          {...props}
        />
      ))
      ToastDescription.displayName = ToastPrimitives.Description.displayName

      type ToastProps = React.ComponentPropsWithoutRef<typeof Toast>

      type ToastActionElement = React.ReactElement<typeof ToastAction>

      export {
        type ToastProps,
        type ToastActionElement,
        ToastProvider,
        ToastViewport,
        Toast,
        ToastTitle,
        ToastDescription,
        ToastClose,
        ToastAction,
      }

    hooks/use-toast.ts: |+
      "use client"

      // Inspired by react-hot-toast library
      import * as React from "react"

      import type {
        ToastActionElement,
        ToastProps,
      } from "@/components/ui/toast"

      const TOAST_LIMIT = 1
      const TOAST_REMOVE_DELAY = 1000000

      type ToasterToast = ToastProps & {
        id: string
        title?: React.ReactNode
        description?: React.ReactNode
        action?: ToastActionElement
      }

      const actionTypes = {
        ADD_TOAST: "ADD_TOAST",
        UPDATE_TOAST: "UPDATE_TOAST",
        DISMISS_TOAST: "DISMISS_TOAST",
        REMOVE_TOAST: "REMOVE_TOAST",
      } as const

      let count = 0

      function genId() {
        count = (count + 1) % Number.MAX_SAFE_INTEGER
        return count.toString()
      }

      type ActionType = typeof actionTypes

      type Action =
        | {
            type: ActionType["ADD_TOAST"]
            toast: ToasterToast
          }
        | {
            type: ActionType["UPDATE_TOAST"]
            toast: Partial<ToasterToast>
          }
        | {
            type: ActionType["DISMISS_TOAST"]
            toastId?: ToasterToast["id"]
          }
        | {
            type: ActionType["REMOVE_TOAST"]
            toastId?: ToasterToast["id"]
          }

      interface State {
        toasts: ToasterToast[]
      }

      const toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()

      const addToRemoveQueue = (toastId: string) => {
        if (toastTimeouts.has(toastId)) {
          return
        }

        const timeout = setTimeout(() => {
          toastTimeouts.delete(toastId)
          dispatch({
            type: "REMOVE_TOAST",
            toastId: toastId,
          })
        }, TOAST_REMOVE_DELAY)

        toastTimeouts.set(toastId, timeout)
      }

      export const reducer = (state: State, action: Action): State => {
        switch (action.type) {
          case "ADD_TOAST":
            return {
              ...state,
              toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),
            }

          case "UPDATE_TOAST":
            return {
              ...state,
              toasts: state.toasts.map((t) =>
                t.id === action.toast.id ? { ...t, ...action.toast } : t
              ),
            }

          case "DISMISS_TOAST": {
            const { toastId } = action

            // ! Side effects ! - This could be extracted into a dismissToast() action,
            // but I'll keep it here for simplicity
            if (toastId) {
              addToRemoveQueue(toastId)
            } else {
              state.toasts.forEach((toast) => {
                addToRemoveQueue(toast.id)
              })
            }

            return {
              ...state,
              toasts: state.toasts.map((t) =>
                t.id === toastId || toastId === undefined
                  ? {
                      ...t,
                      open: false,
                    }
                  : t
              ),
            }
          }
          case "REMOVE_TOAST":
            if (action.toastId === undefined) {
              return {
                ...state,
                toasts: [],
              }
            }
            return {
              ...state,
              toasts: state.toasts.filter((t) => t.id !== action.toastId),
            }
        }
      }

      const listeners: Array<(state: State) => void> = []

      let memoryState: State = { toasts: [] }

      function dispatch(action: Action) {
        memoryState = reducer(memoryState, action)
        listeners.forEach((listener) => {
          listener(memoryState)
        })
      }

      type Toast = Omit<ToasterToast, "id">

      function toast({ ...props }: Toast) {
        const id = genId()

        const update = (props: ToasterToast) =>
          dispatch({
            type: "UPDATE_TOAST",
            toast: { ...props, id },
          })
        const dismiss = () => dispatch({ type: "DISMISS_TOAST", toastId: id })

        dispatch({
          type: "ADD_TOAST",
          toast: {
            ...props,
            id,
            open: true,
            onOpenChange: (open) => {
              if (!open) dismiss()
            },
          },
        })

        return {
          id: id,
          dismiss,
          update,
        }
      }

      function useToast() {
        const [state, setState] = React.useState<State>(memoryState)

        React.useEffect(() => {
          listeners.push(setState)
          return () => {
            const index = listeners.indexOf(setState)
            if (index > -1) {
              listeners.splice(index, 1)
            }
          }
        }, [state])

        return {
          ...state,
          toast,
          dismiss: (toastId?: string) => dispatch({ type: "DISMISS_TOAST", toastId }),
        }
      }

      export { useToast, toast }

    components/ui/toaster.tsx: |+
      import { useToast } from "@/hooks/use-toast"
      import {
        Toast,
        ToastClose,
        ToastDescription,
        ToastProvider,
        ToastTitle,
        ToastViewport,
      } from "@/components/ui/toast"

      export function Toaster() {
        const { toasts } = useToast()

        return (
          <ToastProvider>
            {toasts.map(function ({ id, title, description, action, ...props }) {
              return (
                <Toast key={id} {...props}>
                  <div className="grid gap-1">
                    {title && <ToastTitle>{title}</ToastTitle>}
                    {description && (
                      <ToastDescription>{description}</ToastDescription>
                    )}
                  </div>
                  {action}
                  <ToastClose />
                </Toast>
              )
            })}
            <ToastViewport />
          </ToastProvider>
        )
      }

    components/ui/sonner.tsx: |+
      "use client"

      import { useTheme } from "next-themes"
      import { Toaster as Sonner } from "sonner"

      type ToasterProps = React.ComponentProps<typeof Sonner>

      const Toaster = ({ ...props }: ToasterProps) => {
        const { theme = "system" } = useTheme()

        return (
          <Sonner
            theme={theme as ToasterProps["theme"]}
            className="toaster group"
            toastOptions={{
              classNames: {
                toast:
                  "group toast group-[.toaster]:bg-background group-[.toaster]:text-foreground group-[.toaster]:border-border group-[.toaster]:shadow-lg",
                description: "group-[.toast]:text-muted-foreground",
                actionButton:
                  "group-[.toast]:bg-primary group-[.toast]:text-primary-foreground",
                cancelButton:
                  "group-[.toast]:bg-muted group-[.toast]:text-muted-foreground",
              },
            }}
            {...props}
          />
        )
      }

      export { Toaster }

    components/ui/input.tsx: >+
      import * as React from "react"


      import { cn } from "@/lib/utils"


      const Input = React.forwardRef<HTMLInputElement,
      React.ComponentProps<"input">>(
        ({ className, type, ...props }, ref) => {
          return (
            <input
              type={type}
              className={cn(
                "flex h-9 w-full rounded-md border border-input bg-transparent px-3 py-1 text-base shadow-sm transition-colors file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
                className
              )}
              ref={ref}
              {...props}
            />
          )
        }
      )

      Input.displayName = "Input"


      export { Input }

    components/ui/label.tsx: |+
      import * as React from "react"
      import * as LabelPrimitive from "@radix-ui/react-label"
      import { cva, type VariantProps } from "class-variance-authority"

      import { cn } from "@/lib/utils"

      const labelVariants = cva(
        "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
      )

      const Label = React.forwardRef<
        React.ElementRef<typeof LabelPrimitive.Root>,
        React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &
          VariantProps<typeof labelVariants>
      >(({ className, ...props }, ref) => (
        <LabelPrimitive.Root
          ref={ref}
          className={cn(labelVariants(), className)}
          {...props}
        />
      ))
      Label.displayName = LabelPrimitive.Root.displayName

      export { Label }


    components/ui/select.tsx: >+
      "use client"


      import * as React from "react"

      import * as SelectPrimitive from "@radix-ui/react-select"

      import { cn } from "@/lib/utils"

      import { CheckIcon, ChevronDownIcon, ChevronUpIcon } from
      "@radix-ui/react-icons"


      const Select = SelectPrimitive.Root


      const SelectGroup = SelectPrimitive.Group


      const SelectValue = SelectPrimitive.Value


      const SelectTrigger = React.forwardRef<
        React.ElementRef<typeof SelectPrimitive.Trigger>,
        React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>
      >(({ className, children, ...props }, ref) => (
        <SelectPrimitive.Trigger
          ref={ref}
          className={cn(
            "flex h-9 w-full items-center justify-between whitespace-nowrap rounded-md border border-input bg-transparent px-3 py-2 text-sm shadow-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-1 focus:ring-ring disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1",
            className
          )}
          {...props}
        >
          {children}
          <SelectPrimitive.Icon asChild>
            <ChevronDownIcon className="h-4 w-4 opacity-50" />
          </SelectPrimitive.Icon>
        </SelectPrimitive.Trigger>
      ))

      SelectTrigger.displayName = SelectPrimitive.Trigger.displayName


      const SelectScrollUpButton = React.forwardRef<
        React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,
        React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>
      >(({ className, ...props }, ref) => (
        <SelectPrimitive.ScrollUpButton
          ref={ref}
          className={cn(
            "flex cursor-default items-center justify-center py-1",
            className
          )}
          {...props}
        >
          <ChevronUpIcon className="h-4 w-4" />
        </SelectPrimitive.ScrollUpButton>
      ))

      SelectScrollUpButton.displayName =
      SelectPrimitive.ScrollUpButton.displayName


      const SelectScrollDownButton = React.forwardRef<
        React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,
        React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>
      >(({ className, ...props }, ref) => (
        <SelectPrimitive.ScrollDownButton
          ref={ref}
          className={cn(
            "flex cursor-default items-center justify-center py-1",
            className
          )}
          {...props}
        >
          <ChevronDownIcon className="h-4 w-4" />
        </SelectPrimitive.ScrollDownButton>
      ))

      SelectScrollDownButton.displayName =
        SelectPrimitive.ScrollDownButton.displayName

      const SelectContent = React.forwardRef<
        React.ElementRef<typeof SelectPrimitive.Content>,
        React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>
      >(({ className, children, position = "popper", ...props }, ref) => (
        <SelectPrimitive.Portal>
          <SelectPrimitive.Content
            ref={ref}
            className={cn(
              "relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]",
              position === "popper" &&
                "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
              className
            )}
            position={position}
            {...props}
          >
            <SelectScrollUpButton />
            <SelectPrimitive.Viewport
              className={cn(
                "p-1",
                position === "popper" &&
                  "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]"
              )}
            >
              {children}
            </SelectPrimitive.Viewport>
            <SelectScrollDownButton />
          </SelectPrimitive.Content>
        </SelectPrimitive.Portal>
      ))

      SelectContent.displayName = SelectPrimitive.Content.displayName


      const SelectLabel = React.forwardRef<
        React.ElementRef<typeof SelectPrimitive.Label>,
        React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>
      >(({ className, ...props }, ref) => (
        <SelectPrimitive.Label
          ref={ref}
          className={cn("px-2 py-1.5 text-sm font-semibold", className)}
          {...props}
        />
      ))

      SelectLabel.displayName = SelectPrimitive.Label.displayName


      const SelectItem = React.forwardRef<
        React.ElementRef<typeof SelectPrimitive.Item>,
        React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>
      >(({ className, children, ...props }, ref) => (
        <SelectPrimitive.Item
          ref={ref}
          className={cn(
            "relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-2 pr-8 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
            className
          )}
          {...props}
        >
          <span className="absolute right-2 flex h-3.5 w-3.5 items-center justify-center">
            <SelectPrimitive.ItemIndicator>
              <CheckIcon className="h-4 w-4" />
            </SelectPrimitive.ItemIndicator>
          </span>
          <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
        </SelectPrimitive.Item>
      ))

      SelectItem.displayName = SelectPrimitive.Item.displayName


      const SelectSeparator = React.forwardRef<
        React.ElementRef<typeof SelectPrimitive.Separator>,
        React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>
      >(({ className, ...props }, ref) => (
        <SelectPrimitive.Separator
          ref={ref}
          className={cn("-mx-1 my-1 h-px bg-muted", className)}
          {...props}
        />
      ))

      SelectSeparator.displayName = SelectPrimitive.Separator.displayName


      export {
        Select,
        SelectGroup,
        SelectValue,
        SelectTrigger,
        SelectContent,
        SelectLabel,
        SelectItem,
        SelectSeparator,
        SelectScrollUpButton,
        SelectScrollDownButton,
      }

    components/ui/popover.tsx: |+
      import * as React from "react"
      import * as PopoverPrimitive from "@radix-ui/react-popover"

      import { cn } from "@/lib/utils"

      const Popover = PopoverPrimitive.Root

      const PopoverTrigger = PopoverPrimitive.Trigger

      const PopoverAnchor = PopoverPrimitive.Anchor

      const PopoverContent = React.forwardRef<
        React.ElementRef<typeof PopoverPrimitive.Content>,
        React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>
      >(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
        <PopoverPrimitive.Portal>
          <PopoverPrimitive.Content
            ref={ref}
            align={align}
            sideOffset={sideOffset}
            className={cn(
              "z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]",
              className
            )}
            {...props}
          />
        </PopoverPrimitive.Portal>
      ))
      PopoverContent.displayName = PopoverPrimitive.Content.displayName

      export { Popover, PopoverTrigger, PopoverContent, PopoverAnchor }

    components/ui/tabs.tsx: |+
      "use client"

      import * as React from "react"
      import * as TabsPrimitive from "@radix-ui/react-tabs"

      import { cn } from "@/lib/utils"

      const Tabs = TabsPrimitive.Root

      const TabsList = React.forwardRef<
        React.ElementRef<typeof TabsPrimitive.List>,
        React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>
      >(({ className, ...props }, ref) => (
        <TabsPrimitive.List
          ref={ref}
          className={cn(
            "inline-flex h-9 items-center justify-center rounded-lg bg-muted p-1 text-muted-foreground",
            className
          )}
          {...props}
        />
      ))
      TabsList.displayName = TabsPrimitive.List.displayName

      const TabsTrigger = React.forwardRef<
        React.ElementRef<typeof TabsPrimitive.Trigger>,
        React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>
      >(({ className, ...props }, ref) => (
        <TabsPrimitive.Trigger
          ref={ref}
          className={cn(
            "inline-flex items-center justify-center whitespace-nowrap rounded-md px-3 py-1 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow",
            className
          )}
          {...props}
        />
      ))
      TabsTrigger.displayName = TabsPrimitive.Trigger.displayName

      const TabsContent = React.forwardRef<
        React.ElementRef<typeof TabsPrimitive.Content>,
        React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>
      >(({ className, ...props }, ref) => (
        <TabsPrimitive.Content
          ref={ref}
          className={cn(
            "mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2",
            className
          )}
          {...props}
        />
      ))
      TabsContent.displayName = TabsPrimitive.Content.displayName

      export { Tabs, TabsList, TabsTrigger, TabsContent }

    components/ui/separator.tsx: |+
      import * as React from "react"
      import * as SeparatorPrimitive from "@radix-ui/react-separator"

      import { cn } from "@/lib/utils"

      const Separator = React.forwardRef<
        React.ElementRef<typeof SeparatorPrimitive.Root>,
        React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>
      >(
        (
          { className, orientation = "horizontal", decorative = true, ...props },
          ref
        ) => (
          <SeparatorPrimitive.Root
            ref={ref}
            decorative={decorative}
            orientation={orientation}
            className={cn(
              "shrink-0 bg-border",
              orientation === "horizontal" ? "h-[1px] w-full" : "h-full w-[1px]",
              className
            )}
            {...props}
          />
        )
      )
      Separator.displayName = SeparatorPrimitive.Root.displayName

      export { Separator }

    components/ui/avatar.tsx: |+
      "use client"

      import * as React from "react"
      import * as AvatarPrimitive from "@radix-ui/react-avatar"

      import { cn } from "@/lib/utils"

      const Avatar = React.forwardRef<
        React.ElementRef<typeof AvatarPrimitive.Root>,
        React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>
      >(({ className, ...props }, ref) => (
        <AvatarPrimitive.Root
          ref={ref}
          className={cn(
            "relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full",
            className
          )}
          {...props}
        />
      ))
      Avatar.displayName = AvatarPrimitive.Root.displayName

      const AvatarImage = React.forwardRef<
        React.ElementRef<typeof AvatarPrimitive.Image>,
        React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>
      >(({ className, ...props }, ref) => (
        <AvatarPrimitive.Image
          ref={ref}
          className={cn("aspect-square h-full w-full", className)}
          {...props}
        />
      ))
      AvatarImage.displayName = AvatarPrimitive.Image.displayName

      const AvatarFallback = React.forwardRef<
        React.ElementRef<typeof AvatarPrimitive.Fallback>,
        React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>
      >(({ className, ...props }, ref) => (
        <AvatarPrimitive.Fallback
          ref={ref}
          className={cn(
            "flex h-full w-full items-center justify-center rounded-full bg-muted",
            className
          )}
          {...props}
        />
      ))
      AvatarFallback.displayName = AvatarPrimitive.Fallback.displayName

      export { Avatar, AvatarImage, AvatarFallback }

    components/ui/scroll-area.tsx: >+
      import * as React from "react"

      import * as ScrollAreaPrimitive from "@radix-ui/react-scroll-area"


      import { cn } from "@/lib/utils"


      const ScrollArea = React.forwardRef<
        React.ElementRef<typeof ScrollAreaPrimitive.Root>,
        React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>
      >(({ className, children, ...props }, ref) => (
        <ScrollAreaPrimitive.Root
          ref={ref}
          className={cn("relative overflow-hidden", className)}
          {...props}
        >
          <ScrollAreaPrimitive.Viewport className="h-full w-full rounded-[inherit]">
            {children}
          </ScrollAreaPrimitive.Viewport>
          <ScrollBar />
          <ScrollAreaPrimitive.Corner />
        </ScrollAreaPrimitive.Root>
      ))

      ScrollArea.displayName = ScrollAreaPrimitive.Root.displayName


      const ScrollBar = React.forwardRef<
        React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,
        React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>
      >(({ className, orientation = "vertical", ...props }, ref) => (
        <ScrollAreaPrimitive.ScrollAreaScrollbar
          ref={ref}
          orientation={orientation}
          className={cn(
            "flex touch-none select-none transition-colors",
            orientation === "vertical" &&
              "h-full w-2.5 border-l border-l-transparent p-[1px]",
            orientation === "horizontal" &&
              "h-2.5 flex-col border-t border-t-transparent p-[1px]",
            className
          )}
          {...props}
        >
          <ScrollAreaPrimitive.ScrollAreaThumb className="relative flex-1 rounded-full bg-border" />
        </ScrollAreaPrimitive.ScrollAreaScrollbar>
      ))

      ScrollBar.displayName =
      ScrollAreaPrimitive.ScrollAreaScrollbar.displayName


      export { ScrollArea, ScrollBar }

    components/ui/calendar.tsx: >+
      import * as React from "react"

      import {
        ChevronDownIcon,
        ChevronLeftIcon,
        ChevronRightIcon,
      } from "lucide-react"

      import { DayButton, DayPicker, getDefaultClassNames } from
      "react-day-picker"


      import { cn } from "@/lib/utils"

      import { Button, buttonVariants } from "@/components/ui/button"


      function Calendar({
        className,
        classNames,
        showOutsideDays = true,
        captionLayout = "label",
        buttonVariant = "ghost",
        formatters,
        components,
        ...props
      }: React.ComponentProps<typeof DayPicker> & {
        buttonVariant?: React.ComponentProps<typeof Button>["variant"]
      }) {
        const defaultClassNames = getDefaultClassNames()

        return (
          <DayPicker
            showOutsideDays={showOutsideDays}
            className={cn(
              "bg-background group/calendar p-3 [--cell-size:2rem] [[data-slot=card-content]_&]:bg-transparent [[data-slot=popover-content]_&]:bg-transparent",
              String.raw`rtl:**:[.rdp-button\_next>svg]:rotate-180`,
              String.raw`rtl:**:[.rdp-button\_previous>svg]:rotate-180`,
              className
            )}
            captionLayout={captionLayout}
            formatters={{
              formatMonthDropdown: (date) =>
                date.toLocaleString("default", { month: "short" }),
              ...formatters,
            }}
            classNames={{
              root: cn("w-fit", defaultClassNames.root),
              months: cn(
                "relative flex flex-col gap-4 md:flex-row",
                defaultClassNames.months
              ),
              month: cn("flex w-full flex-col gap-4", defaultClassNames.month),
              nav: cn(
                "absolute inset-x-0 top-0 flex w-full items-center justify-between gap-1",
                defaultClassNames.nav
              ),
              button_previous: cn(
                buttonVariants({ variant: buttonVariant }),
                "h-[--cell-size] w-[--cell-size] select-none p-0 aria-disabled:opacity-50",
                defaultClassNames.button_previous
              ),
              button_next: cn(
                buttonVariants({ variant: buttonVariant }),
                "h-[--cell-size] w-[--cell-size] select-none p-0 aria-disabled:opacity-50",
                defaultClassNames.button_next
              ),
              month_caption: cn(
                "flex h-[--cell-size] w-full items-center justify-center px-[--cell-size]",
                defaultClassNames.month_caption
              ),
              dropdowns: cn(
                "flex h-[--cell-size] w-full items-center justify-center gap-1.5 text-sm font-medium",
                defaultClassNames.dropdowns
              ),
              dropdown_root: cn(
                "has-focus:border-ring border-input shadow-xs has-focus:ring-ring/50 has-focus:ring-[3px] relative rounded-md border",
                defaultClassNames.dropdown_root
              ),
              dropdown: cn(
                "bg-popover absolute inset-0 opacity-0",
                defaultClassNames.dropdown
              ),
              caption_label: cn(
                "select-none font-medium",
                captionLayout === "label"
                  ? "text-sm"
                  : "[&>svg]:text-muted-foreground flex h-8 items-center gap-1 rounded-md pl-2 pr-1 text-sm [&>svg]:size-3.5",
                defaultClassNames.caption_label
              ),
              table: "w-full border-collapse",
              weekdays: cn("flex", defaultClassNames.weekdays),
              weekday: cn(
                "text-muted-foreground flex-1 select-none rounded-md text-[0.8rem] font-normal",
                defaultClassNames.weekday
              ),
              week: cn("mt-2 flex w-full", defaultClassNames.week),
              week_number_header: cn(
                "w-[--cell-size] select-none",
                defaultClassNames.week_number_header
              ),
              week_number: cn(
                "text-muted-foreground select-none text-[0.8rem]",
                defaultClassNames.week_number
              ),
              day: cn(
                "group/day relative aspect-square h-full w-full select-none p-0 text-center [&:first-child[data-selected=true]_button]:rounded-l-md [&:last-child[data-selected=true]_button]:rounded-r-md",
                defaultClassNames.day
              ),
              range_start: cn(
                "bg-accent rounded-l-md",
                defaultClassNames.range_start
              ),
              range_middle: cn("rounded-none", defaultClassNames.range_middle),
              range_end: cn("bg-accent rounded-r-md", defaultClassNames.range_end),
              today: cn(
                "bg-accent text-accent-foreground rounded-md data-[selected=true]:rounded-none",
                defaultClassNames.today
              ),
              outside: cn(
                "text-muted-foreground aria-selected:text-muted-foreground",
                defaultClassNames.outside
              ),
              disabled: cn(
                "text-muted-foreground opacity-50",
                defaultClassNames.disabled
              ),
              hidden: cn("invisible", defaultClassNames.hidden),
              ...classNames,
            }}
            components={{
              Root: ({ className, rootRef, ...props }) => {
                return (
                  <div
                    data-slot="calendar"
                    ref={rootRef}
                    className={cn(className)}
                    {...props}
                  />
                )
              },
              Chevron: ({ className, orientation, ...props }) => {
                if (orientation === "left") {
                  return (
                    <ChevronLeftIcon className={cn("size-4", className)} {...props} />
                  )
                }

                if (orientation === "right") {
                  return (
                    <ChevronRightIcon
                      className={cn("size-4", className)}
                      {...props}
                    />
                  )
                }

                return (
                  <ChevronDownIcon className={cn("size-4", className)} {...props} />
                )
              },
              DayButton: CalendarDayButton,
              WeekNumber: ({ children, ...props }) => {
                return (
                  <td {...props}>
                    <div className="flex size-[--cell-size] items-center justify-center text-center">
                      {children}
                    </div>
                  </td>
                )
              },
              ...components,
            }}
            {...props}
          />
        )
      }


      function CalendarDayButton({
        className,
        day,
        modifiers,
        ...props
      }: React.ComponentProps<typeof DayButton>) {
        const defaultClassNames = getDefaultClassNames()

        const ref = React.useRef<HTMLButtonElement>(null)
        React.useEffect(() => {
          if (modifiers.focused) ref.current?.focus()
        }, [modifiers.focused])

        return (
          <Button
            ref={ref}
            variant="ghost"
            size="icon"
            data-day={day.date.toLocaleDateString()}
            data-selected-single={
              modifiers.selected &&
              !modifiers.range_start &&
              !modifiers.range_end &&
              !modifiers.range_middle
            }
            data-range-start={modifiers.range_start}
            data-range-end={modifiers.range_end}
            data-range-middle={modifiers.range_middle}
            className={cn(
              "data-[selected-single=true]:bg-primary data-[selected-single=true]:text-primary-foreground data-[range-middle=true]:bg-accent data-[range-middle=true]:text-accent-foreground data-[range-start=true]:bg-primary data-[range-start=true]:text-primary-foreground data-[range-end=true]:bg-primary data-[range-end=true]:text-primary-foreground group-data-[focused=true]/day:border-ring group-data-[focused=true]/day:ring-ring/50 flex aspect-square h-auto w-full min-w-[--cell-size] flex-col gap-1 font-normal leading-none data-[range-end=true]:rounded-md data-[range-middle=true]:rounded-none data-[range-start=true]:rounded-md group-data-[focused=true]/day:relative group-data-[focused=true]/day:z-10 group-data-[focused=true]/day:ring-[3px] [&>span]:text-xs [&>span]:opacity-70",
              defaultClassNames.day,
              className
            )}
            {...props}
          />
        )
      }


      export { Calendar, CalendarDayButton }

    types/index.ts: >
      export type TransactionType = 'income' | 'expense';

      export type Priority = 'high' | 'medium' | 'low';

      export type VacationType = 'annual' | 'unpaid' | 'sick';

      export type VacationStatus = 'planned' | 'confirmed' | 'completed';

      export type BudgetStatus = 'draft' | 'active' | 'completed';

      export type Person = 'me' | 'girlfriend';

      export type IncomeType = 'main' | 'secondary';

      export type GoalCategory = 'tech' | 'vacation' | 'auto' | 'property' |
      'education' | 'other';


      export interface Transaction {
        id: string;
        type: TransactionType;
        category: string;
        amount: number;
        date: Date;
        description: string;
        source?: string;
        createdAt: Date;
      }


      export interface BudgetCategory {
        id: string;
        name: string;
        color: string;
        icon: string;
        plannedAmount: number;
        actualAmount: number;
        limit?: number;
        carryOver: number;
      }


      export interface BudgetPlan {
        id: string;
        month: number;
        year: number;
        categories: BudgetCategory[];
        totalPlanned: number;
        status: BudgetStatus;
        createdAt: Date;
      }


      export interface IncomeSource {
        id: string;
        person: Person;
        name: string;
        expectedAmount: number;
        paymentDates: number[];
        color: string;
        type: IncomeType;
        isActive: boolean;
      }


      export interface FinancialGoal {
        id: string;
        name: string;
        targetAmount: number;
        currentAmount: number;
        deadline?: Date;
        category: GoalCategory;
        priority: Priority;
        progress: number;
        createdAt: Date;
      }


      export interface Vacation {
        id: string;
        person: Person;
        startDate: Date;
        endDate: Date;
        type: VacationType;
        status: VacationStatus;
        calculatedSalary?: number;
      }


      export interface AppSettings {
        theme: 'light' | 'dark' | 'system';
        currency: string;
        language: string;
        notifications: {
          budget: boolean;
          salary: boolean;
          goals: boolean;
        };
      }


      export interface AppData {
        transactions: Transaction[];
        budgetPlans: BudgetPlan[];
        incomeSources: IncomeSource[];
        financialGoals: FinancialGoal[];
        vacations: Vacation[];
        categories: BudgetCategory[];
        settings: AppSettings;
      }
    utils/storage.ts: |
      import type { AppData } from '@/types';

      const STORAGE_KEY = 'family-budget-app';
      const BACKUP_KEY = 'family-budget-app-backup';

      export const defaultCategories = [
        { id: '1', name: 'Продукты', color: '#10b981', icon: 'ShoppingCart', plannedAmount: 0, actualAmount: 0, carryOver: 0 },
        { id: '2', name: 'Транспорт', color: '#3b82f6', icon: 'Car', plannedAmount: 0, actualAmount: 0, carryOver: 0 },
        { id: '3', name: 'Развлечения', color: '#8b5cf6', icon: 'Gamepad2', plannedAmount: 0, actualAmount: 0, carryOver: 0 },
        { id: '4', name: 'Коммунальные услуги', color: '#f59e0b', icon: 'Lightbulb', plannedAmount: 0, actualAmount: 0, carryOver: 0 },
        { id: '5', name: 'Одежда', color: '#ec4899', icon: 'Shirt', plannedAmount: 0, actualAmount: 0, carryOver: 0 },
        { id: '6', name: 'Здоровье', color: '#ef4444', icon: 'Heart', plannedAmount: 0, actualAmount: 0, carryOver: 0 },
        { id: '7', name: 'Образование', color: '#6366f1', icon: 'BookOpen', plannedAmount: 0, actualAmount: 0, carryOver: 0 },
        { id: '8', name: 'Досуг', color: '#14b8a6', icon: 'Palette', plannedAmount: 0, actualAmount: 0, carryOver: 0 },
      ];

      export const defaultIncomeSources = [
        { id: '1', person: 'me' as const, name: 'Основная работа', expectedAmount: 80000, paymentDates: [5, 20], color: '#3b82f6', type: 'main' as const, isActive: true },
        { id: '2', person: 'me' as const, name: 'Подработка', expectedAmount: 30000, paymentDates: [10, 25], color: '#8b5cf6', type: 'secondary' as const, isActive: true },
        { id: '3', person: 'girlfriend' as const, name: 'Основная работа', expectedAmount: 70000, paymentDates: [10], color: '#ec4899', type: 'main' as const, isActive: true },
      ];

      const getDefaultData = (): AppData => ({
        transactions: [],
        budgetPlans: [],
        incomeSources: defaultIncomeSources,
        financialGoals: [],
        vacations: [],
        categories: defaultCategories,
        settings: {
          theme: 'system',
          currency: '₽',
          language: 'ru',
          notifications: {
            budget: true,
            salary: true,
            goals: true,
          },
        },
      });

      export const loadData = (): AppData => {
        try {
          const stored = localStorage.getItem(STORAGE_KEY);
          if (!stored) return getDefaultData();
          
          const parsed = JSON.parse(stored);
          
          // Convert date strings back to Date objects
          if (parsed.transactions) {
            parsed.transactions = parsed.transactions.map((t: any) => ({
              ...t,
              date: new Date(t.date),
              createdAt: new Date(t.createdAt),
            }));
          }
          
          if (parsed.financialGoals) {
            parsed.financialGoals = parsed.financialGoals.map((g: any) => ({
              ...g,
              deadline: g.deadline ? new Date(g.deadline) : undefined,
              createdAt: new Date(g.createdAt),
            }));
          }
          
          if (parsed.vacations) {
            parsed.vacations = parsed.vacations.map((v: any) => ({
              ...v,
              startDate: new Date(v.startDate),
              endDate: new Date(v.endDate),
            }));
          }
          
          if (parsed.budgetPlans) {
            parsed.budgetPlans = parsed.budgetPlans.map((bp: any) => ({
              ...bp,
              createdAt: new Date(bp.createdAt),
            }));
          }
          
          return { ...getDefaultData(), ...parsed };
        } catch (error) {
          console.error('Failed to load data from localStorage:', error);
          return getDefaultData();
        }
      };

      export const saveData = (data: AppData): void => {
        try {
          // Create backup before saving
          const current = localStorage.getItem(STORAGE_KEY);
          if (current) {
            localStorage.setItem(BACKUP_KEY, current);
          }
          
          localStorage.setItem(STORAGE_KEY, JSON.stringify(data));
        } catch (error) {
          console.error('Failed to save data to localStorage:', error);
        }
      };

      export const restoreBackup = (): AppData => {
        try {
          const backup = localStorage.getItem(BACKUP_KEY);
          if (!backup) return getDefaultData();
          
          const parsed = JSON.parse(backup);
          localStorage.setItem(STORAGE_KEY, backup);
          return parsed;
        } catch (error) {
          console.error('Failed to restore backup:', error);
          return getDefaultData();
        }
      };

      export const clearData = (): void => {
        localStorage.removeItem(STORAGE_KEY);
        localStorage.removeItem(BACKUP_KEY);
      };
    context/app-context.tsx: >
      import React, { createContext, useContext, useEffect, useState,
      useCallback } from 'react';

      import type { AppData, Transaction, BudgetPlan, FinancialGoal, Vacation,
      IncomeSource, BudgetCategory, AppSettings } from '@/types';

      import { loadData, saveData } from '@/utils/storage';


      interface AppContextType {
        data: AppData;
        addTransaction: (transaction: Omit<Transaction, 'id' | 'createdAt'>) => void;
        updateTransaction: (id: string, transaction: Partial<Transaction>) => void;
        deleteTransaction: (id: string) => void;
        addGoal: (goal: Omit<FinancialGoal, 'id' | 'createdAt' | 'progress'>) => void;
        updateGoal: (id: string, goal: Partial<FinancialGoal>) => void;
        deleteGoal: (id: string) => void;
        addVacation: (vacation: Omit<Vacation, 'id'>) => void;
        updateVacation: (id: string, vacation: Partial<Vacation>) => void;
        deleteVacation: (id: string) => void;
        addBudgetPlan: (plan: Omit<BudgetPlan, 'id' | 'createdAt'>) => void;
        updateBudgetPlan: (id: string, plan: Partial<BudgetPlan>) => void;
        deleteBudgetPlan: (id: string) => void;
        updateSettings: (settings: Partial<AppSettings>) => void;
        addCategory: (category: Omit<BudgetCategory, 'id'>) => void;
        updateCategory: (id: string, category: Partial<BudgetCategory>) => void;
        deleteCategory: (id: string) => void;
        addIncomeSource: (source: Omit<IncomeSource, 'id'>) => void;
        updateIncomeSource: (id: string, source: Partial<IncomeSource>) => void;
        deleteIncomeSource: (id: string) => void;
      }


      const AppContext = createContext<AppContextType | undefined>(undefined);


      export const AppProvider: React.FC<{ children: React.ReactNode }> = ({
      children }) => {
        const [data, setData] = useState<AppData>(loadData);
        const [saveTimeout, setSaveTimeout] = useState<NodeJS.Timeout | null>(null);

        const debouncedSave = useCallback((newData: AppData) => {
          if (saveTimeout) {
            clearTimeout(saveTimeout);
          }
          
          const timeout = setTimeout(() => {
            saveData(newData);
          }, 500);
          
          setSaveTimeout(timeout);
        }, [saveTimeout]);

        useEffect(() => {
          debouncedSave(data);
        }, [data, debouncedSave]);

        const addTransaction = useCallback((transaction: Omit<Transaction, 'id' | 'createdAt'>) => {
          setData(prev => ({
            ...prev,
            transactions: [
              ...prev.transactions,
              {
                ...transaction,
                id: crypto.randomUUID(),
                createdAt: new Date(),
              },
            ],
          }));
        }, []);

        const updateTransaction = useCallback((id: string, transaction: Partial<Transaction>) => {
          setData(prev => ({
            ...prev,
            transactions: prev.transactions.map(t => t.id === id ? { ...t, ...transaction } : t),
          }));
        }, []);

        const deleteTransaction = useCallback((id: string) => {
          setData(prev => ({
            ...prev,
            transactions: prev.transactions.filter(t => t.id !== id),
          }));
        }, []);

        const addGoal = useCallback((goal: Omit<FinancialGoal, 'id' | 'createdAt' | 'progress'>) => {
          setData(prev => ({
            ...prev,
            financialGoals: [
              ...prev.financialGoals,
              {
                ...goal,
                id: crypto.randomUUID(),
                createdAt: new Date(),
                progress: (goal.currentAmount / goal.targetAmount) * 100,
              },
            ],
          }));
        }, []);

        const updateGoal = useCallback((id: string, goal: Partial<FinancialGoal>) => {
          setData(prev => ({
            ...prev,
            financialGoals: prev.financialGoals.map(g => {
              if (g.id === id) {
                const updated = { ...g, ...goal };
                updated.progress = (updated.currentAmount / updated.targetAmount) * 100;
                return updated;
              }
              return g;
            }),
          }));
        }, []);

        const deleteGoal = useCallback((id: string) => {
          setData(prev => ({
            ...prev,
            financialGoals: prev.financialGoals.filter(g => g.id !== id),
          }));
        }, []);

        const addVacation = useCallback((vacation: Omit<Vacation, 'id'>) => {
          setData(prev => ({
            ...prev,
            vacations: [
              ...prev.vacations,
              {
                ...vacation,
                id: crypto.randomUUID(),
              },
            ],
          }));
        }, []);

        const updateVacation = useCallback((id: string, vacation: Partial<Vacation>) => {
          setData(prev => ({
            ...prev,
            vacations: prev.vacations.map(v => v.id === id ? { ...v, ...vacation } : v),
          }));
        }, []);

        const deleteVacation = useCallback((id: string) => {
          setData(prev => ({
            ...prev,
            vacations: prev.vacations.filter(v => v.id !== id),
          }));
        }, []);

        const addBudgetPlan = useCallback((plan: Omit<BudgetPlan, 'id' | 'createdAt'>) => {
          setData(prev => ({
            ...prev,
            budgetPlans: [
              ...prev.budgetPlans,
              {
                ...plan,
                id: crypto.randomUUID(),
                createdAt: new Date(),
              },
            ],
          }));
        }, []);

        const updateBudgetPlan = useCallback((id: string, plan: Partial<BudgetPlan>) => {
          setData(prev => ({
            ...prev,
            budgetPlans: prev.budgetPlans.map(bp => bp.id === id ? { ...bp, ...plan } : bp),
          }));
        }, []);

        const deleteBudgetPlan = useCallback((id: string) => {
          setData(prev => ({
            ...prev,
            budgetPlans: prev.budgetPlans.filter(bp => bp.id !== id),
          }));
        }, []);

        const updateSettings = useCallback((settings: Partial<AppSettings>) => {
          setData(prev => ({
            ...prev,
            settings: { ...prev.settings, ...settings },
          }));
        }, []);

        const addCategory = useCallback((category: Omit<BudgetCategory, 'id'>) => {
          setData(prev => ({
            ...prev,
            categories: [
              ...prev.categories,
              {
                ...category,
                id: crypto.randomUUID(),
              },
            ],
          }));
        }, []);

        const updateCategory = useCallback((id: string, category: Partial<BudgetCategory>) => {
          setData(prev => ({
            ...prev,
            categories: prev.categories.map(c => c.id === id ? { ...c, ...category } : c),
          }));
        }, []);

        const deleteCategory = useCallback((id: string) => {
          setData(prev => ({
            ...prev,
            categories: prev.categories.filter(c => c.id !== id),
          }));
        }, []);

        const addIncomeSource = useCallback((source: Omit<IncomeSource, 'id'>) => {
          setData(prev => ({
            ...prev,
            incomeSources: [
              ...prev.incomeSources,
              {
                ...source,
                id: crypto.randomUUID(),
              },
            ],
          }));
        }, []);

        const updateIncomeSource = useCallback((id: string, source: Partial<IncomeSource>) => {
          setData(prev => ({
            ...prev,
            incomeSources: prev.incomeSources.map(s => s.id === id ? { ...s, ...source } : s),
          }));
        }, []);

        const deleteIncomeSource = useCallback((id: string) => {
          setData(prev => ({
            ...prev,
            incomeSources: prev.incomeSources.filter(s => s.id !== id),
          }));
        }, []);

        return (
          <AppContext.Provider
            value={{
              data,
              addTransaction,
              updateTransaction,
              deleteTransaction,
              addGoal,
              updateGoal,
              deleteGoal,
              addVacation,
              updateVacation,
              deleteVacation,
              addBudgetPlan,
              updateBudgetPlan,
              deleteBudgetPlan,
              updateSettings,
              addCategory,
              updateCategory,
              deleteCategory,
              addIncomeSource,
              updateIncomeSource,
              deleteIncomeSource,
            }}
          >
            {children}
          </AppContext.Provider>
        );
      };


      export const useAppContext = () => {
        const context = useContext(AppContext);
        if (!context) {
          throw new Error('useAppContext must be used within AppProvider');
        }
        return context;
      };
    utils/calculations.ts: >
      import type { Transaction, FinancialGoal, BudgetCategory, BudgetPlan }
      from '@/types';

      import { startOfMonth, endOfMonth, isSameMonth, subMonths,
      differenceInDays } from 'date-fns';


      export const calculateBalance = (transactions: Transaction[]): number => {
        return transactions.reduce((acc, t) => {
          return t.type === 'income' ? acc + t.amount : acc - t.amount;
        }, 0);
      };


      export const calculateMonthlyIncome = (transactions: Transaction[], date:
      Date = new Date()): number => {
        const start = startOfMonth(date);
        const end = endOfMonth(date);
        
        return transactions
          .filter(t => t.type === 'income' && t.date >= start && t.date <= end)
          .reduce((acc, t) => acc + t.amount, 0);
      };


      export const calculateMonthlyExpenses = (transactions: Transaction[],
      date: Date = new Date()): number => {
        const start = startOfMonth(date);
        const end = endOfMonth(date);
        
        return transactions
          .filter(t => t.type === 'expense' && t.date >= start && t.date <= end)
          .reduce((acc, t) => acc + t.amount, 0);
      };


      export const calculatePercentageChange = (current: number, previous:
      number): number => {
        if (previous === 0) return current > 0 ? 100 : 0;
        return ((current - previous) / previous) * 100;
      };


      export const calculatePreviousMonthIncome = (transactions: Transaction[],
      date: Date = new Date()): number => {
        const previousMonth = subMonths(date, 1);
        return calculateMonthlyIncome(transactions, previousMonth);
      };


      export const calculatePreviousMonthExpenses = (transactions:
      Transaction[], date: Date = new Date()): number => {
        const previousMonth = subMonths(date, 1);
        return calculateMonthlyExpenses(transactions, previousMonth);
      };


      export const calculateCategoryExpenses = (transactions: Transaction[],
      category: string, date: Date = new Date()): number => {
        const start = startOfMonth(date);
        const end = endOfMonth(date);
        
        return transactions
          .filter(t => t.type === 'expense' && t.category === category && t.date >= start && t.date <= end)
          .reduce((acc, t) => acc + t.amount, 0);
      };


      export const getTopGoals = (goals: FinancialGoal[], limit: number = 3):
      FinancialGoal[] => {
        return goals
          .filter(g => g.progress < 100)
          .sort((a, b) => {
            const priorityOrder = { high: 3, medium: 2, low: 1 };
            const priorityDiff = priorityOrder[b.priority] - priorityOrder[a.priority];
            
            if (priorityDiff !== 0) return priorityDiff;
            
            if (a.deadline && b.deadline) {
              return a.deadline.getTime() - b.deadline.getTime();
            }
            
            return b.progress - a.progress;
          })
          .slice(0, limit);
      };


      export const calculateRecommendedMonthlyContribution = (goal:
      FinancialGoal): number => {
        if (!goal.deadline) return 0;
        
        const remaining = goal.targetAmount - goal.currentAmount;
        const daysLeft = differenceInDays(goal.deadline, new Date());
        const monthsLeft = Math.max(1, Math.ceil(daysLeft / 30));
        
        return remaining / monthsLeft;
      };


      export const getBudgetOverages = (categories: BudgetCategory[],
      transactions: Transaction[], date: Date = new Date()): BudgetCategory[] =>
      {
        return categories
          .map(cat => {
            const actual = calculateCategoryExpenses(transactions, cat.name, date);
            return { ...cat, actualAmount: actual };
          })
          .filter(cat => cat.actualAmount > cat.plannedAmount);
      };


      export const formatCurrency = (amount: number, currency: string = '₽'):
      string => {
        return `${amount.toLocaleString('ru-RU', { minimumFractionDigits: 0, maximumFractionDigits: 0 })} ${currency}`;
      };


      export const formatPercentage = (value: number): string => {
        const sign = value > 0 ? '+' : '';
        return `${sign}${value.toFixed(1)}%`;
      };
    components/theme-provider.tsx: >
      import React, { createContext, useContext, useEffect, useState } from
      'react';


      type Theme = 'dark' | 'light' | 'system';


      interface ThemeContextType {
        theme: Theme;
        setTheme: (theme: Theme) => void;
        actualTheme: 'dark' | 'light';
      }


      const ThemeContext = createContext<ThemeContextType |
      undefined>(undefined);


      export const ThemeProvider: React.FC<{ children: React.ReactNode;
      defaultTheme?: Theme }> = ({
        children,
        defaultTheme = 'system',
      }) => {
        const [theme, setTheme] = useState<Theme>(() => {
          const stored = localStorage.getItem('theme');
          return (stored as Theme) || defaultTheme;
        });

        const [actualTheme, setActualTheme] = useState<'dark' | 'light'>('light');

        useEffect(() => {
          const root = window.document.documentElement;
          root.classList.remove('light', 'dark');

          let systemTheme: 'dark' | 'light' = 'light';
          
          if (theme === 'system') {
            systemTheme = window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
            root.classList.add(systemTheme);
            setActualTheme(systemTheme);
          } else {
            root.classList.add(theme);
            setActualTheme(theme);
          }

          localStorage.setItem('theme', theme);
        }, [theme]);

        useEffect(() => {
          if (theme === 'system') {
            const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');
            
            const handleChange = (e: MediaQueryListEvent) => {
              const root = window.document.documentElement;
              root.classList.remove('light', 'dark');
              const newTheme = e.matches ? 'dark' : 'light';
              root.classList.add(newTheme);
              setActualTheme(newTheme);
            };

            mediaQuery.addEventListener('change', handleChange);
            return () => mediaQuery.removeEventListener('change', handleChange);
          }
        }, [theme]);

        return (
          <ThemeContext.Provider value={{ theme, setTheme, actualTheme }}>
            {children}
          </ThemeContext.Provider>
        );
      };


      export const useTheme = () => {
        const context = useContext(ThemeContext);
        if (!context) {
          throw new Error('useTheme must be used within ThemeProvider');
        }
        return context;
      };
    components/layout/navigation.tsx: >
      import React from 'react';

      import { LayoutDashboard, Receipt, Calendar, PiggyBank, Target, Briefcase,
      BarChart3, Moon, Sun, Settings } from 'lucide-react';

      import { Button } from '@/components/ui/button';

      import { useTheme } from '@/components/theme-provider';

      import { cn } from '@/lib/utils';


      interface NavigationProps {
        currentPage: string;
        onNavigate: (page: string) => void;
      }


      const navItems = [
        { id: 'dashboard', label: 'Главная', icon: LayoutDashboard },
        { id: 'transactions', label: 'Транзакции', icon: Receipt },
        { id: 'calendar', label: 'Календарь', icon: Calendar },
        { id: 'budget', label: 'Бюджет', icon: PiggyBank },
        { id: 'goals', label: 'Цели', icon: Target },
        { id: 'salary', label: 'Зарплаты', icon: Briefcase },
        { id: 'analytics', label: 'Аналитика', icon: BarChart3 },
      ];


      export const SideNavigation: React.FC<NavigationProps> = ({ currentPage,
      onNavigate }) => {
        const { theme, setTheme } = useTheme();

        const toggleTheme = () => {
          setTheme(theme === 'dark' ? 'light' : theme === 'light' ? 'system' : 'dark');
        };

        return (
          <aside className="hidden lg:flex lg:flex-col lg:w-64 lg:fixed lg:inset-y-0 bg-card border-r">
            <div className="flex items-center justify-between p-6 border-b">
              <h1 className="text-xl font-bold">Семейный бюджет</h1>
            </div>
            
            <nav className="flex-1 p-4 space-y-1 overflow-y-auto">
              {navItems.map(item => {
                const Icon = item.icon;
                return (
                  <Button
                    key={item.id}
                    variant={currentPage === item.id ? 'secondary' : 'ghost'}
                    className="w-full justify-start"
                    onClick={() => onNavigate(item.id)}
                  >
                    <Icon className="mr-3 h-4 w-4" />
                    {item.label}
                  </Button>
                );
              })}
            </nav>
            
            <div className="p-4 border-t space-y-1">
              <Button variant="ghost" className="w-full justify-start" onClick={toggleTheme}>
                {theme === 'dark' ? <Sun className="mr-3 h-4 w-4" /> : <Moon className="mr-3 h-4 w-4" />}
                Тема: {theme === 'dark' ? 'Темная' : theme === 'light' ? 'Светлая' : 'Системная'}
              </Button>
              <Button variant="ghost" className="w-full justify-start" onClick={() => onNavigate('settings')}>
                <Settings className="mr-3 h-4 w-4" />
                Настройки
              </Button>
            </div>
          </aside>
        );
      };


      export const BottomNavigation: React.FC<NavigationProps> = ({ currentPage,
      onNavigate }) => {
        const mainItems = navItems.slice(0, 5);
        
        return (
          <nav className="lg:hidden fixed bottom-0 inset-x-0 bg-card border-t">
            <div className="flex items-center justify-around p-2">
              {mainItems.map(item => {
                const Icon = item.icon;
                return (
                  <Button
                    key={item.id}
                    variant={currentPage === item.id ? 'secondary' : 'ghost'}
                    size="sm"
                    className={cn('flex flex-col gap-1 h-auto py-2 px-3', currentPage === item.id && 'bg-primary text-primary-foreground')}
                    onClick={() => onNavigate(item.id)}
                  >
                    <Icon className="h-5 w-5" />
                    <span className="text-xs">{item.label}</span>
                  </Button>
                );
              })}
            </div>
          </nav>
        );
      };
    components/dashboard/balance-widget.tsx: >
      import React from 'react';

      import { Card, CardContent, CardHeader, CardTitle } from
      '@/components/ui/card';

      import { TrendingUp, TrendingDown } from 'lucide-react';

      import { formatCurrency, formatPercentage } from '@/utils/calculations';

      import { motion } from 'framer-motion';


      interface BalanceWidgetProps {
        balance: number;
        income: number;
        expenses: number;
        incomeChange: number;
        expensesChange: number;
      }


      export const BalanceWidget: React.FC<BalanceWidgetProps> = ({
        balance,
        income,
        expenses,
        incomeChange,
        expensesChange,
      }) => {
        return (
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.3 }}
          >
            <Card>
              <CardHeader className="p-6">
                <CardTitle className="text-sm font-medium text-muted-foreground">Текущий баланс</CardTitle>
              </CardHeader>
              <CardContent className="p-6 pt-0">
                <div className="text-4xl font-bold mb-6">{formatCurrency(balance)}</div>
                
                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <div className="text-xs text-muted-foreground mb-1">Доходы за месяц</div>
                    <div className="text-xl font-semibold text-green-600">{formatCurrency(income)}</div>
                    <div className="flex items-center gap-1 mt-1">
                      {incomeChange >= 0 ? (
                        <TrendingUp className="h-3 w-3 text-green-600" />
                      ) : (
                        <TrendingDown className="h-3 w-3 text-red-600" />
                      )}
                      <span className={`text-xs ${incomeChange >= 0 ? 'text-green-600' : 'text-red-600'}`}>
                        {formatPercentage(incomeChange)}
                      </span>
                    </div>
                  </div>
                  
                  <div>
                    <div className="text-xs text-muted-foreground mb-1">Расходы за месяц</div>
                    <div className="text-xl font-semibold text-red-600">{formatCurrency(expenses)}</div>
                    <div className="flex items-center gap-1 mt-1">
                      {expensesChange >= 0 ? (
                        <TrendingUp className="h-3 w-3 text-red-600" />
                      ) : (
                        <TrendingDown className="h-3 w-3 text-green-600" />
                      )}
                      <span className={`text-xs ${expensesChange >= 0 ? 'text-red-600' : 'text-green-600'}`}>
                        {formatPercentage(Math.abs(expensesChange))}
                      </span>
                    </div>
                  </div>
                </div>
              </CardContent>
            </Card>
          </motion.div>
        );
      };
    components/dashboard/goals-widget.tsx: >
      import React from 'react';

      import { Card, CardContent, CardHeader, CardTitle } from
      '@/components/ui/card';

      import { Progress } from '@/components/ui/progress';

      import { Target } from 'lucide-react';

      import type { FinancialGoal } from '@/types';

      import { formatCurrency } from '@/utils/calculations';

      import { motion } from 'framer-motion';


      interface GoalsWidgetProps {
        goals: FinancialGoal[];
        onGoalClick: () => void;
      }


      export const GoalsWidget: React.FC<GoalsWidgetProps> = ({ goals,
      onGoalClick }) => {
        return (
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.3, delay: 0.1 }}
          >
            <Card className="cursor-pointer hover:shadow-lg transition-shadow" onClick={onGoalClick}>
              <CardHeader className="flex flex-row items-center justify-between p-6">
                <CardTitle className="text-sm font-medium">Активные цели</CardTitle>
                <Target className="h-4 w-4 text-muted-foreground" />
              </CardHeader>
              <CardContent className="p-6 pt-0 space-y-4">
                {goals.length === 0 ? (
                  <p className="text-sm text-muted-foreground">Нет активных целей</p>
                ) : (
                  goals.map((goal, index) => (
                    <motion.div
                      key={goal.id}
                      initial={{ opacity: 0, x: -20 }}
                      animate={{ opacity: 1, x: 0 }}
                      transition={{ duration: 0.3, delay: 0.1 * index }}
                      className="space-y-2"
                    >
                      <div className="flex items-center justify-between text-sm">
                        <span className="font-medium">{goal.name}</span>
                        <span className="text-muted-foreground">{goal.progress.toFixed(0)}%</span>
                      </div>
                      <Progress value={goal.progress} className="h-2" />
                      <div className="flex items-center justify-between text-xs text-muted-foreground">
                        <span>{formatCurrency(goal.currentAmount)}</span>
                        <span>{formatCurrency(goal.targetAmount)}</span>
                      </div>
                    </motion.div>
                  ))
                )}
              </CardContent>
            </Card>
          </motion.div>
        );
      };
    components/dashboard/salary-widget.tsx: >
      import React from 'react';

      import { Card, CardContent, CardHeader, CardTitle } from
      '@/components/ui/card';

      import { Calendar, Wallet } from 'lucide-react';

      import type { IncomeSource } from '@/types';

      import { formatCurrency } from '@/utils/calculations';

      import { format, addMonths, startOfMonth } from 'date-fns';

      import { ru } from 'date-fns/locale';

      import { motion } from 'framer-motion';


      interface SalaryWidgetProps {
        incomeSources: IncomeSource[];
        onSalaryClick: () => void;
      }


      export const SalaryWidget: React.FC<SalaryWidgetProps> = ({ incomeSources,
      onSalaryClick }) => {
        const getNextPayments = () => {
          const today = new Date();
          const currentDay = today.getDate();
          const payments: Array<{ date: Date; source: IncomeSource }> = [];
          
          incomeSources.forEach(source => {
            if (!source.isActive) return;
            
            source.paymentDates.forEach(day => {
              let paymentDate: Date;
              
              if (day >= currentDay) {
                paymentDate = new Date(today.getFullYear(), today.getMonth(), day);
              } else {
                const nextMonth = addMonths(today, 1);
                paymentDate = new Date(nextMonth.getFullYear(), nextMonth.getMonth(), day);
              }
              
              payments.push({ date: paymentDate, source });
            });
          });
          
          return payments.sort((a, b) => a.date.getTime() - b.date.getTime()).slice(0, 2);
        };
        
        const nextPayments = getNextPayments();
        
        return (
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.3, delay: 0.2 }}
          >
            <Card className="cursor-pointer hover:shadow-lg transition-shadow" onClick={onSalaryClick}>
              <CardHeader className="flex flex-row items-center justify-between p-6">
                <CardTitle className="text-sm font-medium">Ближайшие зарплаты</CardTitle>
                <Wallet className="h-4 w-4 text-muted-foreground" />
              </CardHeader>
              <CardContent className="p-6 pt-0 space-y-3">
                {nextPayments.length === 0 ? (
                  <p className="text-sm text-muted-foreground">Нет запланированных выплат</p>
                ) : (
                  nextPayments.map((payment, index) => (
                    <motion.div
                      key={index}
                      initial={{ opacity: 0, x: -20 }}
                      animate={{ opacity: 1, x: 0 }}
                      transition={{ duration: 0.3, delay: 0.1 * index }}
                      className="flex items-center justify-between p-3 rounded-lg border"
                    >
                      <div className="flex items-center gap-3">
                        <div className="w-2 h-2 rounded-full" style={{ backgroundColor: payment.source.color }} />
                        <div>
                          <div className="text-sm font-medium">{payment.source.name}</div>
                          <div className="text-xs text-muted-foreground flex items-center gap-1">
                            <Calendar className="h-3 w-3" />
                            {format(payment.date, 'd MMMM', { locale: ru })}
                          </div>
                        </div>
                      </div>
                      <div className="text-sm font-semibold">{formatCurrency(payment.source.expectedAmount)}</div>
                    </motion.div>
                  ))
                )}
              </CardContent>
            </Card>
          </motion.div>
        );
      };
    components/dashboard/budget-overage-widget.tsx: >
      import React from 'react';

      import { Card, CardContent, CardHeader, CardTitle } from
      '@/components/ui/card';

      import { AlertTriangle } from 'lucide-react';

      import type { BudgetCategory } from '@/types';

      import { formatCurrency } from '@/utils/calculations';

      import { motion } from 'framer-motion';


      interface BudgetOverageWidgetProps {
        overages: BudgetCategory[];
        onBudgetClick: () => void;
      }


      export const BudgetOverageWidget: React.FC<BudgetOverageWidgetProps> = ({
      overages, onBudgetClick }) => {
        return (
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.3, delay: 0.3 }}
          >
            <Card className="cursor-pointer hover:shadow-lg transition-shadow" onClick={onBudgetClick}>
              <CardHeader className="flex flex-row items-center justify-between p-6">
                <CardTitle className="text-sm font-medium">Превышения бюджета</CardTitle>
                <AlertTriangle className="h-4 w-4 text-orange-500" />
              </CardHeader>
              <CardContent className="p-6 pt-0">
                {overages.length === 0 ? (
                  <p className="text-sm text-green-600">Все в пределах бюджета!</p>
                ) : (
                  <div className="space-y-2">
                    {overages.map((category, index) => {
                      const overage = category.actualAmount - category.plannedAmount;
                      const percentage = ((overage / category.plannedAmount) * 100).toFixed(0);
                      
                      return (
                        <motion.div
                          key={category.id}
                          initial={{ opacity: 0, x: -20 }}
                          animate={{ opacity: 1, x: 0 }}
                          transition={{ duration: 0.3, delay: 0.1 * index }}
                          className="flex items-center justify-between p-2 rounded bg-red-50 dark:bg-red-950"
                        >
                          <span className="text-sm font-medium">{category.name}</span>
                          <span className="text-sm text-red-600">+{formatCurrency(overage)} ({percentage}%)</span>
                        </motion.div>
                      );
                    })}
                  </div>
                )}
              </CardContent>
            </Card>
          </motion.div>
        );
      };
    components/dashboard/mini-calendar-widget.tsx: >
      import React from 'react';

      import { Card, CardContent, CardHeader, CardTitle } from
      '@/components/ui/card';

      import { Calendar as CalendarIcon } from 'lucide-react';

      import { format, startOfMonth, endOfMonth, eachDayOfInterval, isSameDay,
      isToday } from 'date-fns';

      import { ru } from 'date-fns/locale';

      import { cn } from '@/lib/utils';

      import { motion } from 'framer-motion';


      interface MiniCalendarWidgetProps {
        onCalendarClick: () => void;
      }


      export const MiniCalendarWidget: React.FC<MiniCalendarWidgetProps> = ({
      onCalendarClick }) => {
        const today = new Date();
        const monthStart = startOfMonth(today);
        const monthEnd = endOfMonth(today);
        const days = eachDayOfInterval({ start: monthStart, end: monthEnd });
        
        const firstDayOfWeek = monthStart.getDay();
        const emptyDays = Array.from({ length: firstDayOfWeek === 0 ? 6 : firstDayOfWeek - 1 });
        
        return (
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.3, delay: 0.4 }}
          >
            <Card className="cursor-pointer hover:shadow-lg transition-shadow" onClick={onCalendarClick}>
              <CardHeader className="flex flex-row items-center justify-between p-6">
                <CardTitle className="text-sm font-medium">{format(today, 'LLLL yyyy', { locale: ru })}</CardTitle>
                <CalendarIcon className="h-4 w-4 text-muted-foreground" />
              </CardHeader>
              <CardContent className="p-6 pt-0">
                <div className="grid grid-cols-7 gap-1 text-center text-xs">
                  {['Пн', 'Вт', 'Ср', 'Чт', 'Пт', 'Сб', 'Вс'].map(day => (
                    <div key={day} className="font-medium text-muted-foreground py-1">
                      {day}
                    </div>
                  ))}
                  
                  {emptyDays.map((_, i) => (
                    <div key={`empty-${i}`} />
                  ))}
                  
                  {days.map(day => (
                    <div
                      key={day.toString()}
                      className={cn(
                        'aspect-square flex items-center justify-center rounded-md hover:bg-accent transition-colors',
                        isToday(day) && 'bg-primary text-primary-foreground font-semibold'
                      )}
                    >
                      {format(day, 'd')}
                    </div>
                  ))}
                </div>
              </CardContent>
            </Card>
          </motion.div>
        );
      };
    components/dashboard/dashboard-page.tsx: >
      import React from 'react';

      import { useAppContext } from '@/context/app-context';

      import {
        calculateBalance,
        calculateMonthlyIncome,
        calculateMonthlyExpenses,
        calculatePercentageChange,
        calculatePreviousMonthIncome,
        calculatePreviousMonthExpenses,
        getTopGoals,
        getBudgetOverages,
      } from '@/utils/calculations';

      import { BalanceWidget } from './balance-widget';

      import { GoalsWidget } from './goals-widget';

      import { SalaryWidget } from './salary-widget';

      import { BudgetOverageWidget } from './budget-overage-widget';

      import { MiniCalendarWidget } from './mini-calendar-widget';


      interface DashboardPageProps {
        onNavigate: (page: string) => void;
      }


      export const DashboardPage: React.FC<DashboardPageProps> = ({ onNavigate
      }) => {
        const { data } = useAppContext();
        
        const balance = calculateBalance(data.transactions);
        const currentIncome = calculateMonthlyIncome(data.transactions);
        const currentExpenses = calculateMonthlyExpenses(data.transactions);
        const previousIncome = calculatePreviousMonthIncome(data.transactions);
        const previousExpenses = calculatePreviousMonthExpenses(data.transactions);
        
        const incomeChange = calculatePercentageChange(currentIncome, previousIncome);
        const expensesChange = calculatePercentageChange(currentExpenses, previousExpenses);
        
        const topGoals = getTopGoals(data.financialGoals, 3);
        const budgetOverages = getBudgetOverages(data.categories, data.transactions);
        
        return (
          <div className="p-4 lg:p-6 space-y-6 pb-20 lg:pb-6">
            <div className="flex items-center justify-between">
              <h1 className="text-3xl font-bold">Главная</h1>
            </div>
            
            <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-3">
              <div className="md:col-span-2 lg:col-span-3">
                <BalanceWidget
                  balance={balance}
                  income={currentIncome}
                  expenses={currentExpenses}
                  incomeChange={incomeChange}
                  expensesChange={expensesChange}
                />
              </div>
              
              <GoalsWidget goals={topGoals} onGoalClick={() => onNavigate('goals')} />
              <SalaryWidget incomeSources={data.incomeSources} onSalaryClick={() => onNavigate('salary')} />
              <BudgetOverageWidget overages={budgetOverages} onBudgetClick={() => onNavigate('budget')} />
              
              <div className="md:col-span-2 lg:col-span-1">
                <MiniCalendarWidget onCalendarClick={() => onNavigate('calendar')} />
              </div>
            </div>
          </div>
        );
      };
    components/transactions/transactions-page.tsx: >
      import React, { useState } from 'react';

      import { Card, CardContent, CardHeader, CardTitle } from
      '@/components/ui/card';

      import { Button } from '@/components/ui/button';

      import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger }
      from '@/components/ui/dialog';

      import { Plus } from 'lucide-react';

      import { TransactionForm } from './transaction-form';

      import { TransactionsTable } from './transactions-table';

      import { motion } from 'framer-motion';


      export const TransactionsPage: React.FC = () => {
        const [dialogOpen, setDialogOpen] = useState(false);

        return (
          <div className="p-4 lg:p-6 space-y-6 pb-20 lg:pb-6">
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.3 }}
              className="flex items-center justify-between"
            >
              <h1 className="text-3xl font-bold">Транзакции</h1>
              <Dialog open={dialogOpen} onOpenChange={setDialogOpen}>
                <DialogTrigger asChild>
                  <Button>
                    <Plus className="mr-2 h-4 w-4" />
                    Добавить
                  </Button>
                </DialogTrigger>
                <DialogContent className="max-w-md max-h-[90vh] overflow-y-auto">
                  <DialogHeader>
                    <DialogTitle>Новая транзакция</DialogTitle>
                  </DialogHeader>
                  <TransactionForm onSuccess={() => setDialogOpen(false)} />
                </DialogContent>
              </Dialog>
            </motion.div>

            <motion.div initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} transition={{ duration: 0.3, delay: 0.1 }}>
              <Card>
                <CardHeader className="p-6">
                  <CardTitle>Все транзакции</CardTitle>
                </CardHeader>
                <CardContent className="p-6 pt-0">
                  <TransactionsTable />
                </CardContent>
              </Card>
            </motion.div>
          </div>
        );
      };
    components/calendar/calendar-page.tsx: >
      import React, { useState } from 'react';

      import { Card, CardContent, CardHeader, CardTitle } from
      '@/components/ui/card';

      import { Button } from '@/components/ui/button';

      import { ChevronLeft, ChevronRight } from 'lucide-react';

      import { useAppContext } from '@/context/app-context';

      import { format, startOfMonth, endOfMonth, eachDayOfInterval, isSameDay,
      addMonths, subMonths, isToday } from 'date-fns';

      import { ru } from 'date-fns/locale';

      import { cn } from '@/lib/utils';

      import { motion } from 'framer-motion';


      export const CalendarPage: React.FC = () => {
        const { data } = useAppContext();
        const [currentDate, setCurrentDate] = useState(new Date());

        const monthStart = startOfMonth(currentDate);
        const monthEnd = endOfMonth(currentDate);
        const days = eachDayOfInterval({ start: monthStart, end: monthEnd });

        const firstDayOfWeek = monthStart.getDay();
        const emptyDays = Array.from({ length: firstDayOfWeek === 0 ? 6 : firstDayOfWeek - 1 });

        const hasTransaction = (day: Date) => {
          return data.transactions.some(t => isSameDay(t.date, day));
        };

        const hasSalary = (day: Date) => {
          const dayOfMonth = day.getDate();
          return data.incomeSources.some(source => source.paymentDates.includes(dayOfMonth) && source.isActive);
        };

        const hasVacation = (day: Date) => {
          return data.vacations.some(v => day >= v.startDate && day <= v.endDate);
        };

        return (
          <div className="p-4 lg:p-6 space-y-6 pb-20 lg:pb-6">
            <motion.div initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} transition={{ duration: 0.3 }}>
              <h1 className="text-3xl font-bold">Календарь</h1>
            </motion.div>

            <motion.div initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} transition={{ duration: 0.3, delay: 0.1 }}>
              <Card>
                <CardHeader className="flex flex-row items-center justify-between p-6">
                  <Button type="button" variant="outline" size="icon" onClick={() => setCurrentDate(subMonths(currentDate, 1))}>
                    <ChevronLeft className="h-4 w-4" />
                  </Button>
                  <CardTitle>{format(currentDate, 'LLLL yyyy', { locale: ru })}</CardTitle>
                  <Button type="button" variant="outline" size="icon" onClick={() => setCurrentDate(addMonths(currentDate, 1))}>
                    <ChevronRight className="h-4 w-4" />
                  </Button>
                </CardHeader>
                <CardContent className="p-6 pt-0">
                  <div className="grid grid-cols-7 gap-2">
                    {['Пн', 'Вт', 'Ср', 'Чт', 'Пт', 'Сб', 'Вс'].map(day => (
                      <div key={day} className="text-center font-medium text-sm text-muted-foreground py-2">
                        {day}
                      </div>
                    ))}

                    {emptyDays.map((_, i) => (
                      <div key={`empty-${i}`} />
                    ))}

                    {days.map(day => {
                      const hasTransactions = hasTransaction(day);
                      const hasSalaryPayment = hasSalary(day);
                      const isVacation = hasVacation(day);
                      const today = isToday(day);

                      return (
                        <div
                          key={day.toString()}
                          className={cn(
                            'aspect-square p-2 rounded-lg border transition-all hover:border-primary cursor-pointer',
                            today && 'border-primary bg-primary/5',
                            isVacation && 'bg-yellow-100 dark:bg-yellow-900/20'
                          )}
                        >
                          <div className="text-sm font-medium mb-1">{format(day, 'd')}</div>
                          <div className="flex gap-1">
                            {hasSalaryPayment && <div className="w-2 h-2 rounded-full bg-blue-500" title="Зарплата" />}
                            {hasTransactions && <div className="w-2 h-2 rounded-full bg-green-500" title="Транзакции" />}
                          </div>
                        </div>
                      );
                    })}
                  </div>

                  <div className="mt-6 flex flex-wrap gap-4 text-sm">
                    <div className="flex items-center gap-2">
                      <div className="w-3 h-3 rounded-full bg-blue-500" />
                      <span>Зарплата</span>
                    </div>
                    <div className="flex items-center gap-2">
                      <div className="w-3 h-3 rounded-full bg-green-500" />
                      <span>Транзакции</span>
                    </div>
                    <div className="flex items-center gap-2">
                      <div className="w-3 h-3 rounded bg-yellow-100 dark:bg-yellow-900/20 border" />
                      <span>Отпуск</span>
                    </div>
                  </div>
                </CardContent>
              </Card>
            </motion.div>
          </div>
        );
      };
    components/budget/budget-page.tsx: >
      import React, { useState, useMemo } from 'react';

      import { Card, CardContent, CardHeader, CardTitle } from
      '@/components/ui/card';

      import { Button } from '@/components/ui/button';

      import { Input } from '@/components/ui/input';

      import { Progress } from '@/components/ui/progress';

      import { Badge } from '@/components/ui/badge';

      import { Edit, Plus } from 'lucide-react';

      import { useAppContext } from '@/context/app-context';

      import { calculateCategoryExpenses, formatCurrency } from
      '@/utils/calculations';

      import { motion } from 'framer-motion';

      import * as Icons from 'lucide-react';


      export const BudgetPage: React.FC = () => {
        const { data, updateCategory } = useAppContext();
        const [editingCategory, setEditingCategory] = useState<string | null>(null);
        const [plannedAmount, setPlannedAmount] = useState<number>(0);

        const categoriesWithActual = useMemo(() => {
          return data.categories.map(cat => {
            const actual = calculateCategoryExpenses(data.transactions, cat.name);
            const percentage = cat.plannedAmount > 0 ? (actual / cat.plannedAmount) * 100 : 0;
            const deviation = actual - cat.plannedAmount;
            
            return {
              ...cat,
              actualAmount: actual,
              percentage,
              deviation,
            };
          });
        }, [data.categories, data.transactions]);

        const handleSavePlanned = (categoryId: string) => {
          updateCategory(categoryId, { plannedAmount });
          setEditingCategory(null);
          setPlannedAmount(0);
        };

        const getProgressColor = (percentage: number) => {
          if (percentage < 70) return 'bg-green-600';
          if (percentage < 90) return 'bg-yellow-600';
          return 'bg-red-600';
        };

        const getIconComponent = (iconName: string) => {
          const Icon = (Icons as any)[iconName];
          return Icon ? <Icon className="h-5 w-5" /> : null;
        };

        const totalPlanned = categoriesWithActual.reduce((sum, cat) => sum + cat.plannedAmount, 0);
        const totalActual = categoriesWithActual.reduce((sum, cat) => sum + cat.actualAmount, 0);
        const totalDeviation = totalActual - totalPlanned;

        return (
          <div className="p-4 lg:p-6 space-y-6 pb-20 lg:pb-6">
            <motion.div initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} transition={{ duration: 0.3 }}>
              <h1 className="text-3xl font-bold">Планирование бюджета</h1>
            </motion.div>

            <motion.div initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} transition={{ duration: 0.3, delay: 0.1 }}>
              <Card>
                <CardHeader className="p-6">
                  <CardTitle>Сводка за текущий месяц</CardTitle>
                </CardHeader>
                <CardContent className="p-6 pt-0">
                  <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                    <div className="p-4 rounded-lg border">
                      <div className="text-sm text-muted-foreground mb-1">Запланировано</div>
                      <div className="text-2xl font-bold">{formatCurrency(totalPlanned)}</div>
                    </div>
                    <div className="p-4 rounded-lg border">
                      <div className="text-sm text-muted-foreground mb-1">Потрачено</div>
                      <div className="text-2xl font-bold">{formatCurrency(totalActual)}</div>
                    </div>
                    <div className="p-4 rounded-lg border">
                      <div className="text-sm text-muted-foreground mb-1">Отклонение</div>
                      <div className={`text-2xl font-bold ${totalDeviation > 0 ? 'text-red-600' : 'text-green-600'}`}>
                        {totalDeviation > 0 ? '+' : ''}
                        {formatCurrency(totalDeviation)}
                      </div>
                    </div>
                  </div>
                </CardContent>
              </Card>
            </motion.div>

            <motion.div initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} transition={{ duration: 0.3, delay: 0.2 }}>
              <Card>
                <CardHeader className="p-6">
                  <CardTitle>Категории</CardTitle>
                </CardHeader>
                <CardContent className="p-6 pt-0 space-y-4">
                  {categoriesWithActual.map((category, index) => (
                    <motion.div
                      key={category.id}
                      initial={{ opacity: 0, x: -20 }}
                      animate={{ opacity: 1, x: 0 }}
                      transition={{ duration: 0.3, delay: 0.05 * index }}
                      className="p-4 rounded-lg border space-y-3"
                    >
                      <div className="flex items-center justify-between">
                        <div className="flex items-center gap-3">
                          <div className="w-10 h-10 rounded-full flex items-center justify-center" style={{ backgroundColor: `${category.color}20` }}>
                            <span style={{ color: category.color }}>{getIconComponent(category.icon)}</span>
                          </div>
                          <div>
                            <div className="font-medium">{category.name}</div>
                            <div className="text-sm text-muted-foreground">{category.percentage.toFixed(0)}% использовано</div>
                          </div>
                        </div>
                        <div className="text-right space-y-1">
                          {editingCategory === category.id ? (
                            <div className="flex items-center gap-2">
                              <Input
                                type="number"
                                value={plannedAmount}
                                onChange={e => setPlannedAmount(parseFloat(e.target.value) || 0)}
                                className="w-32"
                                placeholder="План"
                              />
                              <Button type="button" size="sm" onClick={() => handleSavePlanned(category.id)}>
                                Сохранить
                              </Button>
                            </div>
                          ) : (
                            <>
                              <div className="flex items-center gap-2 justify-end">
                                <span className="font-semibold">{formatCurrency(category.actualAmount)}</span>
                                <span className="text-muted-foreground">/ {formatCurrency(category.plannedAmount)}</span>
                                <Button
                                  type="button"
                                  variant="ghost"
                                  size="icon"
                                  className="h-6 w-6"
                                  onClick={() => {
                                    setEditingCategory(category.id);
                                    setPlannedAmount(category.plannedAmount);
                                  }}
                                >
                                  <Edit className="h-3 w-3" />
                                </Button>
                              </div>
                              {category.deviation !== 0 && (
                                <Badge variant={category.deviation > 0 ? 'destructive' : 'default'} className={category.deviation < 0 ? 'bg-green-600' : ''}>
                                  {category.deviation > 0 ? '+' : ''}
                                  {formatCurrency(category.deviation)}
                                </Badge>
                              )}
                            </>
                          )}
                        </div>
                      </div>

                      <div className="space-y-2">
                        <Progress value={Math.min(category.percentage, 100)} className={`h-2 ${getProgressColor(category.percentage)}`} />
                        <div className="flex justify-between text-xs text-muted-foreground">
                          <span>Осталось: {formatCurrency(Math.max(0, category.plannedAmount - category.actualAmount))}</span>
                          {category.percentage > 100 && <span className="text-red-600 font-medium">Превышение!</span>}
                        </div>
                      </div>
                    </motion.div>
                  ))}
                </CardContent>
              </Card>
            </motion.div>
          </div>
        );
      };
    components/goals/goals-page.tsx: >
      import React, { useState } from 'react';

      import { Card, CardContent, CardHeader, CardTitle } from
      '@/components/ui/card';

      import { Button } from '@/components/ui/button';

      import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger }
      from '@/components/ui/dialog';

      import { Input } from '@/components/ui/input';

      import { Progress } from '@/components/ui/progress';

      import { Badge } from '@/components/ui/badge';

      import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage }
      from '@/components/ui/form';

      import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue }
      from '@/components/ui/select';

      import { Calendar } from '@/components/ui/calendar';

      import { Popover, PopoverContent, PopoverTrigger } from
      '@/components/ui/popover';

      import { Plus, Target, Calendar as CalendarIcon, TrendingUp, Wallet } from
      'lucide-react';

      import { useAppContext } from '@/context/app-context';

      import { formatCurrency, calculateRecommendedMonthlyContribution } from
      '@/utils/calculations';

      import { differenceInDays } from 'date-fns';

      import { format } from 'date-fns';

      import { ru } from 'date-fns/locale';

      import { motion } from 'framer-motion';

      import { useForm } from 'react-hook-form';

      import { zodResolver } from '@hookform/resolvers/zod';

      import { z } from 'zod';

      import { cn } from '@/lib/utils';

      import { useToast } from '@/hooks/use-toast';


      const formSchema = z.object({
        name: z.string().min(1, 'Введите название цели'),
        targetAmount: z.number().min(1, 'Сумма должна быть больше 0'),
        currentAmount: z.number().min(0, 'Сумма не может быть отрицательной'),
        deadline: z.date().optional(),
        category: z.enum(['tech', 'vacation', 'auto', 'property', 'education', 'other']),
        priority: z.enum(['high', 'medium', 'low']),
      });


      type FormData = z.infer<typeof formSchema>;


      export const GoalsPage: React.FC = () => {
        const { data, addGoal, updateGoal, deleteGoal } = useAppContext();
        const [dialogOpen, setDialogOpen] = useState(false);
        const [contributeDialogOpen, setContributeDialogOpen] = useState(false);
        const [selectedGoal, setSelectedGoal] = useState<string | null>(null);
        const [contributeAmount, setContributeAmount] = useState<number>(0);
        const { toast } = useToast();

        const form = useForm<FormData>({
          resolver: zodResolver(formSchema),
          defaultValues: {
            name: '',
            targetAmount: 0,
            currentAmount: 0,
            category: 'other',
            priority: 'medium',
          },
        });

        const onSubmit = (values: FormData) => {
          addGoal({
            name: values.name,
            targetAmount: values.targetAmount,
            currentAmount: values.currentAmount,
            deadline: values.deadline,
            category: values.category,
            priority: values.priority,
          });

          form.reset();
          setDialogOpen(false);
          toast({
            title: 'Цель создана',
            description: `Цель "${values.name}" успешно добавлена`,
          });
        };

        const handleContribute = () => {
          if (selectedGoal && contributeAmount > 0) {
            const goal = data.financialGoals.find(g => g.id === selectedGoal);
            if (goal) {
              const newAmount = goal.currentAmount + contributeAmount;
              updateGoal(selectedGoal, { currentAmount: newAmount });

              const newProgress = (newAmount / goal.targetAmount) * 100;
              
              if (newProgress >= 50 && goal.progress < 50) {
                toast({ title: '🎯 Половина пути пройдена!', description: `Вы достигли 50% цели "${goal.name}"` });
              } else if (newProgress >= 80 && goal.progress < 80) {
                toast({ title: '⏰ Почти у цели!', description: `Вы достигли 80% цели "${goal.name}"` });
              } else if (newProgress >= 100 && goal.progress < 100) {
                toast({ title: '🏆 Цель достигнута!', description: `Поздравляем! Цель "${goal.name}" выполнена!` });
              }

              setContributeDialogOpen(false);
              setContributeAmount(0);
              setSelectedGoal(null);
            }
          }
        };

        const getCategoryLabel = (category: string) => {
          const labels: Record<string, string> = {
            tech: 'Техника',
            vacation: 'Отпуск',
            auto: 'Авто',
            property: 'Недвижимость',
            education: 'Образование',
            other: 'Прочее',
          };
          return labels[category] || category;
        };

        const getPriorityColor = (priority: string) => {
          const colors: Record<string, string> = {
            high: 'destructive',
            medium: 'default',
            low: 'secondary',
          };
          return colors[priority] || 'default';
        };

        return (
          <div className="p-4 lg:p-6 space-y-6 pb-20 lg:pb-6">
            <motion.div initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} transition={{ duration: 0.3 }} className="flex items-center justify-between">
              <h1 className="text-3xl font-bold">Финансовые цели</h1>
              <Dialog open={dialogOpen} onOpenChange={setDialogOpen}>
                <DialogTrigger asChild>
                  <Button>
                    <Plus className="mr-2 h-4 w-4" />
                    Добавить цель
                  </Button>
                </DialogTrigger>
                <DialogContent className="max-w-md max-h-[90vh] overflow-y-auto">
                  <DialogHeader>
                    <DialogTitle>Новая цель</DialogTitle>
                  </DialogHeader>
                  <Form {...form}>
                    <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
                      <FormField
                        control={form.control}
                        name="name"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>Название цели</FormLabel>
                            <FormControl>
                              <Input placeholder="Новый ноутбук" {...field} />
                            </FormControl>
                            <FormMessage />
                          </FormItem>
                        )}
                      />

                      <FormField
                        control={form.control}
                        name="targetAmount"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>Целевая сумма</FormLabel>
                            <FormControl>
                              <Input type="number" placeholder="100000" {...field} onChange={e => field.onChange(parseFloat(e.target.value))} />
                            </FormControl>
                            <FormMessage />
                          </FormItem>
                        )}
                      />

                      <FormField
                        control={form.control}
                        name="currentAmount"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>Текущая сумма</FormLabel>
                            <FormControl>
                              <Input type="number" placeholder="0" {...field} onChange={e => field.onChange(parseFloat(e.target.value))} />
                            </FormControl>
                            <FormMessage />
                          </FormItem>
                        )}
                      />

                      <FormField
                        control={form.control}
                        name="category"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>Категория</FormLabel>
                            <Select onValueChange={field.onChange} value={field.value}>
                              <FormControl>
                                <SelectTrigger>
                                  <SelectValue placeholder="Выберите категорию" />
                                </SelectTrigger>
                              </FormControl>
                              <SelectContent>
                                <SelectItem value="tech">Техника</SelectItem>
                                <SelectItem value="vacation">Отпуск</SelectItem>
                                <SelectItem value="auto">Авто</SelectItem>
                                <SelectItem value="property">Недвижимость</SelectItem>
                                <SelectItem value="education">Образование</SelectItem>
                                <SelectItem value="other">Прочее</SelectItem>
                              </SelectContent>
                            </Select>
                            <FormMessage />
                          </FormItem>
                        )}
                      />

                      <FormField
                        control={form.control}
                        name="priority"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>Приоритет</FormLabel>
                            <Select onValueChange={field.onChange} value={field.value}>
                              <FormControl>
                                <SelectTrigger>
                                  <SelectValue placeholder="Выберите приоритет" />
                                </SelectTrigger>
                              </FormControl>
                              <SelectContent>
                                <SelectItem value="high">Высокий</SelectItem>
                                <SelectItem value="medium">Средний</SelectItem>
                                <SelectItem value="low">Низкий</SelectItem>
                              </SelectContent>
                            </Select>
                            <FormMessage />
                          </FormItem>
                        )}
                      />

                      <FormField
                        control={form.control}
                        name="deadline"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>Срок (опционально)</FormLabel>
                            <Popover>
                              <PopoverTrigger asChild>
                                <FormControl>
                                  <Button type="button" variant="outline" className={cn('w-full justify-start text-left font-normal', !field.value && 'text-muted-foreground')}>
                                    <CalendarIcon className="mr-2 h-4 w-4" />
                                    {field.value ? format(field.value, 'PPP', { locale: ru }) : <span>Выберите дату</span>}
                                  </Button>
                                </FormControl>
                              </PopoverTrigger>
                              <PopoverContent className="w-auto p-0" align="start">
                                <Calendar mode="single" selected={field.value} onSelect={field.onChange} initialFocus />
                              </PopoverContent>
                            </Popover>
                            <FormMessage />
                          </FormItem>
                        )}
                      />

                      <Button type="submit" className="w-full">
                        Создать цель
                      </Button>
                    </form>
                  </Form>
                </DialogContent>
              </Dialog>
            </motion.div>

            <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-3">
              {data.financialGoals.map((goal, index) => {
                const remaining = goal.targetAmount - goal.currentAmount;
                const daysLeft = goal.deadline ? differenceInDays(goal.deadline, new Date()) : null;
                const recommended = calculateRecommendedMonthlyContribution(goal);

                return (
                  <motion.div key={goal.id} initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} transition={{ duration: 0.3, delay: 0.1 * index }}>
                    <Card className="h-full">
                      <CardHeader className="p-6">
                        <div className="flex items-start justify-between">
                          <div className="space-y-1">
                            <CardTitle className="text-lg">{goal.name}</CardTitle>
                            <div className="flex items-center gap-2">
                              <Badge variant={getPriorityColor(goal.priority) as any}>{goal.priority === 'high' ? 'Высокий' : goal.priority === 'medium' ? 'Средний' : 'Низкий'}</Badge>
                              <Badge variant="outline">{getCategoryLabel(goal.category)}</Badge>
                            </div>
                          </div>
                          <Target className="h-5 w-5 text-muted-foreground" />
                        </div>
                      </CardHeader>
                      <CardContent className="p-6 pt-0 space-y-4">
                        <div className="space-y-2">
                          <div className="flex items-center justify-between text-sm">
                            <span className="text-muted-foreground">Прогресс</span>
                            <span className="font-semibold">{goal.progress.toFixed(0)}%</span>
                          </div>
                          <Progress value={goal.progress} className="h-3" />
                          <div className="flex items-center justify-between text-xs text-muted-foreground">
                            <span>{formatCurrency(goal.currentAmount)}</span>
                            <span>{formatCurrency(goal.targetAmount)}</span>
                          </div>
                        </div>

                        <div className="space-y-2 p-3 rounded-lg bg-muted/50">
                          <div className="flex items-center justify-between text-sm">
                            <span className="text-muted-foreground">Осталось</span>
                            <span className="font-semibold">{formatCurrency(remaining)}</span>
                          </div>
                          {daysLeft !== null && (
                            <div className="flex items-center justify-between text-sm">
                              <span className="text-muted-foreground">Дней до дедлайна</span>
                              <span className="font-semibold">{daysLeft}</span>
                            </div>
                          )}
                          {recommended > 0 && (
                            <div className="flex items-center justify-between text-sm">
                              <span className="text-muted-foreground">Рекомендуемый взнос/мес</span>
                              <span className="font-semibold text-primary">{formatCurrency(recommended)}</span>
                            </div>
                          )}
                        </div>

                        <Button
                          type="button"
                          className="w-full"
                          onClick={() => {
                            setSelectedGoal(goal.id);
                            setContributeDialogOpen(true);
                          }}
                        >
                          <Wallet className="mr-2 h-4 w-4" />
                          Внести средства
                        </Button>
                      </CardContent>
                    </Card>
                  </motion.div>
                );
              })}

              {data.financialGoals.length === 0 && (
                <motion.div initial={{ opacity: 0 }} animate={{ opacity: 1 }} className="col-span-full">
                  <Card className="p-12">
                    <CardContent className="p-6 text-center space-y-2">
                      <Target className="h-12 w-12 mx-auto text-muted-foreground mb-4" />
                      <h3 className="text-lg font-medium">Нет активных целей</h3>
                      <p className="text-sm text-muted-foreground">Создайте первую цель, чтобы начать копить</p>
                    </CardContent>
                  </Card>
                </motion.div>
              )}
            </div>

            <Dialog open={contributeDialogOpen} onOpenChange={setContributeDialogOpen}>
              <DialogContent>
                <DialogHeader>
                  <DialogTitle>Внести средства</DialogTitle>
                </DialogHeader>
                <div className="space-y-4">
                  <div className="grid gap-2">
                    <label htmlFor="contribute-amount" className="text-sm font-medium">
                      Сумма
                    </label>
                    <Input id="contribute-amount" type="number" value={contributeAmount} onChange={e => setContributeAmount(parseFloat(e.target.value) || 0)} placeholder="0.00" />
                  </div>
                  <div className="flex justify-end gap-2">
                    <Button type="button" variant="outline" onClick={() => setContributeDialogOpen(false)}>
                      Отмена
                    </Button>
                    <Button type="button" onClick={handleContribute}>
                      Внести
                    </Button>
                  </div>
                </div>
              </DialogContent>
            </Dialog>
          </div>
        );
      };
    components/salary/salary-page.tsx: >
      import React, { useState } from 'react';

      import { Card, CardContent, CardHeader, CardTitle } from
      '@/components/ui/card';

      import { Badge } from '@/components/ui/badge';

      import { Button } from '@/components/ui/button';

      import { Dialog, DialogContent, DialogDescription, DialogHeader,
      DialogTitle, DialogTrigger } from '@/components/ui/dialog';

      import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage }
      from '@/components/ui/form';

      import { Input } from '@/components/ui/input';

      import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue }
      from '@/components/ui/select';

      import { useAppContext } from '@/context/app-context';

      import { formatCurrency } from '@/utils/calculations';

      import { format, addMonths } from 'date-fns';

      import { ru } from 'date-fns/locale';

      import { motion } from 'framer-motion';

      import { Wallet, Calendar, Plus, Edit, Trash2 } from 'lucide-react';

      import { useForm } from 'react-hook-form';

      import { zodResolver } from '@hookform/resolvers/zod';

      import { z } from 'zod';

      import type { IncomeSource } from '@/types';


      const formSchema = z.object({
        person: z.enum(['me', 'girlfriend']),
        name: z.string().min(1, 'Введите название'),
        expectedAmount: z.number().min(0, 'Сумма должна быть больше 0'),
        paymentDates: z.string().min(1, 'Введите даты выплат'),
        color: z.string().min(1, 'Выберите цвет'),
        type: z.enum(['main', 'secondary']),
      });


      type FormData = z.infer<typeof formSchema>;


      export const SalaryPage: React.FC = () => {
        const { data, addIncomeSource, updateIncomeSource, deleteIncomeSource } = useAppContext();
        const [addDialogOpen, setAddDialogOpen] = useState(false);
        const [editDialogOpen, setEditDialogOpen] = useState(false);
        const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);
        const [selectedSource, setSelectedSource] = useState<IncomeSource | null>(null);

        const form = useForm<FormData>({
          resolver: zodResolver(formSchema),
          defaultValues: {
            person: 'me',
            name: '',
            expectedAmount: 0,
            paymentDates: '',
            color: '#3b82f6',
            type: 'main',
          },
        });

        const editForm = useForm<FormData>({
          resolver: zodResolver(formSchema),
        });

        const onSubmit = (values: FormData) => {
          const paymentDates = values.paymentDates
            .split(',')
            .map(d => parseInt(d.trim()))
            .filter(d => !isNaN(d) && d >= 1 && d <= 31);

          addIncomeSource({
            person: values.person,
            name: values.name,
            expectedAmount: values.expectedAmount,
            paymentDates,
            color: values.color,
            type: values.type,
            isActive: true,
          });

          form.reset();
          setAddDialogOpen(false);
        };

        const onEdit = (values: FormData) => {
          if (!selectedSource) return;

          const paymentDates = values.paymentDates
            .split(',')
            .map(d => parseInt(d.trim()))
            .filter(d => !isNaN(d) && d >= 1 && d <= 31);

          updateIncomeSource(selectedSource.id, {
            person: values.person,
            name: values.name,
            expectedAmount: values.expectedAmount,
            paymentDates,
            color: values.color,
            type: values.type,
          });

          setEditDialogOpen(false);
          setSelectedSource(null);
        };

        const handleEdit = (source: IncomeSource) => {
          setSelectedSource(source);
          editForm.reset({
            person: source.person,
            name: source.name,
            expectedAmount: source.expectedAmount,
            paymentDates: source.paymentDates.join(', '),
            color: source.color,
            type: source.type,
          });
          setEditDialogOpen(true);
        };

        const handleDelete = () => {
          if (selectedSource) {
            deleteIncomeSource(selectedSource.id);
            setDeleteDialogOpen(false);
            setSelectedSource(null);
          }
        };

        const getUpcomingPayments = () => {
          const today = new Date();
          const currentDay = today.getDate();
          const payments: Array<{ date: Date; source: IncomeSource }> = [];

          data.incomeSources.forEach(source => {
            if (!source.isActive) return;

            source.paymentDates.forEach(day => {
              let paymentDate: Date;

              if (day >= currentDay) {
                paymentDate = new Date(today.getFullYear(), today.getMonth(), day);
              } else {
                const nextMonth = addMonths(today, 1);
                paymentDate = new Date(nextMonth.getFullYear(), nextMonth.getMonth(), day);
              }

              payments.push({ date: paymentDate, source });
            });
          });

          return payments.sort((a, b) => a.date.getTime() - b.date.getTime()).slice(0, 10);
        };

        const upcomingPayments = getUpcomingPayments();
        const meIncome = data.incomeSources.filter(s => s.person === 'me');
        const girlfriendIncome = data.incomeSources.filter(s => s.person === 'girlfriend');

        const colors = [
          { value: '#3b82f6', label: 'Синий' },
          { value: '#8b5cf6', label: 'Фиолетовый' },
          { value: '#ec4899', label: 'Розовый' },
          { value: '#10b981', label: 'Зеленый' },
          { value: '#f59e0b', label: 'Оранжевый' },
          { value: '#ef4444', label: 'Красный' },
        ];

        return (
          <div className="p-4 lg:p-6 space-y-6 pb-20 lg:pb-6">
            <motion.div initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} transition={{ duration: 0.3 }} className="flex items-center justify-between">
              <h1 className="text-3xl font-bold">Зарплаты и отпуска</h1>
              <Dialog open={addDialogOpen} onOpenChange={setAddDialogOpen}>
                <DialogTrigger asChild>
                  <Button>
                    <Plus className="mr-2 h-4 w-4" />
                    Добавить источник
                  </Button>
                </DialogTrigger>
                <DialogContent className="max-w-md max-h-[90vh] overflow-y-auto">
                  <DialogHeader>
                    <DialogTitle>Новый источник дохода</DialogTitle>
                  </DialogHeader>
                  <Form {...form}>
                    <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
                      <FormField
                        control={form.control}
                        name="person"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>Человек</FormLabel>
                            <Select onValueChange={field.onChange} value={field.value}>
                              <FormControl>
                                <SelectTrigger>
                                  <SelectValue placeholder="Выберите человека" />
                                </SelectTrigger>
                              </FormControl>
                              <SelectContent>
                                <SelectItem value="me">Я</SelectItem>
                                <SelectItem value="girlfriend">Девушка</SelectItem>
                              </SelectContent>
                            </Select>
                            <FormMessage />
                          </FormItem>
                        )}
                      />

                      <FormField
                        control={form.control}
                        name="name"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>Название</FormLabel>
                            <FormControl>
                              <Input placeholder="Основная работа" {...field} />
                            </FormControl>
                            <FormMessage />
                          </FormItem>
                        )}
                      />

                      <FormField
                        control={form.control}
                        name="type"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>Тип</FormLabel>
                            <Select onValueChange={field.onChange} value={field.value}>
                              <FormControl>
                                <SelectTrigger>
                                  <SelectValue placeholder="Выберите тип" />
                                </SelectTrigger>
                              </FormControl>
                              <SelectContent>
                                <SelectItem value="main">Основная</SelectItem>
                                <SelectItem value="secondary">Подработка</SelectItem>
                              </SelectContent>
                            </Select>
                            <FormMessage />
                          </FormItem>
                        )}
                      />

                      <FormField
                        control={form.control}
                        name="expectedAmount"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>Ожидаемая сумма</FormLabel>
                            <FormControl>
                              <Input type="number" placeholder="50000" {...field} onChange={e => field.onChange(parseFloat(e.target.value))} />
                            </FormControl>
                            <FormMessage />
                          </FormItem>
                        )}
                      />

                      <FormField
                        control={form.control}
                        name="paymentDates"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>Даты выплат (через запятую)</FormLabel>
                            <FormControl>
                              <Input placeholder="5, 20" {...field} />
                            </FormControl>
                            <FormMessage />
                          </FormItem>
                        )}
                      />

                      <FormField
                        control={form.control}
                        name="color"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>Цвет</FormLabel>
                            <Select onValueChange={field.onChange} value={field.value}>
                              <FormControl>
                                <SelectTrigger>
                                  <SelectValue placeholder="Выберите цвет" />
                                </SelectTrigger>
                              </FormControl>
                              <SelectContent>
                                {colors.map(color => (
                                  <SelectItem key={color.value} value={color.value}>
                                    <div className="flex items-center gap-2">
                                      <div className="w-4 h-4 rounded-full" style={{ backgroundColor: color.value }} />
                                      <span>{color.label}</span>
                                    </div>
                                  </SelectItem>
                                ))}
                              </SelectContent>
                            </Select>
                            <FormMessage />
                          </FormItem>
                        )}
                      />

                      <Button type="submit" className="w-full">
                        Добавить
                      </Button>
                    </form>
                  </Form>
                </DialogContent>
              </Dialog>
            </motion.div>

            <div className="grid gap-6 md:grid-cols-2">
              <motion.div initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} transition={{ duration: 0.3, delay: 0.1 }}>
                <Card>
                  <CardHeader className="p-6">
                    <CardTitle>Мои источники дохода</CardTitle>
                  </CardHeader>
                  <CardContent className="p-6 pt-0 space-y-3">
                    {meIncome.length === 0 ? (
                      <p className="text-sm text-muted-foreground">Нет источников дохода</p>
                    ) : (
                      meIncome.map(source => (
                        <div key={source.id} className="p-4 rounded-lg border space-y-2">
                          <div className="flex items-center justify-between">
                            <div className="flex items-center gap-2">
                              <div className="w-2 h-2 rounded-full" style={{ backgroundColor: source.color }} />
                              <span className="font-medium">{source.name}</span>
                            </div>
                            <div className="flex items-center gap-2">
                              <Badge>{source.type === 'main' ? 'Основная' : 'Подработка'}</Badge>
                              <Button type="button" variant="ghost" size="icon" className="h-8 w-8" onClick={() => handleEdit(source)}>
                                <Edit className="h-4 w-4" />
                              </Button>
                              <Button
                                type="button"
                                variant="ghost"
                                size="icon"
                                className="h-8 w-8"
                                onClick={() => {
                                  setSelectedSource(source);
                                  setDeleteDialogOpen(true);
                                }}
                              >
                                <Trash2 className="h-4 w-4" />
                              </Button>
                            </div>
                          </div>
                          <div className="text-sm text-muted-foreground">Выплаты: {source.paymentDates.join(', ')} числа</div>
                          <div className="text-lg font-semibold">{formatCurrency(source.expectedAmount)}</div>
                        </div>
                      ))
                    )}
                  </CardContent>
                </Card>
              </motion.div>

              <motion.div initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} transition={{ duration: 0.3, delay: 0.2 }}>
                <Card>
                  <CardHeader className="p-6">
                    <CardTitle>Доходы девушки</CardTitle>
                  </CardHeader>
                  <CardContent className="p-6 pt-0 space-y-3">
                    {girlfriendIncome.length === 0 ? (
                      <p className="text-sm text-muted-foreground">Нет источников дохода</p>
                    ) : (
                      girlfriendIncome.map(source => (
                        <div key={source.id} className="p-4 rounded-lg border space-y-2">
                          <div className="flex items-center justify-between">
                            <div className="flex items-center gap-2">
                              <div className="w-2 h-2 rounded-full" style={{ backgroundColor: source.color }} />
                              <span className="font-medium">{source.name}</span>
                            </div>
                            <div className="flex items-center gap-2">
                              <Badge>{source.type === 'main' ? 'Основная' : 'Подработка'}</Badge>
                              <Button type="button" variant="ghost" size="icon" className="h-8 w-8" onClick={() => handleEdit(source)}>
                                <Edit className="h-4 w-4" />
                              </Button>
                              <Button
                                type="button"
                                variant="ghost"
                                size="icon"
                                className="h-8 w-8"
                                onClick={() => {
                                  setSelectedSource(source);
                                  setDeleteDialogOpen(true);
                                }}
                              >
                                <Trash2 className="h-4 w-4" />
                              </Button>
                            </div>
                          </div>
                          <div className="text-sm text-muted-foreground">Выплаты: {source.paymentDates.join(', ')} числа</div>
                          <div className="text-lg font-semibold">{formatCurrency(source.expectedAmount)}</div>
                        </div>
                      ))
                    )}
                  </CardContent>
                </Card>
              </motion.div>
            </div>

            <motion.div initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} transition={{ duration: 0.3, delay: 0.3 }}>
              <Card>
                <CardHeader className="p-6">
                  <CardTitle>Календарь выплат</CardTitle>
                </CardHeader>
                <CardContent className="p-6 pt-0 space-y-3">
                  {upcomingPayments.length === 0 ? (
                    <p className="text-sm text-muted-foreground">Нет запланированных выплат</p>
                  ) : (
                    upcomingPayments.map((payment, index) => (
                      <motion.div
                        key={index}
                        initial={{ opacity: 0, x: -20 }}
                        animate={{ opacity: 1, x: 0 }}
                        transition={{ duration: 0.3, delay: 0.05 * index }}
                        className="flex items-center justify-between p-4 rounded-lg border"
                      >
                        <div className="flex items-center gap-3">
                          <div className="w-10 h-10 rounded-full flex items-center justify-center" style={{ backgroundColor: `${payment.source.color}20` }}>
                            <Wallet className="h-5 w-5" style={{ color: payment.source.color }} />
                          </div>
                          <div>
                            <div className="font-medium">{payment.source.name}</div>
                            <div className="text-sm text-muted-foreground flex items-center gap-1">
                              <Calendar className="h-3 w-3" />
                              {format(payment.date, 'd MMMM yyyy', { locale: ru })}
                            </div>
                          </div>
                        </div>
                        <div className="text-right">
                          <div className="font-semibold">{formatCurrency(payment.source.expectedAmount)}</div>
                          <div className="text-xs text-muted-foreground">{payment.source.person === 'me' ? 'Я' : 'Девушка'}</div>
                        </div>
                      </motion.div>
                    ))
                  )}
                </CardContent>
              </Card>
            </motion.div>

            <Dialog open={editDialogOpen} onOpenChange={setEditDialogOpen}>
              <DialogContent className="max-w-md max-h-[90vh] overflow-y-auto">
                <DialogHeader>
                  <DialogTitle>Редактировать источник дохода</DialogTitle>
                </DialogHeader>
                <Form {...editForm}>
                  <form onSubmit={editForm.handleSubmit(onEdit)} className="space-y-4">
                    <FormField
                      control={editForm.control}
                      name="person"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>Человек</FormLabel>
                          <Select onValueChange={field.onChange} value={field.value}>
                            <FormControl>
                              <SelectTrigger>
                                <SelectValue placeholder="Выберите человека" />
                              </SelectTrigger>
                            </FormControl>
                            <SelectContent>
                              <SelectItem value="me">Я</SelectItem>
                              <SelectItem value="girlfriend">Девушка</SelectItem>
                            </SelectContent>
                          </Select>
                          <FormMessage />
                        </FormItem>
                      )}
                    />

                    <FormField
                      control={editForm.control}
                      name="name"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>Название</FormLabel>
                          <FormControl>
                            <Input placeholder="Основная работа" {...field} />
                          </FormControl>
                          <FormMessage />
                        </FormItem>
                      )}
                    />

                    <FormField
                      control={editForm.control}
                      name="type"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>Тип</FormLabel>
                          <Select onValueChange={field.onChange} value={field.value}>
                            <FormControl>
                              <SelectTrigger>
                                <SelectValue placeholder="Выберите тип" />
                              </SelectTrigger>
                            </FormControl>
                            <SelectContent>
                              <SelectItem value="main">Основная</SelectItem>
                              <SelectItem value="secondary">Подработка</SelectItem>
                            </SelectContent>
                          </Select>
                          <FormMessage />
                        </FormItem>
                      )}
                    />

                    <FormField
                      control={editForm.control}
                      name="expectedAmount"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>Ожидаемая сумма</FormLabel>
                          <FormControl>
                            <Input type="number" placeholder="50000" {...field} onChange={e => field.onChange(parseFloat(e.target.value))} />
                          </FormControl>
                          <FormMessage />
                        </FormItem>
                      )}
                    />

                    <FormField
                      control={editForm.control}
                      name="paymentDates"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>Даты выплат (через запятую)</FormLabel>
                          <FormControl>
                            <Input placeholder="5, 20" {...field} />
                          </FormControl>
                          <FormMessage />
                        </FormItem>
                      )}
                    />

                    <FormField
                      control={editForm.control}
                      name="color"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>Цвет</FormLabel>
                          <Select onValueChange={field.onChange} value={field.value}>
                            <FormControl>
                              <SelectTrigger>
                                <SelectValue placeholder="Выберите цвет" />
                              </SelectTrigger>
                            </FormControl>
                            <SelectContent>
                              {colors.map(color => (
                                <SelectItem key={color.value} value={color.value}>
                                  <div className="flex items-center gap-2">
                                    <div className="w-4 h-4 rounded-full" style={{ backgroundColor: color.value }} />
                                    <span>{color.label}</span>
                                  </div>
                                </SelectItem>
                              ))}
                            </SelectContent>
                          </Select>
                          <FormMessage />
                        </FormItem>
                      )}
                    />

                    <Button type="submit" className="w-full">
                      Сохранить
                    </Button>
                  </form>
                </Form>
              </DialogContent>
            </Dialog>

            <Dialog open={deleteDialogOpen} onOpenChange={setDeleteDialogOpen}>
              <DialogContent>
                <DialogHeader>
                  <DialogTitle>Удалить источник дохода?</DialogTitle>
                  <DialogDescription>Это действие нельзя отменить. Источник дохода будет удален навсегда.</DialogDescription>
                </DialogHeader>
                <div className="flex justify-end gap-2">
                  <Button type="button" variant="outline" onClick={() => setDeleteDialogOpen(false)}>
                    Отмена
                  </Button>
                  <Button type="button" variant="destructive" onClick={handleDelete}>
                    Удалить
                  </Button>
                </div>
              </DialogContent>
            </Dialog>
          </div>
        );
      };
    components/analytics/analytics-page.tsx: >
      import React, { useMemo } from 'react';

      import { Card, CardContent, CardHeader, CardTitle } from
      '@/components/ui/card';

      import { useAppContext } from '@/context/app-context';

      import { PieChart, Pie, Cell, ResponsiveContainer, Tooltip, LineChart,
      Line, XAxis, YAxis, CartesianGrid, Legend, BarChart, Bar } from
      'recharts';

      import { motion } from 'framer-motion';

      import { formatCurrency } from '@/utils/calculations';

      import { startOfMonth, endOfMonth, subMonths, format } from 'date-fns';

      import { ru } from 'date-fns/locale';


      export const AnalyticsPage: React.FC = () => {
        const { data } = useAppContext();

        const expensesByCategory = useMemo(() => {
          const today = new Date();
          const start = startOfMonth(today);
          const end = endOfMonth(today);

          const categoryTotals: Record<string, { value: number; color: string }> = {};

          data.transactions
            .filter(t => t.type === 'expense' && t.date >= start && t.date <= end)
            .forEach(t => {
              if (!categoryTotals[t.category]) {
                const cat = data.categories.find(c => c.name === t.category);
                categoryTotals[t.category] = { value: 0, color: cat?.color || '#6b7280' };
              }
              categoryTotals[t.category].value += t.amount;
            });

          return Object.entries(categoryTotals).map(([name, data]) => ({
            name,
            value: data.value,
            color: data.color,
          }));
        }, [data.transactions, data.categories]);

        const monthlyTrends = useMemo(() => {
          const months = [];
          for (let i = 5; i >= 0; i--) {
            const date = subMonths(new Date(), i);
            const start = startOfMonth(date);
            const end = endOfMonth(date);

            const income = data.transactions
              .filter(t => t.type === 'income' && t.date >= start && t.date <= end)
              .reduce((sum, t) => sum + t.amount, 0);

            const expenses = data.transactions
              .filter(t => t.type === 'expense' && t.date >= start && t.date <= end)
              .reduce((sum, t) => sum + t.amount, 0);

            months.push({
              month: format(date, 'MMM', { locale: ru }),
              income,
              expenses,
            });
          }
          return months;
        }, [data.transactions]);

        const budgetComparison = useMemo(() => {
          return data.categories.map(cat => {
            const today = new Date();
            const start = startOfMonth(today);
            const end = endOfMonth(today);

            const actual = data.transactions
              .filter(t => t.type === 'expense' && t.category === cat.name && t.date >= start && t.date <= end)
              .reduce((sum, t) => sum + t.amount, 0);

            return {
              name: cat.name,
              planned: cat.plannedAmount,
              actual,
              color: cat.color,
            };
          }).filter(c => c.planned > 0 || c.actual > 0);
        }, [data.categories, data.transactions]);

        return (
          <div className="p-4 lg:p-6 space-y-6 pb-20 lg:pb-6">
            <motion.div initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} transition={{ duration: 0.3 }}>
              <h1 className="text-3xl font-bold">Аналитика и отчеты</h1>
            </motion.div>

            <motion.div initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} transition={{ duration: 0.3, delay: 0.1 }}>
              <Card>
                <CardHeader className="p-6">
                  <CardTitle>Распределение расходов по категориям</CardTitle>
                </CardHeader>
                <CardContent className="p-6 pt-0">
                  {expensesByCategory.length > 0 ? (
                    <ResponsiveContainer width="100%" height={300}>
                      <PieChart>
                        <Pie data={expensesByCategory} cx="50%" cy="50%" labelLine={false} label={entry => entry.name} outerRadius={100} fill="#8884d8" dataKey="value">
                          {expensesByCategory.map((entry, index) => (
                            <Cell key={`cell-${index}`} fill={entry.color} />
                          ))}
                        </Pie>
                        <Tooltip formatter={(value: number) => formatCurrency(value)} />
                      </PieChart>
                    </ResponsiveContainer>
                  ) : (
                    <div className="h-[300px] flex items-center justify-center text-muted-foreground">Нет данных для отображения</div>
                  )}
                </CardContent>
              </Card>
            </motion.div>

            <motion.div initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} transition={{ duration: 0.3, delay: 0.2 }}>
              <Card>
                <CardHeader className="p-6">
                  <CardTitle>Динамика доходов и расходов</CardTitle>
                </CardHeader>
                <CardContent className="p-6 pt-0">
                  <ResponsiveContainer width="100%" height={300}>
                    <LineChart data={monthlyTrends}>
                      <CartesianGrid strokeDasharray="3 3" />
                      <XAxis dataKey="month" />
                      <YAxis />
                      <Tooltip formatter={(value: number) => formatCurrency(value)} />
                      <Legend />
                      <Line type="monotone" dataKey="income" stroke="#10b981" strokeWidth={2} name="Доходы" />
                      <Line type="monotone" dataKey="expenses" stroke="#ef4444" strokeWidth={2} name="Расходы" />
                    </LineChart>
                  </ResponsiveContainer>
                </CardContent>
              </Card>
            </motion.div>

            <motion.div initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} transition={{ duration: 0.3, delay: 0.3 }}>
              <Card>
                <CardHeader className="p-6">
                  <CardTitle>План vs Факт по категориям</CardTitle>
                </CardHeader>
                <CardContent className="p-6 pt-0">
                  {budgetComparison.length > 0 ? (
                    <ResponsiveContainer width="100%" height={300}>
                      <BarChart data={budgetComparison}>
                        <CartesianGrid strokeDasharray="3 3" />
                        <XAxis dataKey="name" />
                        <YAxis />
                        <Tooltip formatter={(value: number) => formatCurrency(value)} />
                        <Legend />
                        <Bar dataKey="planned" fill="#3b82f6" name="План" />
                        <Bar dataKey="actual" fill="#ef4444" name="Факт" />
                      </BarChart>
                    </ResponsiveContainer>
                  ) : (
                    <div className="h-[300px] flex items-center justify-center text-muted-foreground">Нет данных для отображения</div>
                  )}
                </CardContent>
              </Card>
            </motion.div>
          </div>
        );
      };
    components/ui/textarea.tsx: |+
      import * as React from "react"

      import { cn } from "@/lib/utils"

      const Textarea = React.forwardRef<
        HTMLTextAreaElement,
        React.ComponentProps<"textarea">
      >(({ className, ...props }, ref) => {
        return (
          <textarea
            className={cn(
              "flex min-h-[60px] w-full rounded-md border border-input bg-transparent px-3 py-2 text-base shadow-sm placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
              className
            )}
            ref={ref}
            {...props}
          />
        )
      })
      Textarea.displayName = "Textarea"

      export { Textarea }

    components/ui/form.tsx: >
      import * as React from 'react';

      import * as LabelPrimitive from '@radix-ui/react-label';

      import { Slot } from '@radix-ui/react-slot';

      import { Controller, ControllerProps, FieldPath, FieldValues,
      FormProvider, useFormContext } from 'react-hook-form';

      import { cn } from '@/lib/utils';

      import { Label } from '@/components/ui/label';


      const Form = FormProvider;


      type FormFieldContextValue<
        TFieldValues extends FieldValues = FieldValues,
        TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
      > = {
        name: TName;
      };


      const FormFieldContext = React.createContext<FormFieldContextValue>({} as
      FormFieldContextValue);


      const FormField = <
        TFieldValues extends FieldValues = FieldValues,
        TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
      >({
        ...props
      }: ControllerProps<TFieldValues, TName>) => {
        return (
          <FormFieldContext.Provider value={{ name: props.name }}>
            <Controller {...props} />
          </FormFieldContext.Provider>
        );
      };


      const useFormField = () => {
        const fieldContext = React.useContext(FormFieldContext);
        const itemContext = React.useContext(FormItemContext);
        const { getFieldState, formState } = useFormContext();

        const fieldState = getFieldState(fieldContext.name, formState);

        if (!fieldContext) {
          throw new Error('useFormField should be used within <FormField>');
        }

        const { id } = itemContext;

        return {
          id,
          name: fieldContext.name,
          formItemId: `${id}-form-item`,
          formDescriptionId: `${id}-form-item-description`,
          formMessageId: `${id}-form-item-message`,
          ...fieldState,
        };
      };


      type FormItemContextValue = {
        id: string;
      };


      const FormItemContext = React.createContext<FormItemContextValue>({} as
      FormItemContextValue);


      const FormItem = React.forwardRef<HTMLDivElement,
      React.HTMLAttributes<HTMLDivElement>>(({ className, ...props }, ref) => {
        const id = React.useId();

        return (
          <FormItemContext.Provider value={{ id }}>
            <div ref={ref} className={cn('space-y-2', className)} {...props} />
          </FormItemContext.Provider>
        );
      });

      FormItem.displayName = 'FormItem';


      const FormLabel = React.forwardRef<React.ElementRef<typeof
      LabelPrimitive.Root>, React.ComponentPropsWithoutRef<typeof
      LabelPrimitive.Root>>(({ className, ...props }, ref) => {
        const { error, formItemId } = useFormField();

        return <Label ref={ref} className={cn(error && 'text-destructive', className)} htmlFor={formItemId} {...props} />;
      });

      FormLabel.displayName = 'FormLabel';


      const FormControl = React.forwardRef<React.ElementRef<typeof Slot>,
      React.ComponentPropsWithoutRef<typeof Slot>>(({ ...props }, ref) => {
        const { error, formItemId, formDescriptionId, formMessageId } = useFormField();

        return <Slot ref={ref} id={formItemId} aria-describedby={!error ? `${formDescriptionId}` : `${formDescriptionId} ${formMessageId}`} aria-invalid={!!error} {...props} />;
      });

      FormControl.displayName = 'FormControl';


      const FormDescription = React.forwardRef<HTMLParagraphElement,
      React.HTMLAttributes<HTMLParagraphElement>>(({ className, ...props }, ref)
      => {
        const { formDescriptionId } = useFormField();

        return <p ref={ref} id={formDescriptionId} className={cn('text-[0.8rem] text-muted-foreground', className)} {...props} />;
      });

      FormDescription.displayName = 'FormDescription';


      const FormMessage = React.forwardRef<HTMLParagraphElement,
      React.HTMLAttributes<HTMLParagraphElement>>(({ className, children,
      ...props }, ref) => {
        const { error, formMessageId } = useFormField();
        const body = error ? String(error?.message) : children;

        if (!body) {
          return null;
        }

        return (
          <p ref={ref} id={formMessageId} className={cn('text-[0.8rem] font-medium text-destructive', className)} {...props}>
            {body}
          </p>
        );
      });

      FormMessage.displayName = 'FormMessage';


      export { useFormField, Form, FormItem, FormLabel, FormControl,
      FormDescription, FormMessage, FormField };
    components/transactions/transaction-form.tsx: >
      import React, { useState } from 'react';

      import { useForm } from 'react-hook-form';

      import { zodResolver } from '@hookform/resolvers/zod';

      import { z } from 'zod';

      import { format } from 'date-fns';

      import { ru } from 'date-fns/locale';

      import { Calendar as CalendarIcon, DollarSign, Plus } from 'lucide-react';

      import { Button } from '@/components/ui/button';

      import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage }
      from '@/components/ui/form';

      import { Input } from '@/components/ui/input';

      import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue }
      from '@/components/ui/select';

      import { Textarea } from '@/components/ui/textarea';

      import { Calendar } from '@/components/ui/calendar';

      import { Popover, PopoverContent, PopoverTrigger } from
      '@/components/ui/popover';

      import { Switch } from '@/components/ui/switch';

      import { useAppContext } from '@/context/app-context';

      import { cn } from '@/lib/utils';

      import * as Icons from 'lucide-react';


      const formSchema = z.object({
        type: z.enum(['income', 'expense']),
        category: z.string().min(1, 'Выберите категорию'),
        amount: z.number().min(0.01, 'Сумма должна быть больше 0'),
        date: z.date(),
        description: z.string().min(1, 'Введите описание'),
        source: z.string().optional(),
      });


      type FormData = z.infer<typeof formSchema>;


      interface TransactionFormProps {
        onSuccess?: () => void;
      }


      export const TransactionForm: React.FC<TransactionFormProps> = ({
      onSuccess }) => {
        const { data, addTransaction } = useAppContext();
        const [isIncome, setIsIncome] = useState(false);

        const form = useForm<FormData>({
          resolver: zodResolver(formSchema),
          defaultValues: {
            type: 'expense',
            category: '',
            amount: 0,
            date: new Date(),
            description: '',
            source: '',
          },
        });

        const onSubmit = (values: FormData) => {
          addTransaction({
            type: values.type,
            category: values.category,
            amount: values.amount,
            date: values.date,
            description: values.description,
            source: values.source,
          });

          form.reset();
          onSuccess?.();
        };

        const handleTypeChange = (checked: boolean) => {
          setIsIncome(checked);
          form.setValue('type', checked ? 'income' : 'expense');
        };

        const getIconComponent = (iconName: string) => {
          const Icon = (Icons as any)[iconName];
          return Icon ? <Icon className="h-4 w-4" /> : <DollarSign className="h-4 w-4" />;
        };

        const categories = isIncome
          ? [{ id: 'salary', name: 'Зарплата', icon: 'Briefcase', color: '#10b981' }]
          : data.categories;

        return (
          <Form {...form}>
            <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
              <FormItem>
                <FormLabel>Тип операции</FormLabel>
                <div className="flex items-center space-x-2">
                  <span className={cn('text-sm', !isIncome && 'font-semibold')}>Расход</span>
                  <Switch checked={isIncome} onCheckedChange={handleTypeChange} />
                  <span className={cn('text-sm', isIncome && 'font-semibold')}>Доход</span>
                </div>
              </FormItem>

              <FormField
                control={form.control}
                name="category"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Категория</FormLabel>
                    <Select onValueChange={field.onChange} value={field.value}>
                      <FormControl>
                        <SelectTrigger>
                          <SelectValue placeholder="Выберите категорию" />
                        </SelectTrigger>
                      </FormControl>
                      <SelectContent>
                        {categories.map(cat => (
                          <SelectItem key={cat.id} value={cat.name}>
                            <div className="flex items-center gap-2">
                              <div className="w-2 h-2 rounded-full" style={{ backgroundColor: cat.color }} />
                              {getIconComponent(cat.icon)}
                              <span>{cat.name}</span>
                            </div>
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                    <FormMessage />
                  </FormItem>
                )}
              />

              <FormField
                control={form.control}
                name="amount"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Сумма</FormLabel>
                    <FormControl>
                      <Input
                        type="number"
                        placeholder="0.00"
                        {...field}
                        onChange={e => field.onChange(parseFloat(e.target.value))}
                      />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />

              <FormField
                control={form.control}
                name="date"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Дата</FormLabel>
                    <Popover>
                      <PopoverTrigger asChild>
                        <FormControl>
                          <Button variant="outline" className={cn('w-full justify-start text-left font-normal', !field.value && 'text-muted-foreground')}>
                            <CalendarIcon className="mr-2 h-4 w-4" />
                            {field.value ? format(field.value, 'PPP', { locale: ru }) : <span>Выберите дату</span>}
                          </Button>
                        </FormControl>
                      </PopoverTrigger>
                      <PopoverContent className="w-auto p-0" align="start">
                        <Calendar mode="single" selected={field.value} onSelect={field.onChange} initialFocus />
                      </PopoverContent>
                    </Popover>
                    <FormMessage />
                  </FormItem>
                )}
              />

              <FormField
                control={form.control}
                name="description"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Описание</FormLabel>
                    <FormControl>
                      <Textarea placeholder="Введите описание операции..." {...field} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />

              {isIncome && (
                <FormField
                  control={form.control}
                  name="source"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Источник дохода</FormLabel>
                      <Select onValueChange={field.onChange} value={field.value}>
                        <FormControl>
                          <SelectTrigger>
                            <SelectValue placeholder="Выберите источник" />
                          </SelectTrigger>
                        </FormControl>
                        <SelectContent>
                          {data.incomeSources.map(source => (
                            <SelectItem key={source.id} value={source.name}>
                              <div className="flex items-center gap-2">
                                <div className="w-2 h-2 rounded-full" style={{ backgroundColor: source.color }} />
                                <span>{source.name}</span>
                              </div>
                            </SelectItem>
                          ))}
                        </SelectContent>
                      </Select>
                      <FormMessage />
                    </FormItem>
                  )}
                />
              )}

              <Button type="submit" className="w-full">
                <Plus className="mr-2 h-4 w-4" />
                Добавить транзакцию
              </Button>
            </form>
          </Form>
        );
      };
    components/transactions/transactions-table.tsx: >
      import React, { useState, useMemo } from 'react';

      import { format } from 'date-fns';

      import { ru } from 'date-fns/locale';

      import { ArrowUpDown, Edit, Trash2, Search } from 'lucide-react';

      import { Button } from '@/components/ui/button';

      import { Input } from '@/components/ui/input';

      import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow }
      from '@/components/ui/table';

      import { Badge } from '@/components/ui/badge';

      import { Dialog, DialogContent, DialogDescription, DialogHeader,
      DialogTitle, DialogTrigger } from '@/components/ui/dialog';

      import { useAppContext } from '@/context/app-context';

      import type { Transaction } from '@/types';

      import { formatCurrency } from '@/utils/calculations';

      import { motion, AnimatePresence } from 'framer-motion';

      import * as Icons from 'lucide-react';


      export const TransactionsTable: React.FC = () => {
        const { data, deleteTransaction } = useAppContext();
        const [search, setSearch] = useState('');
        const [sortField, setSortField] = useState<'date' | 'amount' | 'category'>('date');
        const [sortOrder, setSortOrder] = useState<'asc' | 'desc'>('desc');
        const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);
        const [transactionToDelete, setTransactionToDelete] = useState<string | null>(null);

        const filteredTransactions = useMemo(() => {
          let filtered = data.transactions.filter(t =>
            t.description.toLowerCase().includes(search.toLowerCase()) || t.category.toLowerCase().includes(search.toLowerCase())
          );

          filtered.sort((a, b) => {
            let comparison = 0;
            
            if (sortField === 'date') {
              comparison = a.date.getTime() - b.date.getTime();
            } else if (sortField === 'amount') {
              comparison = a.amount - b.amount;
            } else if (sortField === 'category') {
              comparison = a.category.localeCompare(b.category);
            }

            return sortOrder === 'asc' ? comparison : -comparison;
          });

          return filtered;
        }, [data.transactions, search, sortField, sortOrder]);

        const handleSort = (field: 'date' | 'amount' | 'category') => {
          if (sortField === field) {
            setSortOrder(sortOrder === 'asc' ? 'desc' : 'asc');
          } else {
            setSortField(field);
            setSortOrder('asc');
          }
        };

        const handleDelete = () => {
          if (transactionToDelete) {
            deleteTransaction(transactionToDelete);
            setDeleteDialogOpen(false);
            setTransactionToDelete(null);
          }
        };

        const getCategoryIcon = (categoryName: string) => {
          const category = data.categories.find(c => c.name === categoryName);
          if (category) {
            const Icon = (Icons as any)[category.icon];
            return Icon ? <Icon className="h-4 w-4" /> : null;
          }
          return null;
        };

        const getCategoryColor = (categoryName: string) => {
          const category = data.categories.find(c => c.name === categoryName);
          return category?.color || '#6b7280';
        };

        return (
          <div className="space-y-4">
            <div className="flex items-center gap-2">
              <div className="relative flex-1">
                <Search className="absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground" />
                <Input
                  placeholder="Поиск по описанию или категории..."
                  value={search}
                  onChange={e => setSearch(e.target.value)}
                  className="pl-10"
                />
              </div>
            </div>

            <div className="rounded-md border">
              <Table>
                <TableHeader>
                  <TableRow>
                    <TableHead>
                      <Button type="button" variant="ghost" onClick={() => handleSort('date')} className="flex items-center gap-1">
                        Дата
                        <ArrowUpDown className="h-4 w-4" />
                      </Button>
                    </TableHead>
                    <TableHead>
                      <Button type="button" variant="ghost" onClick={() => handleSort('category')} className="flex items-center gap-1">
                        Категория
                        <ArrowUpDown className="h-4 w-4" />
                      </Button>
                    </TableHead>
                    <TableHead>Описание</TableHead>
                    <TableHead className="text-right">
                      <Button type="button" variant="ghost" onClick={() => handleSort('amount')} className="flex items-center gap-1">
                        Сумма
                        <ArrowUpDown className="h-4 w-4" />
                      </Button>
                    </TableHead>
                    <TableHead className="text-right">Действия</TableHead>
                  </TableRow>
                </TableHeader>
                <TableBody>
                  <AnimatePresence>
                    {filteredTransactions.map(transaction => (
                      <motion.tr
                        key={transaction.id}
                        initial={{ opacity: 0, y: -10 }}
                        animate={{ opacity: 1, y: 0 }}
                        exit={{ opacity: 0, y: -10 }}
                        transition={{ duration: 0.2 }}
                        className="border-b"
                      >
                        <TableCell className="font-medium">{format(transaction.date, 'dd MMM yyyy', { locale: ru })}</TableCell>
                        <TableCell>
                          <div className="flex items-center gap-2">
                            <div className="w-2 h-2 rounded-full" style={{ backgroundColor: getCategoryColor(transaction.category) }} />
                            {getCategoryIcon(transaction.category)}
                            <span>{transaction.category}</span>
                          </div>
                        </TableCell>
                        <TableCell className="max-w-[200px] truncate">{transaction.description}</TableCell>
                        <TableCell className="text-right">
                          <Badge variant={transaction.type === 'income' ? 'default' : 'destructive'} className={transaction.type === 'income' ? 'bg-green-600' : ''}>
                            {transaction.type === 'income' ? '+' : '-'}
                            {formatCurrency(transaction.amount)}
                          </Badge>
                        </TableCell>
                        <TableCell className="text-right">
                          <Button
                            type="button"
                            variant="ghost"
                            size="icon"
                            onClick={() => {
                              setTransactionToDelete(transaction.id);
                              setDeleteDialogOpen(true);
                            }}
                          >
                            <Trash2 className="h-4 w-4" />
                          </Button>
                        </TableCell>
                      </motion.tr>
                    ))}
                  </AnimatePresence>
                </TableBody>
              </Table>

              {filteredTransactions.length === 0 && (
                <div className="p-8 text-center text-muted-foreground">Транзакции не найдены</div>
              )}
            </div>

            <Dialog open={deleteDialogOpen} onOpenChange={setDeleteDialogOpen}>
              <DialogContent>
                <DialogHeader>
                  <DialogTitle>Удалить транзакцию?</DialogTitle>
                  <DialogDescription>Это действие нельзя отменить. Транзакция будет удалена навсегда.</DialogDescription>
                </DialogHeader>
                <div className="flex justify-end gap-2">
                  <Button type="button" variant="outline" onClick={() => setDeleteDialogOpen(false)}>
                    Отмена
                  </Button>
                  <Button type="button" variant="destructive" onClick={handleDelete}>
                    Удалить
                  </Button>
                </div>
              </DialogContent>
            </Dialog>
          </div>
        );
      };
    components/ui/table.tsx: >
      import * as React from 'react';

      import { cn } from '@/lib/utils';


      const Table = React.forwardRef<HTMLTableElement,
      React.HTMLAttributes<HTMLTableElement>>(({ className, ...props }, ref) =>
      (
        <div className="relative w-full overflow-auto">
          <table ref={ref} className={cn('w-full caption-bottom text-sm', className)} {...props} />
        </div>
      ));

      Table.displayName = 'Table';


      const TableHeader = React.forwardRef<HTMLTableSectionElement,
      React.HTMLAttributes<HTMLTableSectionElement>>(({ className, ...props },
      ref) => (
        <thead ref={ref} className={cn('[&_tr]:border-b', className)} {...props} />
      ));

      TableHeader.displayName = 'TableHeader';


      const TableBody = React.forwardRef<HTMLTableSectionElement,
      React.HTMLAttributes<HTMLTableSectionElement>>(({ className, ...props },
      ref) => (
        <tbody ref={ref} className={cn('[&_tr:last-child]:border-0', className)} {...props} />
      ));

      TableBody.displayName = 'TableBody';


      const TableFooter = React.forwardRef<HTMLTableSectionElement,
      React.HTMLAttributes<HTMLTableSectionElement>>(({ className, ...props },
      ref) => (
        <tfoot ref={ref} className={cn('border-t bg-muted/50 font-medium [&>tr]:last:border-b-0', className)} {...props} />
      ));

      TableFooter.displayName = 'TableFooter';


      const TableRow = React.forwardRef<HTMLTableRowElement,
      React.HTMLAttributes<HTMLTableRowElement>>(({ className, ...props }, ref)
      => (
        <tr ref={ref} className={cn('border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted', className)} {...props} />
      ));

      TableRow.displayName = 'TableRow';


      const TableHead = React.forwardRef<HTMLTableCellElement,
      React.ThHTMLAttributes<HTMLTableCellElement>>(({ className, ...props },
      ref) => (
        <th ref={ref} className={cn('h-10 px-2 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]', className)} {...props} />
      ));

      TableHead.displayName = 'TableHead';


      const TableCell = React.forwardRef<HTMLTableCellElement,
      React.TdHTMLAttributes<HTMLTableCellElement>>(({ className, ...props },
      ref) => (
        <td ref={ref} className={cn('p-2 align-middle [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]', className)} {...props} />
      ));

      TableCell.displayName = 'TableCell';


      const TableCaption = React.forwardRef<HTMLTableCaptionElement,
      React.HTMLAttributes<HTMLTableCaptionElement>>(({ className, ...props },
      ref) => (
        <caption ref={ref} className={cn('mt-4 text-sm text-muted-foreground', className)} {...props} />
      ));

      TableCaption.displayName = 'TableCaption';


      export { Table, TableHeader, TableBody, TableFooter, TableHead, TableRow,
      TableCell, TableCaption };
  data: '{{ module.data }}'
  __UIBAKERY__RESPONSIVE__SHOW__CONDITION__CODE__:
    - xl
    - xs
  fileSystemCompiled: >
    <script src="assets/tailwind.js"></script>

    <link rel="stylesheet" href="assets/tailwind.css" />

    <style></style>


    <div class="root"></div>


    <script>
     window['UIB_MODULES_TO_LOAD_UIB_PROD_BUILD_COMPONENT_ID_MOCK.id']=["react", "react-dom", "react-dom/client", "react/jsx-dev-runtime", "react-hook-form", "lucide-react", "recharts", "framer-motion", "@radix-ui/react-toast", "date-fns", "class-variance-authority", "clsx", "date-fns/locale", "@radix-ui/react-slot", "tailwind-merge", "@radix-ui/react-icons", "@radix-ui/react-dialog", "@hookform/resolvers/zod", "zod", "@radix-ui/react-progress", "@radix-ui/react-select", "@radix-ui/react-popover", "react-day-picker", "@radix-ui/react-label", "@radix-ui/react-switch"];
    </script>

    <script id="UIB_script_UIB_PROD_BUILD_COMPONENT_ID_MOCK.id.js">(()=>{var
    va=Object.create;var Tt=Object.defineProperty;var
    ya=Object.getOwnPropertyDescriptor;var ha=Object.getOwnPropertyNames;var
    xa=Object.getPrototypeOf,ba=Object.prototype.hasOwnProperty;var s=(e=>typeof
    require<"u"?require:typeof Proxy<"u"?new Proxy(e,{get:(o,t)=>(typeof
    require<"u"?require:o)[t]}):e)(function(e){if(typeof require<"u")return
    require.apply(this,arguments);throw Error('Dynamic require of "'+e+'" is not
    supported')});var I=(e,o)=>()=>(e&&(o=e(e=0)),o);var Ca=(e,o)=>{for(var t in
    o)Tt(e,t,{get:o[t],enumerable:!0})},Do=(e,o,t,n)=>{if(o&&typeof
    o=="object"||typeof o=="function")for(let i of
    ha(o))!ba.call(e,i)&&i!==t&&Tt(e,i,{get:()=>o[i],enumerable:!(n=ya(o,i))||n.enumerable});return
    e};var
    D=(e,o,t)=>(t=e!=null?va(xa(e)):{},Do(o||!e||!e.__esModule?Tt(t,"default",{value:e,enumerable:!0}):t,e)),Na=e=>Do(Tt({},"__esModule",{value:!0}),e);var
    S,F,c=I(()=>{S=window.UB_CUSTOM_REACT_APP_BUS["UIB_PROD_BUILD_COMPONENT_ID_MOCK.id"].bus,F=S.customConsole});var
    qt,Ta,Pa,wa,Kt,Ao,Fo,Io=I(()=>{c();qt="family-budget-app",Ta="family-budget-app-backup",Pa=[{id:"1",name:"\u041F\u0440\u043E\u0434\u0443\u043A\u0442\u044B",color:"#10b981",icon:"ShoppingCart",plannedAmount:0,actualAmount:0,carryOver:0},{id:"2",name:"\u0422\u0440\u0430\u043D\u0441\u043F\u043E\u0440\u0442",color:"#3b82f6",icon:"Car",plannedAmount:0,actualAmount:0,carryOver:0},{id:"3",name:"\u0420\u0430\u0437\u0432\u043B\u0435\u0447\u0435\u043D\u0438\u044F",color:"#8b5cf6",icon:"Gamepad2",plannedAmount:0,actualAmount:0,carryOver:0},{id:"4",name:"\u041A\u043E\u043C\u043C\u0443\u043D\u0430\u043B\u044C\u043D\u044B\u0435
    \u0443\u0441\u043B\u0443\u0433\u0438",color:"#f59e0b",icon:"Lightbulb",plannedAmount:0,actualAmount:0,carryOver:0},{id:"5",name:"\u041E\u0434\u0435\u0436\u0434\u0430",color:"#ec4899",icon:"Shirt",plannedAmount:0,actualAmount:0,carryOver:0},{id:"6",name:"\u0417\u0434\u043E\u0440\u043E\u0432\u044C\u0435",color:"#ef4444",icon:"Heart",plannedAmount:0,actualAmount:0,carryOver:0},{id:"7",name:"\u041E\u0431\u0440\u0430\u0437\u043E\u0432\u0430\u043D\u0438\u0435",color:"#6366f1",icon:"BookOpen",plannedAmount:0,actualAmount:0,carryOver:0},{id:"8",name:"\u0414\u043E\u0441\u0443\u0433",color:"#14b8a6",icon:"Palette",plannedAmount:0,actualAmount:0,carryOver:0}],wa=[{id:"1",person:"me",name:"\u041E\u0441\u043D\u043E\u0432\u043D\u0430\u044F
    \u0440\u0430\u0431\u043E\u0442\u0430",expectedAmount:8e4,paymentDates:[5,20],color:"#3b82f6",type:"main",isActive:!0},{id:"2",person:"me",name:"\u041F\u043E\u0434\u0440\u0430\u0431\u043E\u0442\u043A\u0430",expectedAmount:3e4,paymentDates:[10,25],color:"#8b5cf6",type:"secondary",isActive:!0},{id:"3",person:"girlfriend",name:"\u041E\u0441\u043D\u043E\u0432\u043D\u0430\u044F
    \u0440\u0430\u0431\u043E\u0442\u0430",expectedAmount:7e4,paymentDates:[10],color:"#ec4899",type:"main",isActive:!0}],Kt=()=>({transactions:[],budgetPlans:[],incomeSources:wa,financialGoals:[],vacations:[],categories:Pa,settings:{theme:"system",currency:"\u20BD",language:"ru",notifications:{budget:!0,salary:!0,goals:!0}}}),Ao=()=>{try{let
    e=localStorage.getItem(qt);if(!e)return Kt();let o=JSON.parse(e);return
    o.transactions&&(o.transactions=o.transactions.map(t=>({...t,date:new
    Date(t.date),createdAt:new
    Date(t.createdAt)}))),o.financialGoals&&(o.financialGoals=o.financialGoals.map(t=>({...t,deadline:t.deadline?new
    Date(t.deadline):void 0,createdAt:new
    Date(t.createdAt)}))),o.vacations&&(o.vacations=o.vacations.map(t=>({...t,startDate:new
    Date(t.startDate),endDate:new
    Date(t.endDate)}))),o.budgetPlans&&(o.budgetPlans=o.budgetPlans.map(t=>({...t,createdAt:new
    Date(t.createdAt)}))),{...Kt(),...o}}catch(e){return F.error("Failed to load
    data from localStorage:",e),Kt()}},Fo=e=>{try{let
    o=localStorage.getItem(qt);o&&localStorage.setItem(Ta,o),localStorage.setItem(qt,JSON.stringify(e))}catch(o){F.error("Failed
    to save data to localStorage:",o)}}});var
    H,Mo,Lo,fe,je=I(()=>{c();H=D(s("react"));Io();Mo=(0,H.createContext)(void
    0),Lo=({children:e})=>{let[o,t]=(0,H.useState)(Ao),[n,i]=(0,H.useState)(null),m=(0,H.useCallback)(x=>{n&&clearTimeout(n);let
    h=setTimeout(()=>{Fo(x)},500);i(h)},[n]);(0,H.useEffect)(()=>{m(o)},[o,m]);let
    b=(0,H.useCallback)(x=>{t(h=>({...h,transactions:[...h.transactions,{...x,id:crypto.randomUUID(),createdAt:new
    Date}]}))},[]),C=(0,H.useCallback)((x,h)=>{t(E=>({...E,transactions:E.transactions.map(q=>q.id===x?{...q,...h}:q)}))},[]),f=(0,H.useCallback)(x=>{t(h=>({...h,transactions:h.transactions.filter(E=>E.id!==x)}))},[]),T=(0,H.useCallback)(x=>{t(h=>({...h,financialGoals:[...h.financialGoals,{...x,id:crypto.randomUUID(),createdAt:new
    Date,progress:x.currentAmount/x.targetAmount*100}]}))},[]),g=(0,H.useCallback)((x,h)=>{t(E=>({...E,financialGoals:E.financialGoals.map(q=>{if(q.id===x){let
    Qe={...q,...h};return
    Qe.progress=Qe.currentAmount/Qe.targetAmount*100,Qe}return
    q})}))},[]),v=(0,H.useCallback)(x=>{t(h=>({...h,financialGoals:h.financialGoals.filter(E=>E.id!==x)}))},[]),M=(0,H.useCallback)(x=>{t(h=>({...h,vacations:[...h.vacations,{...x,id:crypto.randomUUID()}]}))},[]),u=(0,H.useCallback)((x,h)=>{t(E=>({...E,vacations:E.vacations.map(q=>q.id===x?{...q,...h}:q)}))},[]),ee=(0,H.useCallback)(x=>{t(h=>({...h,vacations:h.vacations.filter(E=>E.id!==x)}))},[]),Ce=(0,H.useCallback)(x=>{t(h=>({...h,budgetPlans:[...h.budgetPlans,{...x,id:crypto.randomUUID(),createdAt:new
    Date}]}))},[]),Ve=(0,H.useCallback)((x,h)=>{t(E=>({...E,budgetPlans:E.budgetPlans.map(q=>q.id===x?{...q,...h}:q)}))},[]),_=(0,H.useCallback)(x=>{t(h=>({...h,budgetPlans:h.budgetPlans.filter(E=>E.id!==x)}))},[]),p=(0,H.useCallback)(x=>{t(h=>({...h,settings:{...h.settings,...x}}))},[]),G=(0,H.useCallback)(x=>{t(h=>({...h,categories:[...h.categories,{...x,id:crypto.randomUUID()}]}))},[]),ue=(0,H.useCallback)((x,h)=>{t(E=>({...E,categories:E.categories.map(q=>q.id===x?{...q,...h}:q)}))},[]),Je=(0,H.useCallback)(x=>{t(h=>({...h,categories:h.categories.filter(E=>E.id!==x)}))},[]),Ze=(0,H.useCallback)(x=>{t(h=>({...h,incomeSources:[...h.incomeSources,{...x,id:crypto.randomUUID()}]}))},[]),d=(0,H.useCallback)((x,h)=>{t(E=>({...E,incomeSources:E.incomeSources.map(q=>q.id===x?{...q,...h}:q)}))},[]),X=(0,H.useCallback)(x=>{t(h=>({...h,incomeSources:h.incomeSources.filter(E=>E.id!==x)}))},[]);return
    H.default.createElement(Mo.Provider,{value:{data:o,addTransaction:b,updateTransaction:C,deleteTransaction:f,addGoal:T,updateGoal:g,deleteGoal:v,addVacation:M,updateVacation:u,deleteVacation:ee,addBudgetPlan:Ce,updateBudgetPlan:Ve,deleteBudgetPlan:_,updateSettings:p,addCategory:G,updateCategory:ue,deleteCategory:Je,addIncomeSource:Ze,updateIncomeSource:d,deleteIncomeSource:X}},e)},fe=()=>{let
    e=(0,H.useContext)(Mo);if(!e)throw new Error("useAppContext must be used
    within AppProvider");return e}});var
    Se,Bo,Eo,ko,Yt=I(()=>{c();Se=D(s("react")),Bo=(0,Se.createContext)(void
    0),Eo=({children:e,defaultTheme:o="system"})=>{let[t,n]=(0,Se.useState)(()=>localStorage.getItem("theme")||o),[i,m]=(0,Se.useState)("light");return(0,Se.useEffect)(()=>{let
    b=window.document.documentElement;b.classList.remove("light","dark");let
    C="light";t==="system"?(C=window.matchMedia("(prefers-color-scheme:
    dark)").matches?"dark":"light",b.classList.add(C),m(C)):(b.classList.add(t),m(t)),localStorage.setItem("theme",t)},[t]),(0,Se.useEffect)(()=>{if(t==="system"){let
    b=window.matchMedia("(prefers-color-scheme: dark)"),C=f=>{let
    T=window.document.documentElement;T.classList.remove("light","dark");let
    g=f.matches?"dark":"light";T.classList.add(g),m(g)};return
    b.addEventListener("change",C),()=>b.removeEventListener("change",C)}},[t]),Se.default.createElement(Bo.Provider,{value:{theme:t,setTheme:n,actualTheme:i}},e)},ko=()=>{let
    e=(0,Se.useContext)(Bo);if(!e)throw new Error("useTheme must be used within
    ThemeProvider");return e}});function
    l(...e){return(0,Ho.twMerge)((0,Oo.clsx)(e))}var
    Oo,Ho,oe=I(()=>{c();Oo=s("clsx"),Ho=s("tailwind-merge")});var
    Pt,_o,Vo,wt,A,Ge=I(()=>{c();Pt=D(s("react")),_o=s("@radix-ui/react-slot"),Vo=s("class-variance-authority");oe();wt=(0,Vo.cva)("inline-flex
    items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm
    font-medium transition-colors focus-visible:outline-none
    focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none
    disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4
    [&_svg]:shrink-0",{variants:{variant:{default:"bg-primary
    text-primary-foreground shadow
    hover:bg-primary/90",destructive:"bg-destructive text-destructive-foreground
    shadow-sm hover:bg-destructive/90",outline:"border border-input
    bg-background shadow-sm hover:bg-accent
    hover:text-accent-foreground",secondary:"bg-secondary
    text-secondary-foreground shadow-sm
    hover:bg-secondary/80",ghost:"hover:bg-accent
    hover:text-accent-foreground",link:"text-primary underline-offset-4
    hover:underline"},size:{default:"h-9 px-4 py-2",sm:"h-8 rounded-md px-3
    text-xs",lg:"h-10 rounded-md px-8",icon:"h-9
    w-9"}},defaultVariants:{variant:"default",size:"default"}}),A=Pt.forwardRef(({className:e,variant:o,size:t,asChild:n=!1,...i},m)=>Pt.createElement(n?_o.Slot:"button",{className:l(wt({variant:o,size:t,className:e})),ref:m,...i}));A.displayName="Button"});var
    me,re,jo,Go,Wo,zo=I(()=>{c();me=D(s("react")),re=s("lucide-react");Ge();Yt();oe();jo=[{id:"dashboard",label:"\u0413\u043B\u0430\u0432\u043D\u0430\u044F",icon:re.LayoutDashboard},{id:"transactions",label:"\u0422\u0440\u0430\u043D\u0437\u0430\u043A\u0446\u0438\u0438",icon:re.Receipt},{id:"calendar",label:"\u041A\u0430\u043B\u0435\u043D\u0434\u0430\u0440\u044C",icon:re.Calendar},{id:"budget",label:"\u0411\u044E\u0434\u0436\u0435\u0442",icon:re.PiggyBank},{id:"goals",label:"\u0426\u0435\u043B\u0438",icon:re.Target},{id:"salary",label:"\u0417\u0430\u0440\u043F\u043B\u0430\u0442\u044B",icon:re.Briefcase},{id:"analytics",label:"\u0410\u043D\u0430\u043B\u0438\u0442\u0438\u043A\u0430",icon:re.BarChart3}],Go=({currentPage:e,onNavigate:o})=>{let{theme:t,setTheme:n}=ko(),i=()=>{n(t==="dark"?"light":t==="light"?"system":"dark")};return
    me.default.createElement("aside",{className:"hidden lg:flex lg:flex-col
    lg:w-64 lg:fixed lg:inset-y-0 bg-card
    border-r"},me.default.createElement("div",{className:"flex items-center
    justify-between p-6
    border-b"},me.default.createElement("h1",{className:"text-xl
    font-bold"},"\u0421\u0435\u043C\u0435\u0439\u043D\u044B\u0439
    \u0431\u044E\u0434\u0436\u0435\u0442")),me.default.createElement("nav",{className:"flex-1
    p-4 space-y-1 overflow-y-auto"},jo.map(m=>{let b=m.icon;return
    me.default.createElement(A,{key:m.id,variant:e===m.id?"secondary":"ghost",className:"w-full
    justify-start",onClick:()=>o(m.id)},me.default.createElement(b,{className:"mr-3
    h-4 w-4"}),m.label)})),me.default.createElement("div",{className:"p-4
    border-t
    space-y-1"},me.default.createElement(A,{variant:"ghost",className:"w-full
    justify-start",onClick:i},t==="dark"?me.default.createElement(re.Sun,{className:"mr-3
    h-4 w-4"}):me.default.createElement(re.Moon,{className:"mr-3 h-4
    w-4"}),"\u0422\u0435\u043C\u0430:
    ",t==="dark"?"\u0422\u0435\u043C\u043D\u0430\u044F":t==="light"?"\u0421\u0432\u0435\u0442\u043B\u0430\u044F":"\u0421\u0438\u0441\u0442\u0435\u043C\u043D\u0430\u044F"),me.default.createElement(A,{variant:"ghost",className:"w-full
    justify-start",onClick:()=>o("settings")},me.default.createElement(re.Settings,{className:"mr-3
    h-4
    w-4"}),"\u041D\u0430\u0441\u0442\u0440\u043E\u0439\u043A\u0438")))},Wo=({currentPage:e,onNavigate:o})=>{let
    t=jo.slice(0,5);return me.default.createElement("nav",{className:"lg:hidden
    fixed bottom-0 inset-x-0 bg-card
    border-t"},me.default.createElement("div",{className:"flex items-center
    justify-around p-2"},t.map(n=>{let i=n.icon;return
    me.default.createElement(A,{key:n.id,variant:e===n.id?"secondary":"ghost",size:"sm",className:l("flex
    flex-col gap-1 h-auto py-2 px-3",e===n.id&&"bg-primary
    text-primary-foreground"),onClick:()=>o(n.id)},me.default.createElement(i,{className:"h-5
    w-5"}),me.default.createElement("span",{className:"text-xs"},n.label))})))}});var
    Ne,Uo,Jt,Zt,Qt,$o,Ko,Xt,qo,Yo,Jo,k,Rt,ke=I(()=>{c();Ne=s("date-fns"),Uo=e=>e.reduce((o,t)=>t.type==="income"?o+t.amount:o-t.amount,0),Jt=(e,o=new
    Date)=>{let t=(0,Ne.startOfMonth)(o),n=(0,Ne.endOfMonth)(o);return
    e.filter(i=>i.type==="income"&&i.date>=t&&i.date<=n).reduce((i,m)=>i+m.amount,0)},Zt=(e,o=new
    Date)=>{let t=(0,Ne.startOfMonth)(o),n=(0,Ne.endOfMonth)(o);return
    e.filter(i=>i.type==="expense"&&i.date>=t&&i.date<=n).reduce((i,m)=>i+m.amount,0)},Qt=(e,o)=>o===0?e>0?100:0:(e-o)/o*100,$o=(e,o=new
    Date)=>{let t=(0,Ne.subMonths)(o,1);return Jt(e,t)},Ko=(e,o=new Date)=>{let
    t=(0,Ne.subMonths)(o,1);return Zt(e,t)},Xt=(e,o,t=new Date)=>{let
    n=(0,Ne.startOfMonth)(t),i=(0,Ne.endOfMonth)(t);return
    e.filter(m=>m.type==="expense"&&m.category===o&&m.date>=n&&m.date<=i).reduce((m,b)=>m+b.amount,0)},qo=(e,o=3)=>e.filter(t=>t.progress<100).sort((t,n)=>{let
    i={high:3,medium:2,low:1},m=i[n.priority]-i[t.priority];return
    m!==0?m:t.deadline&&n.deadline?t.deadline.getTime()-n.deadline.getTime():n.progress-t.progress}).slice(0,o),Yo=e=>{if(!e.deadline)return
    0;let
    o=e.targetAmount-e.currentAmount,t=(0,Ne.differenceInDays)(e.deadline,new
    Date),n=Math.max(1,Math.ceil(t/30));return o/n},Jo=(e,o,t=new
    Date)=>e.map(n=>{let
    i=Xt(o,n.name,t);return{...n,actualAmount:i}}).filter(n=>n.actualAmount>n.plannedAmount),k=(e,o="\u20BD")=>`${e.toLocaleString("ru-RU",{minimumFractionDigits:0,maximumFractionDigits:0})}
    ${o}`,Rt=e=>`${e>0?"+":""}${e.toFixed(1)}%`});var
    he,V,W,z,Sa,j,Da,De=I(()=>{c();he=D(s("react"));oe();V=he.forwardRef(({className:e,...o},t)=>he.createElement("div",{ref:t,className:l("rounded-lg
    border bg-card text-card-foreground
    shadow-sm",e),...o}));V.displayName="Card";W=he.forwardRef(({className:e,...o},t)=>he.createElement("div",{ref:t,className:l("flex
    flex-col space-y-1.5
    p-6",e),...o}));W.displayName="CardHeader";z=he.forwardRef(({className:e,...o},t)=>he.createElement("h3",{ref:t,className:l("text-2xl
    font-semibold leading-none
    tracking-tight",e),...o}));z.displayName="CardTitle";Sa=he.forwardRef(({className:e,...o},t)=>he.createElement("p",{ref:t,className:l("text-sm
    text-muted-foreground",e),...o}));Sa.displayName="CardDescription";j=he.forwardRef(({className:e,...o},t)=>he.createElement("div",{ref:t,className:l("p-6
    pt-0",e),...o}));j.displayName="CardContent";Da=he.forwardRef(({className:e,...o},t)=>he.createElement("div",{ref:t,className:l("flex
    items-center p-6 pt-0",e),...o}));Da.displayName="CardFooter"});var
    te,rt,Zo,Qo,Xo=I(()=>{c();te=D(s("react"));De();rt=s("lucide-react");ke();Zo=s("framer-motion"),Qo=({balance:e,income:o,expenses:t,incomeChange:n,expensesChange:i})=>te.default.createElement(Zo.motion.div,{initial:{opacity:0,y:20},animate:{opacity:1,y:0},transition:{duration:.3}},te.default.createElement(V,null,te.default.createElement(W,{className:"p-6"},te.default.createElement(z,{className:"text-sm
    font-medium
    text-muted-foreground"},"\u0422\u0435\u043A\u0443\u0449\u0438\u0439
    \u0431\u0430\u043B\u0430\u043D\u0441")),te.default.createElement(j,{className:"p-6
    pt-0"},te.default.createElement("div",{className:"text-4xl font-bold
    mb-6"},k(e)),te.default.createElement("div",{className:"grid grid-cols-2
    gap-4"},te.default.createElement("div",null,te.default.createElement("div",{className:"text-xs
    text-muted-foreground mb-1"},"\u0414\u043E\u0445\u043E\u0434\u044B
    \u0437\u0430
    \u043C\u0435\u0441\u044F\u0446"),te.default.createElement("div",{className:"text-xl
    font-semibold
    text-green-600"},k(o)),te.default.createElement("div",{className:"flex
    items-center gap-1
    mt-1"},n>=0?te.default.createElement(rt.TrendingUp,{className:"h-3 w-3
    text-green-600"}):te.default.createElement(rt.TrendingDown,{className:"h-3
    w-3 text-red-600"}),te.default.createElement("span",{className:`text-xs
    ${n>=0?"text-green-600":"text-red-600"}`},Rt(n)))),te.default.createElement("div",null,te.default.createElement("div",{className:"text-xs
    text-muted-foreground mb-1"},"\u0420\u0430\u0441\u0445\u043E\u0434\u044B
    \u0437\u0430
    \u043C\u0435\u0441\u044F\u0446"),te.default.createElement("div",{className:"text-xl
    font-semibold
    text-red-600"},k(t)),te.default.createElement("div",{className:"flex
    items-center gap-1
    mt-1"},i>=0?te.default.createElement(rt.TrendingUp,{className:"h-3 w-3
    text-red-600"}):te.default.createElement(rt.TrendingDown,{className:"h-3 w-3
    text-green-600"}),te.default.createElement("span",{className:`text-xs
    ${i>=0?"text-red-600":"text-green-600"}`},Rt(Math.abs(i)))))))))});var
    dt,ct,Xe,St=I(()=>{c();dt=D(s("react")),ct=D(s("@radix-ui/react-progress"));oe();Xe=dt.forwardRef(({className:e,value:o,...t},n)=>dt.createElement(ct.Root,{ref:n,className:l("relative
    h-2 w-full overflow-hidden rounded-full
    bg-primary/20",e),...t},dt.createElement(ct.Indicator,{className:"h-full
    w-full flex-1 bg-primary
    transition-all",style:{transform:`translateX(-${100-(o||0)}%)`}})));Xe.displayName=ct.Root.displayName});var
    ge,Ro,eo,er,tr=I(()=>{c();ge=D(s("react"));De();St();Ro=s("lucide-react");ke();eo=s("framer-motion"),er=({goals:e,onGoalClick:o})=>ge.default.createElement(eo.motion.div,{initial:{opacity:0,y:20},animate:{opacity:1,y:0},transition:{duration:.3,delay:.1}},ge.default.createElement(V,{className:"cursor-pointer
    hover:shadow-lg
    transition-shadow",onClick:o},ge.default.createElement(W,{className:"flex
    flex-row items-center justify-between
    p-6"},ge.default.createElement(z,{className:"text-sm
    font-medium"},"\u0410\u043A\u0442\u0438\u0432\u043D\u044B\u0435
    \u0446\u0435\u043B\u0438"),ge.default.createElement(Ro.Target,{className:"h-4
    w-4 text-muted-foreground"})),ge.default.createElement(j,{className:"p-6
    pt-0
    space-y-4"},e.length===0?ge.default.createElement("p",{className:"text-sm
    text-muted-foreground"},"\u041D\u0435\u0442
    \u0430\u043A\u0442\u0438\u0432\u043D\u044B\u0445
    \u0446\u0435\u043B\u0435\u0439"):e.map((t,n)=>ge.default.createElement(eo.motion.div,{key:t.id,initial:{opacity:0,x:-20},animate:{opacity:1,x:0},transition:{duration:.3,delay:.1*n},className:"space-y-2"},ge.default.createElement("div",{className:"flex
    items-center justify-between
    text-sm"},ge.default.createElement("span",{className:"font-medium"},t.name),ge.default.createElement("span",{className:"text-muted-foreground"},t.progress.toFixed(0),"%")),ge.default.createElement(Xe,{value:t.progress,className:"h-2"}),ge.default.createElement("div",{className:"flex
    items-center justify-between text-xs
    text-muted-foreground"},ge.default.createElement("span",null,k(t.currentAmount)),ge.default.createElement("span",null,k(t.targetAmount))))))))});var
    ve,Dt,At,or,to,rr,ar=I(()=>{c();ve=D(s("react"));De();Dt=s("lucide-react");ke();At=s("date-fns"),or=s("date-fns/locale"),to=s("framer-motion"),rr=({incomeSources:e,onSalaryClick:o})=>{let
    n=(()=>{let i=new Date,m=i.getDate(),b=[];return
    e.forEach(C=>{C.isActive&&C.paymentDates.forEach(f=>{let T;if(f>=m)T=new
    Date(i.getFullYear(),i.getMonth(),f);else{let g=(0,At.addMonths)(i,1);T=new
    Date(g.getFullYear(),g.getMonth(),f)}b.push({date:T,source:C})})}),b.sort((C,f)=>C.date.getTime()-f.date.getTime()).slice(0,2)})();return
    ve.default.createElement(to.motion.div,{initial:{opacity:0,y:20},animate:{opacity:1,y:0},transition:{duration:.3,delay:.2}},ve.default.createElement(V,{className:"cursor-pointer
    hover:shadow-lg
    transition-shadow",onClick:o},ve.default.createElement(W,{className:"flex
    flex-row items-center justify-between
    p-6"},ve.default.createElement(z,{className:"text-sm
    font-medium"},"\u0411\u043B\u0438\u0436\u0430\u0439\u0448\u0438\u0435
    \u0437\u0430\u0440\u043F\u043B\u0430\u0442\u044B"),ve.default.createElement(Dt.Wallet,{className:"h-4
    w-4 text-muted-foreground"})),ve.default.createElement(j,{className:"p-6
    pt-0
    space-y-3"},n.length===0?ve.default.createElement("p",{className:"text-sm
    text-muted-foreground"},"\u041D\u0435\u0442
    \u0437\u0430\u043F\u043B\u0430\u043D\u0438\u0440\u043E\u0432\u0430\u043D\u043D\u044B\u0445
    \u0432\u044B\u043F\u043B\u0430\u0442"):n.map((i,m)=>ve.default.createElement(to.motion.div,{key:m,initial:{opacity:0,x:-20},animate:{opacity:1,x:0},transition:{duration:.3,delay:.1*m},className:"flex
    items-center justify-between p-3 rounded-lg
    border"},ve.default.createElement("div",{className:"flex items-center
    gap-3"},ve.default.createElement("div",{className:"w-2 h-2
    rounded-full",style:{backgroundColor:i.source.color}}),ve.default.createElement("div",null,ve.default.createElement("div",{className:"text-sm
    font-medium"},i.source.name),ve.default.createElement("div",{className:"text-xs
    text-muted-foreground flex items-center
    gap-1"},ve.default.createElement(Dt.Calendar,{className:"h-3
    w-3"}),(0,At.format)(i.date,"d
    MMMM",{locale:or.ru})))),ve.default.createElement("div",{className:"text-sm
    font-semibold"},k(i.source.expectedAmount)))))))}});var
    Ae,nr,oo,ir,sr=I(()=>{c();Ae=D(s("react"));De();nr=s("lucide-react");ke();oo=s("framer-motion"),ir=({overages:e,onBudgetClick:o})=>Ae.default.createElement(oo.motion.div,{initial:{opacity:0,y:20},animate:{opacity:1,y:0},transition:{duration:.3,delay:.3}},Ae.default.createElement(V,{className:"cursor-pointer
    hover:shadow-lg
    transition-shadow",onClick:o},Ae.default.createElement(W,{className:"flex
    flex-row items-center justify-between
    p-6"},Ae.default.createElement(z,{className:"text-sm
    font-medium"},"\u041F\u0440\u0435\u0432\u044B\u0448\u0435\u043D\u0438\u044F
    \u0431\u044E\u0434\u0436\u0435\u0442\u0430"),Ae.default.createElement(nr.AlertTriangle,{className:"h-4
    w-4 text-orange-500"})),Ae.default.createElement(j,{className:"p-6
    pt-0"},e.length===0?Ae.default.createElement("p",{className:"text-sm
    text-green-600"},"\u0412\u0441\u0435 \u0432
    \u043F\u0440\u0435\u0434\u0435\u043B\u0430\u0445
    \u0431\u044E\u0434\u0436\u0435\u0442\u0430!"):Ae.default.createElement("div",{className:"space-y-2"},e.map((t,n)=>{let
    i=t.actualAmount-t.plannedAmount,m=(i/t.plannedAmount*100).toFixed(0);return
    Ae.default.createElement(oo.motion.div,{key:t.id,initial:{opacity:0,x:-20},animate:{opacity:1,x:0},transition:{duration:.3,delay:.1*n},className:"flex
    items-center justify-between p-2 rounded bg-red-50
    dark:bg-red-950"},Ae.default.createElement("span",{className:"text-sm
    font-medium"},t.name),Ae.default.createElement("span",{className:"text-sm
    text-red-600"},"+",k(i)," (",m,"%)"))})))))});var
    Oe,lr,He,mr,dr,cr,pr=I(()=>{c();Oe=D(s("react"));De();lr=s("lucide-react"),He=s("date-fns"),mr=s("date-fns/locale");oe();dr=s("framer-motion"),cr=({onCalendarClick:e})=>{let
    o=new
    Date,t=(0,He.startOfMonth)(o),n=(0,He.endOfMonth)(o),i=(0,He.eachDayOfInterval)({start:t,end:n}),m=t.getDay(),b=Array.from({length:m===0?6:m-1});return
    Oe.default.createElement(dr.motion.div,{initial:{opacity:0,y:20},animate:{opacity:1,y:0},transition:{duration:.3,delay:.4}},Oe.default.createElement(V,{className:"cursor-pointer
    hover:shadow-lg
    transition-shadow",onClick:e},Oe.default.createElement(W,{className:"flex
    flex-row items-center justify-between
    p-6"},Oe.default.createElement(z,{className:"text-sm
    font-medium"},(0,He.format)(o,"LLLL
    yyyy",{locale:mr.ru})),Oe.default.createElement(lr.Calendar,{className:"h-4
    w-4 text-muted-foreground"})),Oe.default.createElement(j,{className:"p-6
    pt-0"},Oe.default.createElement("div",{className:"grid grid-cols-7 gap-1
    text-center
    text-xs"},["\u041F\u043D","\u0412\u0442","\u0421\u0440","\u0427\u0442","\u041F\u0442","\u0421\u0431","\u0412\u0441"].map(C=>Oe.default.createElement("div",{key:C,className:"font-medium
    text-muted-foreground
    py-1"},C)),b.map((C,f)=>Oe.default.createElement("div",{key:`empty-${f}`})),i.map(C=>Oe.default.createElement("div",{key:C.toString(),className:l("aspect-square
    flex items-center justify-center rounded-md hover:bg-accent
    transition-colors",(0,He.isToday)(C)&&"bg-primary text-primary-foreground
    font-semibold")},(0,He.format)(C,"d")))))))}});var
    Fe,ro,ur=I(()=>{c();Fe=D(s("react"));je();ke();Xo();tr();ar();sr();pr();ro=({onNavigate:e})=>{let{data:o}=fe(),t=Uo(o.transactions),n=Jt(o.transactions),i=Zt(o.transactions),m=$o(o.transactions),b=Ko(o.transactions),C=Qt(n,m),f=Qt(i,b),T=qo(o.financialGoals,3),g=Jo(o.categories,o.transactions);return
    Fe.default.createElement("div",{className:"p-4 lg:p-6 space-y-6 pb-20
    lg:pb-6"},Fe.default.createElement("div",{className:"flex items-center
    justify-between"},Fe.default.createElement("h1",{className:"text-3xl
    font-bold"},"\u0413\u043B\u0430\u0432\u043D\u0430\u044F")),Fe.default.createElement("div",{className:"grid
    gap-6 md:grid-cols-2
    lg:grid-cols-3"},Fe.default.createElement("div",{className:"md:col-span-2
    lg:col-span-3"},Fe.default.createElement(Qo,{balance:t,income:n,expenses:i,incomeChange:C,expensesChange:f})),Fe.default.createElement(er,{goals:T,onGoalClick:()=>e("goals")}),Fe.default.createElement(rr,{incomeSources:o.incomeSources,onSalaryClick:()=>e("salary")}),Fe.default.createElement(ir,{overages:g,onBudgetClick:()=>e("budget")}),Fe.default.createElement("div",{className:"md:col-span-2
    lg:col-span-1"},Fe.default.createElement(cr,{onCalendarClick:()=>e("calendar")}))))}});var
    ce,ae,fr,_e,at,Aa,gr,Ie,Me,Fa,Le,pt,ut=I(()=>{"use
    client";c();ce=D(s("react")),ae=D(s("@radix-ui/react-dialog"));oe();fr=s("@radix-ui/react-icons"),_e=ae.Root,at=ae.Trigger,Aa=ae.Portal,gr=ce.forwardRef(({className:e,...o},t)=>ce.createElement(ae.Overlay,{ref:t,className:l("fixed
    inset-0 z-50 bg-black/80  data-[state=open]:animate-in
    data-[state=closed]:animate-out data-[state=closed]:fade-out-0
    data-[state=open]:fade-in-0",e),...o}));gr.displayName=ae.Overlay.displayName;Ie=ce.forwardRef(({className:e,children:o,...t},n)=>ce.createElement(Aa,null,ce.createElement(gr,null),ce.createElement(ae.Content,{ref:n,className:l("fixed
    left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%]
    translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200
    data-[state=open]:animate-in data-[state=closed]:animate-out
    data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0
    data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95
    data-[state=closed]:slide-out-to-left-1/2
    data-[state=closed]:slide-out-to-top-[48%]
    data-[state=open]:slide-in-from-left-1/2
    data-[state=open]:slide-in-from-top-[48%]
    sm:rounded-lg",e),...t},o,ce.createElement(ae.Close,{className:"absolute
    right-4 top-4 rounded-sm opacity-70 ring-offset-background
    transition-opacity hover:opacity-100 focus:outline-none focus:ring-2
    focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none
    data-[state=open]:bg-accent
    data-[state=open]:text-muted-foreground"},ce.createElement(fr.Cross2Icon,{className:"h-4
    w-4"}),ce.createElement("span",{className:"sr-only"},"Close")))));Ie.displayName=ae.Content.displayName;Me=({className:e,...o})=>ce.createElement("div",{className:l("flex
    flex-col space-y-1.5 text-center
    sm:text-left",e),...o});Me.displayName="DialogHeader";Fa=({className:e,...o})=>ce.createElement("div",{className:l("flex
    flex-col-reverse sm:flex-row sm:justify-end
    sm:space-x-2",e),...o});Fa.displayName="DialogFooter";Le=ce.forwardRef(({className:e,...o},t)=>ce.createElement(ae.Title,{ref:t,className:l("text-lg
    font-semibold leading-none
    tracking-tight",e),...o}));Le.displayName=ae.Title.displayName;pt=ce.forwardRef(({className:e,...o},t)=>ce.createElement(ae.Description,{ref:t,className:l("text-sm
    text-muted-foreground",e),...o}));pt.displayName=ae.Description.displayName});var
    Ft,ao,vr,Ia,no,yr=I(()=>{c();Ft=D(s("react")),ao=D(s("@radix-ui/react-label")),vr=s("class-variance-authority");oe();Ia=(0,vr.cva)("text-sm
    font-medium leading-none peer-disabled:cursor-not-allowed
    peer-disabled:opacity-70"),no=Ft.forwardRef(({className:e,...o},t)=>Ft.createElement(ao.Root,{ref:t,className:l(Ia(),e),...o}));no.displayName=ao.Root.displayName});var
    R,hr,nt,Re,xr,Z,It,br,U,$,Y,Ma,J,Mt=I(()=>{c();R=D(s("react")),hr=s("@radix-ui/react-slot"),nt=s("react-hook-form");oe();yr();Re=nt.FormProvider,xr=R.createContext({}),Z=({...e})=>R.createElement(xr.Provider,{value:{name:e.name}},R.createElement(nt.Controller,{...e})),It=()=>{let
    e=R.useContext(xr),o=R.useContext(br),{getFieldState:t,formState:n}=(0,nt.useFormContext)(),i=t(e.name,n);if(!e)throw
    new Error("useFormField should be used within
    <FormField>");let{id:m}=o;return{id:m,name:e.name,formItemId:`${m}-form-item`,formDescriptionId:`${m}-form-item-description`,formMessageId:`${m}-form-item-message`,...i}},br=R.createContext({}),U=R.forwardRef(({className:e,...o},t)=>{let
    n=R.useId();return
    R.createElement(br.Provider,{value:{id:n}},R.createElement("div",{ref:t,className:l("space-y-2",e),...o}))});U.displayName="FormItem";$=R.forwardRef(({className:e,...o},t)=>{let{error:n,formItemId:i}=It();return
    R.createElement(no,{ref:t,className:l(n&&"text-destructive",e),htmlFor:i,...o})});$.displayName="FormLabel";Y=R.forwardRef(({...e},o)=>{let{error:t,formItemId:n,formDescriptionId:i,formMessageId:m}=It();return
    R.createElement(hr.Slot,{ref:o,id:n,"aria-describedby":t?`${i}
    ${m}`:`${i}`,"aria-invalid":!!t,...e})});Y.displayName="FormControl";Ma=R.forwardRef(({className:e,...o},t)=>{let{formDescriptionId:n}=It();return
    R.createElement("p",{ref:t,id:n,className:l("text-[0.8rem]
    text-muted-foreground",e),...o})});Ma.displayName="FormDescription";J=R.forwardRef(({className:e,children:o,...t},n)=>{let{error:i,formMessageId:m}=It(),b=i?String(i?.message):o;return
    b?R.createElement("p",{ref:n,id:m,className:l("text-[0.8rem] font-medium
    text-destructive",e),...t},b):null});J.displayName="FormMessage"});var
    Lt,se,it=I(()=>{c();Lt=D(s("react"));oe();se=Lt.forwardRef(({className:e,type:o,...t},n)=>Lt.createElement("input",{type:o,className:l("flex
    h-9 w-full rounded-md border border-input bg-transparent px-3 py-1 text-base
    shadow-sm transition-colors file:border-0 file:bg-transparent file:text-sm
    file:font-medium file:text-foreground placeholder:text-muted-foreground
    focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring
    disabled:cursor-not-allowed disabled:opacity-50
    md:text-sm",e),ref:n,...t}));se.displayName="Input"});var
    K,L,et,Te,Pe,xe,Cr,Nr,be,La,Q,Ba,Bt=I(()=>{"use
    client";c();K=D(s("react")),L=D(s("@radix-ui/react-select"));oe();et=s("@radix-ui/react-icons"),Te=L.Root,Pe=L.Value,xe=K.forwardRef(({className:e,children:o,...t},n)=>K.createElement(L.Trigger,{ref:n,className:l("flex
    h-9 w-full items-center justify-between whitespace-nowrap rounded-md border
    border-input bg-transparent px-3 py-2 text-sm shadow-sm
    ring-offset-background data-[placeholder]:text-muted-foreground
    focus:outline-none focus:ring-1 focus:ring-ring disabled:cursor-not-allowed
    disabled:opacity-50
    [&>span]:line-clamp-1",e),...t},o,K.createElement(L.Icon,{asChild:!0},K.createElement(et.ChevronDownIcon,{className:"h-4
    w-4
    opacity-50"}))));xe.displayName=L.Trigger.displayName;Cr=K.forwardRef(({className:e,...o},t)=>K.createElement(L.ScrollUpButton,{ref:t,className:l("flex
    cursor-default items-center justify-center
    py-1",e),...o},K.createElement(et.ChevronUpIcon,{className:"h-4
    w-4"})));Cr.displayName=L.ScrollUpButton.displayName;Nr=K.forwardRef(({className:e,...o},t)=>K.createElement(L.ScrollDownButton,{ref:t,className:l("flex
    cursor-default items-center justify-center
    py-1",e),...o},K.createElement(et.ChevronDownIcon,{className:"h-4
    w-4"})));Nr.displayName=L.ScrollDownButton.displayName;be=K.forwardRef(({className:e,children:o,position:t="popper",...n},i)=>K.createElement(L.Portal,null,K.createElement(L.Content,{ref:i,className:l("relative
    z-50 max-h-[--radix-select-content-available-height] min-w-[8rem]
    overflow-y-auto overflow-x-hidden rounded-md border bg-popover
    text-popover-foreground shadow-md data-[state=open]:animate-in
    data-[state=closed]:animate-out data-[state=closed]:fade-out-0
    data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95
    data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2
    data-[side=left]:slide-in-from-right-2
    data-[side=right]:slide-in-from-left-2
    data-[side=top]:slide-in-from-bottom-2
    origin-[--radix-select-content-transform-origin]",t==="popper"&&"data-[side=bottom]:translate-y-1
    data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1
    data-[side=top]:-translate-y-1",e),position:t,...n},K.createElement(Cr,null),K.createElement(L.Viewport,{className:l("p-1",t==="popper"&&"h-[var(--radix-select-trigger-height)]
    w-full
    min-w-[var(--radix-select-trigger-width)]")},o),K.createElement(Nr,null))));be.displayName=L.Content.displayName;La=K.forwardRef(({className:e,...o},t)=>K.createElement(L.Label,{ref:t,className:l("px-2
    py-1.5 text-sm
    font-semibold",e),...o}));La.displayName=L.Label.displayName;Q=K.forwardRef(({className:e,children:o,...t},n)=>K.createElement(L.Item,{ref:n,className:l("relative
    flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-2
    pr-8 text-sm outline-none focus:bg-accent focus:text-accent-foreground
    data-[disabled]:pointer-events-none
    data-[disabled]:opacity-50",e),...t},K.createElement("span",{className:"absolute
    right-2 flex h-3.5 w-3.5 items-center
    justify-center"},K.createElement(L.ItemIndicator,null,K.createElement(et.CheckIcon,{className:"h-4
    w-4"}))),K.createElement(L.ItemText,null,o)));Q.displayName=L.Item.displayName;Ba=K.forwardRef(({className:e,...o},t)=>K.createElement(L.Separator,{ref:t,className:l("-mx-1
    my-1 h-px bg-muted",e),...o}));Ba.displayName=L.Separator.displayName});var
    Et,io,Tr=I(()=>{c();Et=D(s("react"));oe();io=Et.forwardRef(({className:e,...o},t)=>Et.createElement("textarea",{className:l("flex
    min-h-[60px] w-full rounded-md border border-input bg-transparent px-3 py-2
    text-base shadow-sm placeholder:text-muted-foreground
    focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring
    disabled:cursor-not-allowed disabled:opacity-50
    md:text-sm",e),ref:t,...o}));io.displayName="Textarea"});function
    kt({className:e,classNames:o,showOutsideDays:t=!0,captionLayout:n="label",buttonVariant:i="ghost",formatters:m,components:b,...C}){let
    f=(0,ft.getDefaultClassNames)();return
    we.createElement(ft.DayPicker,{showOutsideDays:t,className:l("bg-background
    group/calendar p-3 [--cell-size:2rem]
    [[data-slot=card-content]_&]:bg-transparent
    [[data-slot=popover-content]_&]:bg-transparent",String.raw`rtl:**:[.rdp-button\_next>svg]:rotate-180`,String.raw`rtl:**:[.rdp-button\_previous>svg]:rotate-180`,e),captionLayout:n,formatters:{formatMonthDropdown:T=>T.toLocaleString("default",{month:"short"}),...m},classNames:{root:l("w-fit",f.root),months:l("relative
    flex flex-col gap-4 md:flex-row",f.months),month:l("flex w-full flex-col
    gap-4",f.month),nav:l("absolute inset-x-0 top-0 flex w-full items-center
    justify-between
    gap-1",f.nav),button_previous:l(wt({variant:i}),"h-[--cell-size]
    w-[--cell-size] select-none p-0
    aria-disabled:opacity-50",f.button_previous),button_next:l(wt({variant:i}),"h-[--cell-size]
    w-[--cell-size] select-none p-0
    aria-disabled:opacity-50",f.button_next),month_caption:l("flex
    h-[--cell-size] w-full items-center justify-center
    px-[--cell-size]",f.month_caption),dropdowns:l("flex h-[--cell-size] w-full
    items-center justify-center gap-1.5 text-sm
    font-medium",f.dropdowns),dropdown_root:l("has-focus:border-ring
    border-input shadow-xs has-focus:ring-ring/50 has-focus:ring-[3px] relative
    rounded-md border",f.dropdown_root),dropdown:l("bg-popover absolute inset-0
    opacity-0",f.dropdown),caption_label:l("select-none
    font-medium",n==="label"?"text-sm":"[&>svg]:text-muted-foreground flex h-8
    items-center gap-1 rounded-md pl-2 pr-1 text-sm
    [&>svg]:size-3.5",f.caption_label),table:"w-full
    border-collapse",weekdays:l("flex",f.weekdays),weekday:l("text-muted-foreground
    flex-1 select-none rounded-md text-[0.8rem]
    font-normal",f.weekday),week:l("mt-2 flex
    w-full",f.week),week_number_header:l("w-[--cell-size]
    select-none",f.week_number_header),week_number:l("text-muted-foreground
    select-none text-[0.8rem]",f.week_number),day:l("group/day relative
    aspect-square h-full w-full select-none p-0 text-center
    [&:first-child[data-selected=true]_button]:rounded-l-md
    [&:last-child[data-selected=true]_button]:rounded-r-md",f.day),range_start:l("bg-accent
    rounded-l-md",f.range_start),range_middle:l("rounded-none",f.range_middle),range_end:l("bg-accent
    rounded-r-md",f.range_end),today:l("bg-accent text-accent-foreground
    rounded-md
    data-[selected=true]:rounded-none",f.today),outside:l("text-muted-foreground
    aria-selected:text-muted-foreground",f.outside),disabled:l("text-muted-foreground
    opacity-50",f.disabled),hidden:l("invisible",f.hidden),...o},components:{Root:({className:T,rootRef:g,...v})=>we.createElement("div",{"data-slot":"calendar",ref:g,className:l(T),...v}),Chevron:({className:T,orientation:g,...v})=>g==="left"?we.createElement(st.ChevronLeftIcon,{className:l("size-4",T),...v}):g==="right"?we.createElement(st.ChevronRightIcon,{className:l("size-4",T),...v}):we.createElement(st.ChevronDownIcon,{className:l("size-4",T),...v}),DayButton:Ea,WeekNumber:({children:T,...g})=>we.createElement("td",{...g},we.createElement("div",{className:"flex
    size-[--cell-size] items-center justify-center
    text-center"},T)),...b},...C})}function
    Ea({className:e,day:o,modifiers:t,...n}){let
    i=(0,ft.getDefaultClassNames)(),m=we.useRef(null);return
    we.useEffect(()=>{t.focused&&m.current?.focus()},[t.focused]),we.createElement(A,{ref:m,variant:"ghost",size:"icon","data-day":o.date.toLocaleDateString(),"data-selected-single":t.selected&&!t.range_start&&!t.range_end&&!t.range_middle,"data-range-start":t.range_start,"data-range-end":t.range_end,"data-range-middle":t.range_middle,className:l("data-[selected-single=true]:bg-primary
    data-[selected-single=true]:text-primary-foreground
    data-[range-middle=true]:bg-accent
    data-[range-middle=true]:text-accent-foreground
    data-[range-start=true]:bg-primary
    data-[range-start=true]:text-primary-foreground
    data-[range-end=true]:bg-primary
    data-[range-end=true]:text-primary-foreground
    group-data-[focused=true]/day:border-ring
    group-data-[focused=true]/day:ring-ring/50 flex aspect-square h-auto w-full
    min-w-[--cell-size] flex-col gap-1 font-normal leading-none
    data-[range-end=true]:rounded-md data-[range-middle=true]:rounded-none
    data-[range-start=true]:rounded-md group-data-[focused=true]/day:relative
    group-data-[focused=true]/day:z-10 group-data-[focused=true]/day:ring-[3px]
    [&>span]:text-xs [&>span]:opacity-70",i.day,e),...n})}var
    we,st,ft,so=I(()=>{c();we=D(s("react")),st=s("lucide-react"),ft=s("react-day-picker");oe();Ge()});var
    gt,We,Ot,Ht,vt,lo=I(()=>{c();gt=D(s("react")),We=D(s("@radix-ui/react-popover"));oe();Ot=We.Root,Ht=We.Trigger,vt=gt.forwardRef(({className:e,align:o="center",sideOffset:t=4,...n},i)=>gt.createElement(We.Portal,null,gt.createElement(We.Content,{ref:i,align:o,sideOffset:t,className:l("z-50
    w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md
    outline-none data-[state=open]:animate-in data-[state=closed]:animate-out
    data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0
    data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95
    data-[side=bottom]:slide-in-from-top-2
    data-[side=left]:slide-in-from-right-2
    data-[side=right]:slide-in-from-left-2
    data-[side=top]:slide-in-from-bottom-2
    origin-[--radix-popover-content-transform-origin]",e),...n})));vt.displayName=We.Content.displayName});var
    yt,ht,mo,Pr=I(()=>{"use
    client";c();yt=D(s("react")),ht=D(s("@radix-ui/react-switch"));oe();mo=yt.forwardRef(({className:e,...o},t)=>yt.createElement(ht.Root,{className:l("peer
    inline-flex h-5 w-9 shrink-0 cursor-pointer items-center rounded-full
    border-2 border-transparent shadow-sm transition-colors
    focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring
    focus-visible:ring-offset-2 focus-visible:ring-offset-background
    disabled:cursor-not-allowed disabled:opacity-50
    data-[state=checked]:bg-primary
    data-[state=unchecked]:bg-input",e),...o,ref:t},yt.createElement(ht.Thumb,{className:l("pointer-events-none
    block h-4 w-4 rounded-full bg-background shadow-lg ring-0
    transition-transform data-[state=checked]:translate-x-4
    data-[state=unchecked]:translate-x-0")})));mo.displayName=ht.Root.displayName});var
    y,wr,Sr,$e,Dr,Ar,lt,ka,Oa,Fr,Ir=I(()=>{c();y=D(s("react")),wr=s("react-hook-form"),Sr=s("@hookform/resolvers/zod"),$e=s("zod"),Dr=s("date-fns"),Ar=s("date-fns/locale"),lt=s("lucide-react");Ge();Mt();it();Bt();Tr();so();lo();Pr();je();oe();ka=D(s("lucide-react")),Oa=$e.z.object({type:$e.z.enum(["income","expense"]),category:$e.z.string().min(1,"\u0412\u044B\u0431\u0435\u0440\u0438\u0442\u0435
    \u043A\u0430\u0442\u0435\u0433\u043E\u0440\u0438\u044E"),amount:$e.z.number().min(.01,"\u0421\u0443\u043C\u043C\u0430
    \u0434\u043E\u043B\u0436\u043D\u0430 \u0431\u044B\u0442\u044C
    \u0431\u043E\u043B\u044C\u0448\u0435
    0"),date:$e.z.date(),description:$e.z.string().min(1,"\u0412\u0432\u0435\u0434\u0438\u0442\u0435
    \u043E\u043F\u0438\u0441\u0430\u043D\u0438\u0435"),source:$e.z.string().optional()}),Fr=({onSuccess:e})=>{let{data:o,addTransaction:t}=fe(),[n,i]=(0,y.useState)(!1),m=(0,wr.useForm)({resolver:(0,Sr.zodResolver)(Oa),defaultValues:{type:"expense",category:"",amount:0,date:new
    Date,description:"",source:""}}),b=g=>{t({type:g.type,category:g.category,amount:g.amount,date:g.date,description:g.description,source:g.source}),m.reset(),e?.()},C=g=>{i(g),m.setValue("type",g?"income":"expense")},f=g=>{let
    v=ka[g];return v?y.default.createElement(v,{className:"h-4
    w-4"}):y.default.createElement(lt.DollarSign,{className:"h-4
    w-4"})},T=n?[{id:"salary",name:"\u0417\u0430\u0440\u043F\u043B\u0430\u0442\u0430",icon:"Briefcase",color:"#10b981"}]:o.categories;return
    y.default.createElement(Re,{...m},y.default.createElement("form",{onSubmit:m.handleSubmit(b),className:"space-y-4"},y.default.createElement(U,null,y.default.createElement($,null,"\u0422\u0438\u043F
    \u043E\u043F\u0435\u0440\u0430\u0446\u0438\u0438"),y.default.createElement("div",{className:"flex
    items-center
    space-x-2"},y.default.createElement("span",{className:l("text-sm",!n&&"font-semibold")},"\u0420\u0430\u0441\u0445\u043E\u0434"),y.default.createElement(mo,{checked:n,onCheckedChange:C}),y.default.createElement("span",{className:l("text-sm",n&&"font-semibold")},"\u0414\u043E\u0445\u043E\u0434"))),y.default.createElement(Z,{control:m.control,name:"category",render:({field:g})=>y.default.createElement(U,null,y.default.createElement($,null,"\u041A\u0430\u0442\u0435\u0433\u043E\u0440\u0438\u044F"),y.default.createElement(Te,{onValueChange:g.onChange,value:g.value},y.default.createElement(Y,null,y.default.createElement(xe,null,y.default.createElement(Pe,{placeholder:"\u0412\u044B\u0431\u0435\u0440\u0438\u0442\u0435
    \u043A\u0430\u0442\u0435\u0433\u043E\u0440\u0438\u044E"}))),y.default.createElement(be,null,T.map(v=>y.default.createElement(Q,{key:v.id,value:v.name},y.default.createElement("div",{className:"flex
    items-center gap-2"},y.default.createElement("div",{className:"w-2 h-2
    rounded-full",style:{backgroundColor:v.color}}),f(v.icon),y.default.createElement("span",null,v.name)))))),y.default.createElement(J,null))}),y.default.createElement(Z,{control:m.control,name:"amount",render:({field:g})=>y.default.createElement(U,null,y.default.createElement($,null,"\u0421\u0443\u043C\u043C\u0430"),y.default.createElement(Y,null,y.default.createElement(se,{type:"number",placeholder:"0.00",...g,onChange:v=>g.onChange(parseFloat(v.target.value))})),y.default.createElement(J,null))}),y.default.createElement(Z,{control:m.control,name:"date",render:({field:g})=>y.default.createElement(U,null,y.default.createElement($,null,"\u0414\u0430\u0442\u0430"),y.default.createElement(Ot,null,y.default.createElement(Ht,{asChild:!0},y.default.createElement(Y,null,y.default.createElement(A,{variant:"outline",className:l("w-full
    justify-start text-left
    font-normal",!g.value&&"text-muted-foreground")},y.default.createElement(lt.Calendar,{className:"mr-2
    h-4
    w-4"}),g.value?(0,Dr.format)(g.value,"PPP",{locale:Ar.ru}):y.default.createElement("span",null,"\u0412\u044B\u0431\u0435\u0440\u0438\u0442\u0435
    \u0434\u0430\u0442\u0443")))),y.default.createElement(vt,{className:"w-auto
    p-0",align:"start"},y.default.createElement(kt,{mode:"single",selected:g.value,onSelect:g.onChange,initialFocus:!0}))),y.default.createElement(J,null))}),y.default.createElement(Z,{control:m.control,name:"description",render:({field:g})=>y.default.createElement(U,null,y.default.createElement($,null,"\u041E\u043F\u0438\u0441\u0430\u043D\u0438\u0435"),y.default.createElement(Y,null,y.default.createElement(io,{placeholder:"\u0412\u0432\u0435\u0434\u0438\u0442\u0435
    \u043E\u043F\u0438\u0441\u0430\u043D\u0438\u0435
    \u043E\u043F\u0435\u0440\u0430\u0446\u0438\u0438...",...g})),y.default.createElement(J,null))}),n&&y.default.createElement(Z,{control:m.control,name:"source",render:({field:g})=>y.default.createElement(U,null,y.default.createElement($,null,"\u0418\u0441\u0442\u043E\u0447\u043D\u0438\u043A
    \u0434\u043E\u0445\u043E\u0434\u0430"),y.default.createElement(Te,{onValueChange:g.onChange,value:g.value},y.default.createElement(Y,null,y.default.createElement(xe,null,y.default.createElement(Pe,{placeholder:"\u0412\u044B\u0431\u0435\u0440\u0438\u0442\u0435
    \u0438\u0441\u0442\u043E\u0447\u043D\u0438\u043A"}))),y.default.createElement(be,null,o.incomeSources.map(v=>y.default.createElement(Q,{key:v.id,value:v.name},y.default.createElement("div",{className:"flex
    items-center gap-2"},y.default.createElement("div",{className:"w-2 h-2
    rounded-full",style:{backgroundColor:v.color}}),y.default.createElement("span",null,v.name)))))),y.default.createElement(J,null))}),y.default.createElement(A,{type:"submit",className:"w-full"},y.default.createElement(lt.Plus,{className:"mr-2
    h-4 w-4"}),"\u0414\u043E\u0431\u0430\u0432\u0438\u0442\u044C
    \u0442\u0440\u0430\u043D\u0437\u0430\u043A\u0446\u0438\u044E")))}});var
    le,co,po,uo,Ha,fo,tt,ot,_a,Mr=I(()=>{c();le=D(s("react"));oe();co=le.forwardRef(({className:e,...o},t)=>le.createElement("div",{className:"relative
    w-full overflow-auto"},le.createElement("table",{ref:t,className:l("w-full
    caption-bottom
    text-sm",e),...o})));co.displayName="Table";po=le.forwardRef(({className:e,...o},t)=>le.createElement("thead",{ref:t,className:l("[&_tr]:border-b",e),...o}));po.displayName="TableHeader";uo=le.forwardRef(({className:e,...o},t)=>le.createElement("tbody",{ref:t,className:l("[&_tr:last-child]:border-0",e),...o}));uo.displayName="TableBody";Ha=le.forwardRef(({className:e,...o},t)=>le.createElement("tfoot",{ref:t,className:l("border-t
    bg-muted/50 font-medium
    [&>tr]:last:border-b-0",e),...o}));Ha.displayName="TableFooter";fo=le.forwardRef(({className:e,...o},t)=>le.createElement("tr",{ref:t,className:l("border-b
    transition-colors hover:bg-muted/50
    data-[state=selected]:bg-muted",e),...o}));fo.displayName="TableRow";tt=le.forwardRef(({className:e,...o},t)=>le.createElement("th",{ref:t,className:l("h-10
    px-2 text-left align-middle font-medium text-muted-foreground
    [&:has([role=checkbox])]:pr-0
    [&>[role=checkbox]]:translate-y-[2px]",e),...o}));tt.displayName="TableHead";ot=le.forwardRef(({className:e,...o},t)=>le.createElement("td",{ref:t,className:l("p-2
    align-middle [&:has([role=checkbox])]:pr-0
    [&>[role=checkbox]]:translate-y-[2px]",e),...o}));ot.displayName="TableCell";_a=le.forwardRef(({className:e,...o},t)=>le.createElement("caption",{ref:t,className:l("mt-4
    text-sm
    text-muted-foreground",e),...o}));_a.displayName="TableCaption"});function
    ze({className:e,variant:o,...t}){return
    Lr.createElement("div",{className:l(Va({variant:o}),e),...t})}var
    Lr,Br,Va,xt=I(()=>{c();Lr=D(s("react")),Br=s("class-variance-authority");oe();Va=(0,Br.cva)("inline-flex
    items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold
    transition-colors focus:outline-none focus:ring-2 focus:ring-ring
    focus:ring-offset-2",{variants:{variant:{default:"border-transparent
    bg-primary text-primary-foreground shadow
    hover:bg-primary/80",secondary:"border-transparent bg-secondary
    text-secondary-foreground
    hover:bg-secondary/80",destructive:"border-transparent bg-destructive
    text-destructive-foreground shadow
    hover:bg-destructive/80",outline:"text-foreground"}},defaultVariants:{variant:"default"}})});var
    P,Er,kr,Ke,_t,ja,Or,Hr=I(()=>{c();P=D(s("react")),Er=s("date-fns"),kr=s("date-fns/locale"),Ke=s("lucide-react");Ge();it();Mr();xt();ut();je();ke();_t=s("framer-motion"),ja=D(s("lucide-react")),Or=()=>{let{data:e,deleteTransaction:o}=fe(),[t,n]=(0,P.useState)(""),[i,m]=(0,P.useState)("date"),[b,C]=(0,P.useState)("desc"),[f,T]=(0,P.useState)(!1),[g,v]=(0,P.useState)(null),M=(0,P.useMemo)(()=>{let
    _=e.transactions.filter(p=>p.description.toLowerCase().includes(t.toLowerCase())||p.category.toLowerCase().includes(t.toLowerCase()));return
    _.sort((p,G)=>{let ue=0;return
    i==="date"?ue=p.date.getTime()-G.date.getTime():i==="amount"?ue=p.amount-G.amount:i==="category"&&(ue=p.category.localeCompare(G.category)),b==="asc"?ue:-ue}),_},[e.transactions,t,i,b]),u=_=>{i===_?C(b==="asc"?"desc":"asc"):(m(_),C("asc"))},ee=()=>{g&&(o(g),T(!1),v(null))},Ce=_=>{let
    p=e.categories.find(G=>G.name===_);if(p){let G=ja[p.icon];return
    G?P.default.createElement(G,{className:"h-4 w-4"}):null}return
    null},Ve=_=>e.categories.find(G=>G.name===_)?.color||"#6b7280";return
    P.default.createElement("div",{className:"space-y-4"},P.default.createElement("div",{className:"flex
    items-center gap-2"},P.default.createElement("div",{className:"relative
    flex-1"},P.default.createElement(Ke.Search,{className:"absolute left-3
    top-1/2 -translate-y-1/2 h-4 w-4
    text-muted-foreground"}),P.default.createElement(se,{placeholder:"\u041F\u043E\u0438\u0441\u043A
    \u043F\u043E \u043E\u043F\u0438\u0441\u0430\u043D\u0438\u044E
    \u0438\u043B\u0438
    \u043A\u0430\u0442\u0435\u0433\u043E\u0440\u0438\u0438...",value:t,onChange:_=>n(_.target.value),className:"pl-10"}))),P.default.createElement("div",{className:"rounded-md
    border"},P.default.createElement(co,null,P.default.createElement(po,null,P.default.createElement(fo,null,P.default.createElement(tt,null,P.default.createElement(A,{type:"button",variant:"ghost",onClick:()=>u("date"),className:"flex
    items-center
    gap-1"},"\u0414\u0430\u0442\u0430",P.default.createElement(Ke.ArrowUpDown,{className:"h-4
    w-4"}))),P.default.createElement(tt,null,P.default.createElement(A,{type:"button",variant:"ghost",onClick:()=>u("category"),className:"flex
    items-center
    gap-1"},"\u041A\u0430\u0442\u0435\u0433\u043E\u0440\u0438\u044F",P.default.createElement(Ke.ArrowUpDown,{className:"h-4
    w-4"}))),P.default.createElement(tt,null,"\u041E\u043F\u0438\u0441\u0430\u043D\u0438\u0435"),P.default.createElement(tt,{className:"text-right"},P.default.createElement(A,{type:"button",variant:"ghost",onClick:()=>u("amount"),className:"flex
    items-center
    gap-1"},"\u0421\u0443\u043C\u043C\u0430",P.default.createElement(Ke.ArrowUpDown,{className:"h-4
    w-4"}))),P.default.createElement(tt,{className:"text-right"},"\u0414\u0435\u0439\u0441\u0442\u0432\u0438\u044F"))),P.default.createElement(uo,null,P.default.createElement(_t.AnimatePresence,null,M.map(_=>P.default.createElement(_t.motion.tr,{key:_.id,initial:{opacity:0,y:-10},animate:{opacity:1,y:0},exit:{opacity:0,y:-10},transition:{duration:.2},className:"border-b"},P.default.createElement(ot,{className:"font-medium"},(0,Er.format)(_.date,"dd
    MMM
    yyyy",{locale:kr.ru})),P.default.createElement(ot,null,P.default.createElement("div",{className:"flex
    items-center gap-2"},P.default.createElement("div",{className:"w-2 h-2
    rounded-full",style:{backgroundColor:Ve(_.category)}}),Ce(_.category),P.default.createElement("span",null,_.category))),P.default.createElement(ot,{className:"max-w-[200px]
    truncate"},_.description),P.default.createElement(ot,{className:"text-right"},P.default.createElement(ze,{variant:_.type==="income"?"default":"destructive",className:_.type==="income"?"bg-green-600":""},_.type==="income"?"+":"-",k(_.amount))),P.default.createElement(ot,{className:"text-right"},P.default.createElement(A,{type:"button",variant:"ghost",size:"icon",onClick:()=>{v(_.id),T(!0)}},P.default.createElement(Ke.Trash2,{className:"h-4
    w-4"})))))))),M.length===0&&P.default.createElement("div",{className:"p-8
    text-center
    text-muted-foreground"},"\u0422\u0440\u0430\u043D\u0437\u0430\u043A\u0446\u0438\u0438
    \u043D\u0435
    \u043D\u0430\u0439\u0434\u0435\u043D\u044B")),P.default.createElement(_e,{open:f,onOpenChange:T},P.default.createElement(Ie,null,P.default.createElement(Me,null,P.default.createElement(Le,null,"\u0423\u0434\u0430\u043B\u0438\u0442\u044C
    \u0442\u0440\u0430\u043D\u0437\u0430\u043A\u0446\u0438\u044E?"),P.default.createElement(pt,null,"\u042D\u0442\u043E
    \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435
    \u043D\u0435\u043B\u044C\u0437\u044F
    \u043E\u0442\u043C\u0435\u043D\u0438\u0442\u044C.
    \u0422\u0440\u0430\u043D\u0437\u0430\u043A\u0446\u0438\u044F
    \u0431\u0443\u0434\u0435\u0442 \u0443\u0434\u0430\u043B\u0435\u043D\u0430
    \u043D\u0430\u0432\u0441\u0435\u0433\u0434\u0430.")),P.default.createElement("div",{className:"flex
    justify-end
    gap-2"},P.default.createElement(A,{type:"button",variant:"outline",onClick:()=>T(!1)},"\u041E\u0442\u043C\u0435\u043D\u0430"),P.default.createElement(A,{type:"button",variant:"destructive",onClick:ee},"\u0423\u0434\u0430\u043B\u0438\u0442\u044C")))))}});var
    ne,_r,go,Vr,jr=I(()=>{c();ne=D(s("react"));De();Ge();ut();_r=s("lucide-react");Ir();Hr();go=s("framer-motion"),Vr=()=>{let[e,o]=(0,ne.useState)(!1);return
    ne.default.createElement("div",{className:"p-4 lg:p-6 space-y-6 pb-20
    lg:pb-6"},ne.default.createElement(go.motion.div,{initial:{opacity:0,y:20},animate:{opacity:1,y:0},transition:{duration:.3},className:"flex
    items-center
    justify-between"},ne.default.createElement("h1",{className:"text-3xl
    font-bold"},"\u0422\u0440\u0430\u043D\u0437\u0430\u043A\u0446\u0438\u0438"),ne.default.createElement(_e,{open:e,onOpenChange:o},ne.default.createElement(at,{asChild:!0},ne.default.createElement(A,null,ne.default.createElement(_r.Plus,{className:"mr-2
    h-4
    w-4"}),"\u0414\u043E\u0431\u0430\u0432\u0438\u0442\u044C")),ne.default.createElement(Ie,{className:"max-w-md
    max-h-[90vh]
    overflow-y-auto"},ne.default.createElement(Me,null,ne.default.createElement(Le,null,"\u041D\u043E\u0432\u0430\u044F
    \u0442\u0440\u0430\u043D\u0437\u0430\u043A\u0446\u0438\u044F")),ne.default.createElement(Fr,{onSuccess:()=>o(!1)})))),ne.default.createElement(go.motion.div,{initial:{opacity:0,y:20},animate:{opacity:1,y:0},transition:{duration:.3,delay:.1}},ne.default.createElement(V,null,ne.default.createElement(W,{className:"p-6"},ne.default.createElement(z,null,"\u0412\u0441\u0435
    \u0442\u0440\u0430\u043D\u0437\u0430\u043A\u0446\u0438\u0438")),ne.default.createElement(j,{className:"p-6
    pt-0"},ne.default.createElement(Or,null)))))}});var
    O,Vt,pe,Gr,vo,Wr,zr=I(()=>{c();O=D(s("react"));De();Ge();Vt=s("lucide-react");je();pe=s("date-fns"),Gr=s("date-fns/locale");oe();vo=s("framer-motion"),Wr=()=>{let{data:e}=fe(),[o,t]=(0,O.useState)(new
    Date),n=(0,pe.startOfMonth)(o),i=(0,pe.endOfMonth)(o),m=(0,pe.eachDayOfInterval)({start:n,end:i}),b=n.getDay(),C=Array.from({length:b===0?6:b-1}),f=v=>e.transactions.some(M=>(0,pe.isSameDay)(M.date,v)),T=v=>{let
    M=v.getDate();return
    e.incomeSources.some(u=>u.paymentDates.includes(M)&&u.isActive)},g=v=>e.vacations.some(M=>v>=M.startDate&&v<=M.endDate);return
    O.default.createElement("div",{className:"p-4 lg:p-6 space-y-6 pb-20
    lg:pb-6"},O.default.createElement(vo.motion.div,{initial:{opacity:0,y:20},animate:{opacity:1,y:0},transition:{duration:.3}},O.default.createElement("h1",{className:"text-3xl
    font-bold"},"\u041A\u0430\u043B\u0435\u043D\u0434\u0430\u0440\u044C")),O.default.createElement(vo.motion.div,{initial:{opacity:0,y:20},animate:{opacity:1,y:0},transition:{duration:.3,delay:.1}},O.default.createElement(V,null,O.default.createElement(W,{className:"flex
    flex-row items-center justify-between
    p-6"},O.default.createElement(A,{type:"button",variant:"outline",size:"icon",onClick:()=>t((0,pe.subMonths)(o,1))},O.default.createElement(Vt.ChevronLeft,{className:"h-4
    w-4"})),O.default.createElement(z,null,(0,pe.format)(o,"LLLL
    yyyy",{locale:Gr.ru})),O.default.createElement(A,{type:"button",variant:"outline",size:"icon",onClick:()=>t((0,pe.addMonths)(o,1))},O.default.createElement(Vt.ChevronRight,{className:"h-4
    w-4"}))),O.default.createElement(j,{className:"p-6
    pt-0"},O.default.createElement("div",{className:"grid grid-cols-7
    gap-2"},["\u041F\u043D","\u0412\u0442","\u0421\u0440","\u0427\u0442","\u041F\u0442","\u0421\u0431","\u0412\u0441"].map(v=>O.default.createElement("div",{key:v,className:"text-center
    font-medium text-sm text-muted-foreground
    py-2"},v)),C.map((v,M)=>O.default.createElement("div",{key:`empty-${M}`})),m.map(v=>{let
    M=f(v),u=T(v),ee=g(v),Ce=(0,pe.isToday)(v);return
    O.default.createElement("div",{key:v.toString(),className:l("aspect-square
    p-2 rounded-lg border transition-all hover:border-primary
    cursor-pointer",Ce&&"border-primary bg-primary/5",ee&&"bg-yellow-100
    dark:bg-yellow-900/20")},O.default.createElement("div",{className:"text-sm
    font-medium
    mb-1"},(0,pe.format)(v,"d")),O.default.createElement("div",{className:"flex
    gap-1"},u&&O.default.createElement("div",{className:"w-2 h-2 rounded-full
    bg-blue-500",title:"\u0417\u0430\u0440\u043F\u043B\u0430\u0442\u0430"}),M&&O.default.createElement("div",{className:"w-2
    h-2 rounded-full
    bg-green-500",title:"\u0422\u0440\u0430\u043D\u0437\u0430\u043A\u0446\u0438\u0438"})))})),O.default.createElement("div",{className:"mt-6
    flex flex-wrap gap-4
    text-sm"},O.default.createElement("div",{className:"flex items-center
    gap-2"},O.default.createElement("div",{className:"w-3 h-3 rounded-full
    bg-blue-500"}),O.default.createElement("span",null,"\u0417\u0430\u0440\u043F\u043B\u0430\u0442\u0430")),O.default.createElement("div",{className:"flex
    items-center gap-2"},O.default.createElement("div",{className:"w-3 h-3
    rounded-full
    bg-green-500"}),O.default.createElement("span",null,"\u0422\u0440\u0430\u043D\u0437\u0430\u043A\u0446\u0438\u0438")),O.default.createElement("div",{className:"flex
    items-center gap-2"},O.default.createElement("div",{className:"w-3 h-3
    rounded bg-yellow-100 dark:bg-yellow-900/20
    border"}),O.default.createElement("span",null,"\u041E\u0442\u043F\u0443\u0441\u043A")))))))}});var
    N,Ur,bt,Ga,$r,Kr=I(()=>{c();N=D(s("react"));De();Ge();it();St();xt();Ur=s("lucide-react");je();ke();bt=s("framer-motion"),Ga=D(s("lucide-react")),$r=()=>{let{data:e,updateCategory:o}=fe(),[t,n]=(0,N.useState)(null),[i,m]=(0,N.useState)(0),b=(0,N.useMemo)(()=>e.categories.map(u=>{let
    ee=Xt(e.transactions,u.name),Ce=u.plannedAmount>0?ee/u.plannedAmount*100:0,Ve=ee-u.plannedAmount;return{...u,actualAmount:ee,percentage:Ce,deviation:Ve}}),[e.categories,e.transactions]),C=u=>{o(u,{plannedAmount:i}),n(null),m(0)},f=u=>u<70?"bg-green-600":u<90?"bg-yellow-600":"bg-red-600",T=u=>{let
    ee=Ga[u];return ee?N.default.createElement(ee,{className:"h-5
    w-5"}):null},g=b.reduce((u,ee)=>u+ee.plannedAmount,0),v=b.reduce((u,ee)=>u+ee.actualAmount,0),M=v-g;return
    N.default.createElement("div",{className:"p-4 lg:p-6 space-y-6 pb-20
    lg:pb-6"},N.default.createElement(bt.motion.div,{initial:{opacity:0,y:20},animate:{opacity:1,y:0},transition:{duration:.3}},N.default.createElement("h1",{className:"text-3xl
    font-bold"},"\u041F\u043B\u0430\u043D\u0438\u0440\u043E\u0432\u0430\u043D\u0438\u0435
    \u0431\u044E\u0434\u0436\u0435\u0442\u0430")),N.default.createElement(bt.motion.div,{initial:{opacity:0,y:20},animate:{opacity:1,y:0},transition:{duration:.3,delay:.1}},N.default.createElement(V,null,N.default.createElement(W,{className:"p-6"},N.default.createElement(z,null,"\u0421\u0432\u043E\u0434\u043A\u0430
    \u0437\u0430 \u0442\u0435\u043A\u0443\u0449\u0438\u0439
    \u043C\u0435\u0441\u044F\u0446")),N.default.createElement(j,{className:"p-6
    pt-0"},N.default.createElement("div",{className:"grid grid-cols-1
    md:grid-cols-3 gap-4"},N.default.createElement("div",{className:"p-4
    rounded-lg border"},N.default.createElement("div",{className:"text-sm
    text-muted-foreground
    mb-1"},"\u0417\u0430\u043F\u043B\u0430\u043D\u0438\u0440\u043E\u0432\u0430\u043D\u043E"),N.default.createElement("div",{className:"text-2xl
    font-bold"},k(g))),N.default.createElement("div",{className:"p-4 rounded-lg
    border"},N.default.createElement("div",{className:"text-sm
    text-muted-foreground
    mb-1"},"\u041F\u043E\u0442\u0440\u0430\u0447\u0435\u043D\u043E"),N.default.createElement("div",{className:"text-2xl
    font-bold"},k(v))),N.default.createElement("div",{className:"p-4 rounded-lg
    border"},N.default.createElement("div",{className:"text-sm
    text-muted-foreground
    mb-1"},"\u041E\u0442\u043A\u043B\u043E\u043D\u0435\u043D\u0438\u0435"),N.default.createElement("div",{className:`text-2xl
    font-bold
    ${M>0?"text-red-600":"text-green-600"}`},M>0?"+":"",k(M))))))),N.default.createElement(bt.motion.div,{initial:{opacity:0,y:20},animate:{opacity:1,y:0},transition:{duration:.3,delay:.2}},N.default.createElement(V,null,N.default.createElement(W,{className:"p-6"},N.default.createElement(z,null,"\u041A\u0430\u0442\u0435\u0433\u043E\u0440\u0438\u0438")),N.default.createElement(j,{className:"p-6
    pt-0
    space-y-4"},b.map((u,ee)=>N.default.createElement(bt.motion.div,{key:u.id,initial:{opacity:0,x:-20},animate:{opacity:1,x:0},transition:{duration:.3,delay:.05*ee},className:"p-4
    rounded-lg border space-y-3"},N.default.createElement("div",{className:"flex
    items-center
    justify-between"},N.default.createElement("div",{className:"flex
    items-center gap-3"},N.default.createElement("div",{className:"w-10 h-10
    rounded-full flex items-center
    justify-center",style:{backgroundColor:`${u.color}20`}},N.default.createElement("span",{style:{color:u.color}},T(u.icon))),N.default.createElement("div",null,N.default.createElement("div",{className:"font-medium"},u.name),N.default.createElement("div",{className:"text-sm
    text-muted-foreground"},u.percentage.toFixed(0),"%
    \u0438\u0441\u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u043D\u043E"))),N.default.createElement("div",{className:"text-right
    space-y-1"},t===u.id?N.default.createElement("div",{className:"flex
    items-center
    gap-2"},N.default.createElement(se,{type:"number",value:i,onChange:Ce=>m(parseFloat(Ce.target.value)||0),className:"w-32",placeholder:"\u041F\u043B\u0430\u043D"}),N.default.createElement(A,{type:"button",size:"sm",onClick:()=>C(u.id)},"\u0421\u043E\u0445\u0440\u0430\u043D\u0438\u0442\u044C")):N.default.createElement(N.default.Fragment,null,N.default.createElement("div",{className:"flex
    items-center gap-2
    justify-end"},N.default.createElement("span",{className:"font-semibold"},k(u.actualAmount)),N.default.createElement("span",{className:"text-muted-foreground"},"/
    ",k(u.plannedAmount)),N.default.createElement(A,{type:"button",variant:"ghost",size:"icon",className:"h-6
    w-6",onClick:()=>{n(u.id),m(u.plannedAmount)}},N.default.createElement(Ur.Edit,{className:"h-3
    w-3"}))),u.deviation!==0&&N.default.createElement(ze,{variant:u.deviation>0?"destructive":"default",className:u.deviation<0?"bg-green-600":""},u.deviation>0?"+":"",k(u.deviation))))),N.default.createElement("div",{className:"space-y-2"},N.default.createElement(Xe,{value:Math.min(u.percentage,100),className:`h-2
    ${f(u.percentage)}`}),N.default.createElement("div",{className:"flex
    justify-between text-xs
    text-muted-foreground"},N.default.createElement("span",null,"\u041E\u0441\u0442\u0430\u043B\u043E\u0441\u044C:
    ",k(Math.max(0,u.plannedAmount-u.actualAmount))),u.percentage>100&&N.default.createElement("span",{className:"text-red-600
    font-medium"},"\u041F\u0440\u0435\u0432\u044B\u0448\u0435\u043D\u0438\u0435!")))))))))}});function
    Ua(){return yo=(yo+1)%Number.MAX_SAFE_INTEGER,yo.toString()}function
    Ct(e){Gt=$a(Gt,e),jt.forEach(o=>{o(Gt)})}function Ka({...e}){let
    o=Ua(),t=i=>Ct({type:"UPDATE_TOAST",toast:{...i,id:o}}),n=()=>Ct({type:"DISMISS_TOAST",toastId:o});return
    Ct({type:"ADD_TOAST",toast:{...e,id:o,open:!0,onOpenChange:i=>{i||n()}}}),{id:o,dismiss:n,update:t}}function
    zt(){let[e,o]=Wt.useState(Gt);return Wt.useEffect(()=>(jt.push(o),()=>{let
    t=jt.indexOf(o);t>-1&&jt.splice(t,1)}),[e]),{...e,toast:Ka,dismiss:t=>Ct({type:"DISMISS_TOAST",toastId:t})}}var
    Wt,Wa,za,yo,ho,qr,$a,jt,Gt,xo=I(()=>{"use
    client";c();Wt=D(s("react")),Wa=1,za=1e6,yo=0;ho=new
    Map,qr=e=>{if(ho.has(e))return;let
    o=setTimeout(()=>{ho.delete(e),Ct({type:"REMOVE_TOAST",toastId:e})},za);ho.set(e,o)},$a=(e,o)=>{switch(o.type){case"ADD_TOAST":return{...e,toasts:[o.toast,...e.toasts].slice(0,Wa)};case"UPDATE_TOAST":return{...e,toasts:e.toasts.map(t=>t.id===o.toast.id?{...t,...o.toast}:t)};case"DISMISS_TOAST":{let{toastId:t}=o;return
    t?qr(t):e.toasts.forEach(n=>{qr(n.id)}),{...e,toasts:e.toasts.map(n=>n.id===t||t===void
    0?{...n,open:!1}:n)}}case"REMOVE_TOAST":return o.toastId===void
    0?{...e,toasts:[]}:{...e,toasts:e.toasts.filter(t=>t.id!==o.toastId)}}},jt=[],Gt={toasts:[]}});var
    a,Ue,Yr,Jr,Zr,Ut,Qr,Xr,qe,qa,Rr,ea=I(()=>{c();a=D(s("react"));De();Ge();ut();it();St();xt();Mt();Bt();so();lo();Ue=s("lucide-react");je();ke();Yr=s("date-fns"),Jr=s("date-fns"),Zr=s("date-fns/locale"),Ut=s("framer-motion"),Qr=s("react-hook-form"),Xr=s("@hookform/resolvers/zod"),qe=s("zod");oe();xo();qa=qe.z.object({name:qe.z.string().min(1,"\u0412\u0432\u0435\u0434\u0438\u0442\u0435
    \u043D\u0430\u0437\u0432\u0430\u043D\u0438\u0435
    \u0446\u0435\u043B\u0438"),targetAmount:qe.z.number().min(1,"\u0421\u0443\u043C\u043C\u0430
    \u0434\u043E\u043B\u0436\u043D\u0430 \u0431\u044B\u0442\u044C
    \u0431\u043E\u043B\u044C\u0448\u0435
    0"),currentAmount:qe.z.number().min(0,"\u0421\u0443\u043C\u043C\u0430
    \u043D\u0435 \u043C\u043E\u0436\u0435\u0442 \u0431\u044B\u0442\u044C
    \u043E\u0442\u0440\u0438\u0446\u0430\u0442\u0435\u043B\u044C\u043D\u043E\u0439"),deadline:qe.z.date().optional(),category:qe.z.enum(["tech","vacation","auto","property","education","other"]),priority:qe.z.enum(["high","medium","low"])}),Rr=()=>{let{data:e,addGoal:o,updateGoal:t,deleteGoal:n}=fe(),[i,m]=(0,a.useState)(!1),[b,C]=(0,a.useState)(!1),[f,T]=(0,a.useState)(null),[g,v]=(0,a.useState)(0),{toast:M}=zt(),u=(0,Qr.useForm)({resolver:(0,Xr.zodResolver)(qa),defaultValues:{name:"",targetAmount:0,currentAmount:0,category:"other",priority:"medium"}}),ee=p=>{o({name:p.name,targetAmount:p.targetAmount,currentAmount:p.currentAmount,deadline:p.deadline,category:p.category,priority:p.priority}),u.reset(),m(!1),M({title:"\u0426\u0435\u043B\u044C
    \u0441\u043E\u0437\u0434\u0430\u043D\u0430",description:`\u0426\u0435\u043B\u044C
    "${p.name}" \u0443\u0441\u043F\u0435\u0448\u043D\u043E
    \u0434\u043E\u0431\u0430\u0432\u043B\u0435\u043D\u0430`})},Ce=()=>{if(f&&g>0){let
    p=e.financialGoals.find(G=>G.id===f);if(p){let
    G=p.currentAmount+g;t(f,{currentAmount:G});let
    ue=G/p.targetAmount*100;ue>=50&&p.progress<50?M({title:"\u{1F3AF}
    \u041F\u043E\u043B\u043E\u0432\u0438\u043D\u0430 \u043F\u0443\u0442\u0438
    \u043F\u0440\u043E\u0439\u0434\u0435\u043D\u0430!",description:`\u0412\u044B
    \u0434\u043E\u0441\u0442\u0438\u0433\u043B\u0438 50%
    \u0446\u0435\u043B\u0438
    "${p.name}"`}):ue>=80&&p.progress<80?M({title:"\u23F0
    \u041F\u043E\u0447\u0442\u0438 \u0443
    \u0446\u0435\u043B\u0438!",description:`\u0412\u044B
    \u0434\u043E\u0441\u0442\u0438\u0433\u043B\u0438 80%
    \u0446\u0435\u043B\u0438
    "${p.name}"`}):ue>=100&&p.progress<100&&M({title:"\u{1F3C6}
    \u0426\u0435\u043B\u044C
    \u0434\u043E\u0441\u0442\u0438\u0433\u043D\u0443\u0442\u0430!",description:`\u041F\u043E\u0437\u0434\u0440\u0430\u0432\u043B\u044F\u0435\u043C!
    \u0426\u0435\u043B\u044C "${p.name}"
    \u0432\u044B\u043F\u043E\u043B\u043D\u0435\u043D\u0430!`}),C(!1),v(0),T(null)}}},Ve=p=>({tech:"\u0422\u0435\u0445\u043D\u0438\u043A\u0430",vacation:"\u041E\u0442\u043F\u0443\u0441\u043A",auto:"\u0410\u0432\u0442\u043E",property:"\u041D\u0435\u0434\u0432\u0438\u0436\u0438\u043C\u043E\u0441\u0442\u044C",education:"\u041E\u0431\u0440\u0430\u0437\u043E\u0432\u0430\u043D\u0438\u0435",other:"\u041F\u0440\u043E\u0447\u0435\u0435"})[p]||p,_=p=>({high:"destructive",medium:"default",low:"secondary"})[p]||"default";return
    a.default.createElement("div",{className:"p-4 lg:p-6 space-y-6 pb-20
    lg:pb-6"},a.default.createElement(Ut.motion.div,{initial:{opacity:0,y:20},animate:{opacity:1,y:0},transition:{duration:.3},className:"flex
    items-center
    justify-between"},a.default.createElement("h1",{className:"text-3xl
    font-bold"},"\u0424\u0438\u043D\u0430\u043D\u0441\u043E\u0432\u044B\u0435
    \u0446\u0435\u043B\u0438"),a.default.createElement(_e,{open:i,onOpenChange:m},a.default.createElement(at,{asChild:!0},a.default.createElement(A,null,a.default.createElement(Ue.Plus,{className:"mr-2
    h-4 w-4"}),"\u0414\u043E\u0431\u0430\u0432\u0438\u0442\u044C
    \u0446\u0435\u043B\u044C")),a.default.createElement(Ie,{className:"max-w-md
    max-h-[90vh]
    overflow-y-auto"},a.default.createElement(Me,null,a.default.createElement(Le,null,"\u041D\u043E\u0432\u0430\u044F
    \u0446\u0435\u043B\u044C")),a.default.createElement(Re,{...u},a.default.createElement("form",{onSubmit:u.handleSubmit(ee),className:"space-y-4"},a.default.createElement(Z,{control:u.control,name:"name",render:({field:p})=>a.default.createElement(U,null,a.default.createElement($,null,"\u041D\u0430\u0437\u0432\u0430\u043D\u0438\u0435
    \u0446\u0435\u043B\u0438"),a.default.createElement(Y,null,a.default.createElement(se,{placeholder:"\u041D\u043E\u0432\u044B\u0439
    \u043D\u043E\u0443\u0442\u0431\u0443\u043A",...p})),a.default.createElement(J,null))}),a.default.createElement(Z,{control:u.control,name:"targetAmount",render:({field:p})=>a.default.createElement(U,null,a.default.createElement($,null,"\u0426\u0435\u043B\u0435\u0432\u0430\u044F
    \u0441\u0443\u043C\u043C\u0430"),a.default.createElement(Y,null,a.default.createElement(se,{type:"number",placeholder:"100000",...p,onChange:G=>p.onChange(parseFloat(G.target.value))})),a.default.createElement(J,null))}),a.default.createElement(Z,{control:u.control,name:"currentAmount",render:({field:p})=>a.default.createElement(U,null,a.default.createElement($,null,"\u0422\u0435\u043A\u0443\u0449\u0430\u044F
    \u0441\u0443\u043C\u043C\u0430"),a.default.createElement(Y,null,a.default.createElement(se,{type:"number",placeholder:"0",...p,onChange:G=>p.onChange(parseFloat(G.target.value))})),a.default.createElement(J,null))}),a.default.createElement(Z,{control:u.control,name:"category",render:({field:p})=>a.default.createElement(U,null,a.default.createElement($,null,"\u041A\u0430\u0442\u0435\u0433\u043E\u0440\u0438\u044F"),a.default.createElement(Te,{onValueChange:p.onChange,value:p.value},a.default.createElement(Y,null,a.default.createElement(xe,null,a.default.createElement(Pe,{placeholder:"\u0412\u044B\u0431\u0435\u0440\u0438\u0442\u0435
    \u043A\u0430\u0442\u0435\u0433\u043E\u0440\u0438\u044E"}))),a.default.createElement(be,null,a.default.createElement(Q,{value:"tech"},"\u0422\u0435\u0445\u043D\u0438\u043A\u0430"),a.default.createElement(Q,{value:"vacation"},"\u041E\u0442\u043F\u0443\u0441\u043A"),a.default.createElement(Q,{value:"auto"},"\u0410\u0432\u0442\u043E"),a.default.createElement(Q,{value:"property"},"\u041D\u0435\u0434\u0432\u0438\u0436\u0438\u043C\u043E\u0441\u0442\u044C"),a.default.createElement(Q,{value:"education"},"\u041E\u0431\u0440\u0430\u0437\u043E\u0432\u0430\u043D\u0438\u0435"),a.default.createElement(Q,{value:"other"},"\u041F\u0440\u043E\u0447\u0435\u0435"))),a.default.createElement(J,null))}),a.default.createElement(Z,{control:u.control,name:"priority",render:({field:p})=>a.default.createElement(U,null,a.default.createElement($,null,"\u041F\u0440\u0438\u043E\u0440\u0438\u0442\u0435\u0442"),a.default.createElement(Te,{onValueChange:p.onChange,value:p.value},a.default.createElement(Y,null,a.default.createElement(xe,null,a.default.createElement(Pe,{placeholder:"\u0412\u044B\u0431\u0435\u0440\u0438\u0442\u0435
    \u043F\u0440\u0438\u043E\u0440\u0438\u0442\u0435\u0442"}))),a.default.createElement(be,null,a.default.createElement(Q,{value:"high"},"\u0412\u044B\u0441\u043E\u043A\u0438\u0439"),a.default.createElement(Q,{value:"medium"},"\u0421\u0440\u0435\u0434\u043D\u0438\u0439"),a.default.createElement(Q,{value:"low"},"\u041D\u0438\u0437\u043A\u0438\u0439"))),a.default.createElement(J,null))}),a.default.createElement(Z,{control:u.control,name:"deadline",render:({field:p})=>a.default.createElement(U,null,a.default.createElement($,null,"\u0421\u0440\u043E\u043A
    (\u043E\u043F\u0446\u0438\u043E\u043D\u0430\u043B\u044C\u043D\u043E)"),a.default.createElement(Ot,null,a.default.createElement(Ht,{asChild:!0},a.default.createElement(Y,null,a.default.createElement(A,{type:"button",variant:"outline",className:l("w-full
    justify-start text-left
    font-normal",!p.value&&"text-muted-foreground")},a.default.createElement(Ue.Calendar,{className:"mr-2
    h-4
    w-4"}),p.value?(0,Jr.format)(p.value,"PPP",{locale:Zr.ru}):a.default.createElement("span",null,"\u0412\u044B\u0431\u0435\u0440\u0438\u0442\u0435
    \u0434\u0430\u0442\u0443")))),a.default.createElement(vt,{className:"w-auto
    p-0",align:"start"},a.default.createElement(kt,{mode:"single",selected:p.value,onSelect:p.onChange,initialFocus:!0}))),a.default.createElement(J,null))}),a.default.createElement(A,{type:"submit",className:"w-full"},"\u0421\u043E\u0437\u0434\u0430\u0442\u044C
    \u0446\u0435\u043B\u044C")))))),a.default.createElement("div",{className:"grid
    gap-6 md:grid-cols-2 lg:grid-cols-3"},e.financialGoals.map((p,G)=>{let
    ue=p.targetAmount-p.currentAmount,Je=p.deadline?(0,Yr.differenceInDays)(p.deadline,new
    Date):null,Ze=Yo(p);return
    a.default.createElement(Ut.motion.div,{key:p.id,initial:{opacity:0,y:20},animate:{opacity:1,y:0},transition:{duration:.3,delay:.1*G}},a.default.createElement(V,{className:"h-full"},a.default.createElement(W,{className:"p-6"},a.default.createElement("div",{className:"flex
    items-start
    justify-between"},a.default.createElement("div",{className:"space-y-1"},a.default.createElement(z,{className:"text-lg"},p.name),a.default.createElement("div",{className:"flex
    items-center
    gap-2"},a.default.createElement(ze,{variant:_(p.priority)},p.priority==="high"?"\u0412\u044B\u0441\u043E\u043A\u0438\u0439":p.priority==="medium"?"\u0421\u0440\u0435\u0434\u043D\u0438\u0439":"\u041D\u0438\u0437\u043A\u0438\u0439"),a.default.createElement(ze,{variant:"outline"},Ve(p.category)))),a.default.createElement(Ue.Target,{className:"h-5
    w-5 text-muted-foreground"}))),a.default.createElement(j,{className:"p-6
    pt-0
    space-y-4"},a.default.createElement("div",{className:"space-y-2"},a.default.createElement("div",{className:"flex
    items-center justify-between
    text-sm"},a.default.createElement("span",{className:"text-muted-foreground"},"\u041F\u0440\u043E\u0433\u0440\u0435\u0441\u0441"),a.default.createElement("span",{className:"font-semibold"},p.progress.toFixed(0),"%")),a.default.createElement(Xe,{value:p.progress,className:"h-3"}),a.default.createElement("div",{className:"flex
    items-center justify-between text-xs
    text-muted-foreground"},a.default.createElement("span",null,k(p.currentAmount)),a.default.createElement("span",null,k(p.targetAmount)))),a.default.createElement("div",{className:"space-y-2
    p-3 rounded-lg bg-muted/50"},a.default.createElement("div",{className:"flex
    items-center justify-between
    text-sm"},a.default.createElement("span",{className:"text-muted-foreground"},"\u041E\u0441\u0442\u0430\u043B\u043E\u0441\u044C"),a.default.createElement("span",{className:"font-semibold"},k(ue))),Je!==null&&a.default.createElement("div",{className:"flex
    items-center justify-between
    text-sm"},a.default.createElement("span",{className:"text-muted-foreground"},"\u0414\u043D\u0435\u0439
    \u0434\u043E
    \u0434\u0435\u0434\u043B\u0430\u0439\u043D\u0430"),a.default.createElement("span",{className:"font-semibold"},Je)),Ze>0&&a.default.createElement("div",{className:"flex
    items-center justify-between
    text-sm"},a.default.createElement("span",{className:"text-muted-foreground"},"\u0420\u0435\u043A\u043E\u043C\u0435\u043D\u0434\u0443\u0435\u043C\u044B\u0439
    \u0432\u0437\u043D\u043E\u0441/\u043C\u0435\u0441"),a.default.createElement("span",{className:"font-semibold
    text-primary"},k(Ze)))),a.default.createElement(A,{type:"button",className:"w-full",onClick:()=>{T(p.id),C(!0)}},a.default.createElement(Ue.Wallet,{className:"mr-2
    h-4 w-4"}),"\u0412\u043D\u0435\u0441\u0442\u0438
    \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430"))))}),e.financialGoals.length===0&&a.default.createElement(Ut.motion.div,{initial:{opacity:0},animate:{opacity:1},className:"col-span-full"},a.default.createElement(V,{className:"p-12"},a.default.createElement(j,{className:"p-6
    text-center space-y-2"},a.default.createElement(Ue.Target,{className:"h-12
    w-12 mx-auto text-muted-foreground
    mb-4"}),a.default.createElement("h3",{className:"text-lg
    font-medium"},"\u041D\u0435\u0442
    \u0430\u043A\u0442\u0438\u0432\u043D\u044B\u0445
    \u0446\u0435\u043B\u0435\u0439"),a.default.createElement("p",{className:"text-sm
    text-muted-foreground"},"\u0421\u043E\u0437\u0434\u0430\u0439\u0442\u0435
    \u043F\u0435\u0440\u0432\u0443\u044E \u0446\u0435\u043B\u044C,
    \u0447\u0442\u043E\u0431\u044B \u043D\u0430\u0447\u0430\u0442\u044C
    \u043A\u043E\u043F\u0438\u0442\u044C"))))),a.default.createElement(_e,{open:b,onOpenChange:C},a.default.createElement(Ie,null,a.default.createElement(Me,null,a.default.createElement(Le,null,"\u0412\u043D\u0435\u0441\u0442\u0438
    \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430")),a.default.createElement("div",{className:"space-y-4"},a.default.createElement("div",{className:"grid
    gap-2"},a.default.createElement("label",{htmlFor:"contribute-amount",className:"text-sm
    font-medium"},"\u0421\u0443\u043C\u043C\u0430"),a.default.createElement(se,{id:"contribute-amount",type:"number",value:g,onChange:p=>v(parseFloat(p.target.value)||0),placeholder:"0.00"})),a.default.createElement("div",{className:"flex
    justify-end
    gap-2"},a.default.createElement(A,{type:"button",variant:"outline",onClick:()=>C(!1)},"\u041E\u0442\u043C\u0435\u043D\u0430"),a.default.createElement(A,{type:"button",onClick:Ce},"\u0412\u043D\u0435\u0441\u0442\u0438"))))))}});var
    r,$t,oa,mt,Be,bo,Co,Ye,ta,ra,aa=I(()=>{c();r=D(s("react"));De();xt();Ge();ut();Mt();it();Bt();je();ke();$t=s("date-fns"),oa=s("date-fns/locale"),mt=s("framer-motion"),Be=s("lucide-react"),bo=s("react-hook-form"),Co=s("@hookform/resolvers/zod"),Ye=s("zod"),ta=Ye.z.object({person:Ye.z.enum(["me","girlfriend"]),name:Ye.z.string().min(1,"\u0412\u0432\u0435\u0434\u0438\u0442\u0435
    \u043D\u0430\u0437\u0432\u0430\u043D\u0438\u0435"),expectedAmount:Ye.z.number().min(0,"\u0421\u0443\u043C\u043C\u0430
    \u0434\u043E\u043B\u0436\u043D\u0430 \u0431\u044B\u0442\u044C
    \u0431\u043E\u043B\u044C\u0448\u0435
    0"),paymentDates:Ye.z.string().min(1,"\u0412\u0432\u0435\u0434\u0438\u0442\u0435
    \u0434\u0430\u0442\u044B
    \u0432\u044B\u043F\u043B\u0430\u0442"),color:Ye.z.string().min(1,"\u0412\u044B\u0431\u0435\u0440\u0438\u0442\u0435
    \u0446\u0432\u0435\u0442"),type:Ye.z.enum(["main","secondary"])}),ra=()=>{let{data:e,addIncomeSource:o,updateIncomeSource:t,deleteIncomeSource:n}=fe(),[i,m]=(0,r.useState)(!1),[b,C]=(0,r.useState)(!1),[f,T]=(0,r.useState)(!1),[g,v]=(0,r.useState)(null),M=(0,bo.useForm)({resolver:(0,Co.zodResolver)(ta),defaultValues:{person:"me",name:"",expectedAmount:0,paymentDates:"",color:"#3b82f6",type:"main"}}),u=(0,bo.useForm)({resolver:(0,Co.zodResolver)(ta)}),ee=d=>{let
    X=d.paymentDates.split(",").map(x=>parseInt(x.trim())).filter(x=>!isNaN(x)&&x>=1&&x<=31);o({person:d.person,name:d.name,expectedAmount:d.expectedAmount,paymentDates:X,color:d.color,type:d.type,isActive:!0}),M.reset(),m(!1)},Ce=d=>{if(!g)return;let
    X=d.paymentDates.split(",").map(x=>parseInt(x.trim())).filter(x=>!isNaN(x)&&x>=1&&x<=31);t(g.id,{person:d.person,name:d.name,expectedAmount:d.expectedAmount,paymentDates:X,color:d.color,type:d.type}),C(!1),v(null)},Ve=d=>{v(d),u.reset({person:d.person,name:d.name,expectedAmount:d.expectedAmount,paymentDates:d.paymentDates.join(",
    "),color:d.color,type:d.type}),C(!0)},_=()=>{g&&(n(g.id),T(!1),v(null))},G=(()=>{let
    d=new Date,X=d.getDate(),x=[];return
    e.incomeSources.forEach(h=>{h.isActive&&h.paymentDates.forEach(E=>{let
    q;if(E>=X)q=new Date(d.getFullYear(),d.getMonth(),E);else{let
    Qe=(0,$t.addMonths)(d,1);q=new
    Date(Qe.getFullYear(),Qe.getMonth(),E)}x.push({date:q,source:h})})}),x.sort((h,E)=>h.date.getTime()-E.date.getTime()).slice(0,10)})(),ue=e.incomeSources.filter(d=>d.person==="me"),Je=e.incomeSources.filter(d=>d.person==="girlfriend"),Ze=[{value:"#3b82f6",label:"\u0421\u0438\u043D\u0438\u0439"},{value:"#8b5cf6",label:"\u0424\u0438\u043E\u043B\u0435\u0442\u043E\u0432\u044B\u0439"},{value:"#ec4899",label:"\u0420\u043E\u0437\u043E\u0432\u044B\u0439"},{value:"#10b981",label:"\u0417\u0435\u043B\u0435\u043D\u044B\u0439"},{value:"#f59e0b",label:"\u041E\u0440\u0430\u043D\u0436\u0435\u0432\u044B\u0439"},{value:"#ef4444",label:"\u041A\u0440\u0430\u0441\u043D\u044B\u0439"}];return
    r.default.createElement("div",{className:"p-4 lg:p-6 space-y-6 pb-20
    lg:pb-6"},r.default.createElement(mt.motion.div,{initial:{opacity:0,y:20},animate:{opacity:1,y:0},transition:{duration:.3},className:"flex
    items-center
    justify-between"},r.default.createElement("h1",{className:"text-3xl
    font-bold"},"\u0417\u0430\u0440\u043F\u043B\u0430\u0442\u044B \u0438
    \u043E\u0442\u043F\u0443\u0441\u043A\u0430"),r.default.createElement(_e,{open:i,onOpenChange:m},r.default.createElement(at,{asChild:!0},r.default.createElement(A,null,r.default.createElement(Be.Plus,{className:"mr-2
    h-4 w-4"}),"\u0414\u043E\u0431\u0430\u0432\u0438\u0442\u044C
    \u0438\u0441\u0442\u043E\u0447\u043D\u0438\u043A")),r.default.createElement(Ie,{className:"max-w-md
    max-h-[90vh]
    overflow-y-auto"},r.default.createElement(Me,null,r.default.createElement(Le,null,"\u041D\u043E\u0432\u044B\u0439
    \u0438\u0441\u0442\u043E\u0447\u043D\u0438\u043A
    \u0434\u043E\u0445\u043E\u0434\u0430")),r.default.createElement(Re,{...M},r.default.createElement("form",{onSubmit:M.handleSubmit(ee),className:"space-y-4"},r.default.createElement(Z,{control:M.control,name:"person",render:({field:d})=>r.default.createElement(U,null,r.default.createElement($,null,"\u0427\u0435\u043B\u043E\u0432\u0435\u043A"),r.default.createElement(Te,{onValueChange:d.onChange,value:d.value},r.default.createElement(Y,null,r.default.createElement(xe,null,r.default.createElement(Pe,{placeholder:"\u0412\u044B\u0431\u0435\u0440\u0438\u0442\u0435
    \u0447\u0435\u043B\u043E\u0432\u0435\u043A\u0430"}))),r.default.createElement(be,null,r.default.createElement(Q,{value:"me"},"\u042F"),r.default.createElement(Q,{value:"girlfriend"},"\u0414\u0435\u0432\u0443\u0448\u043A\u0430"))),r.default.createElement(J,null))}),r.default.createElement(Z,{control:M.control,name:"name",render:({field:d})=>r.default.createElement(U,null,r.default.createElement($,null,"\u041D\u0430\u0437\u0432\u0430\u043D\u0438\u0435"),r.default.createElement(Y,null,r.default.createElement(se,{placeholder:"\u041E\u0441\u043D\u043E\u0432\u043D\u0430\u044F
    \u0440\u0430\u0431\u043E\u0442\u0430",...d})),r.default.createElement(J,null))}),r.default.createElement(Z,{control:M.control,name:"type",render:({field:d})=>r.default.createElement(U,null,r.default.createElement($,null,"\u0422\u0438\u043F"),r.default.createElement(Te,{onValueChange:d.onChange,value:d.value},r.default.createElement(Y,null,r.default.createElement(xe,null,r.default.createElement(Pe,{placeholder:"\u0412\u044B\u0431\u0435\u0440\u0438\u0442\u0435
    \u0442\u0438\u043F"}))),r.default.createElement(be,null,r.default.createElement(Q,{value:"main"},"\u041E\u0441\u043D\u043E\u0432\u043D\u0430\u044F"),r.default.createElement(Q,{value:"secondary"},"\u041F\u043E\u0434\u0440\u0430\u0431\u043E\u0442\u043A\u0430"))),r.default.createElement(J,null))}),r.default.createElement(Z,{control:M.control,name:"expectedAmount",render:({field:d})=>r.default.createElement(U,null,r.default.createElement($,null,"\u041E\u0436\u0438\u0434\u0430\u0435\u043C\u0430\u044F
    \u0441\u0443\u043C\u043C\u0430"),r.default.createElement(Y,null,r.default.createElement(se,{type:"number",placeholder:"50000",...d,onChange:X=>d.onChange(parseFloat(X.target.value))})),r.default.createElement(J,null))}),r.default.createElement(Z,{control:M.control,name:"paymentDates",render:({field:d})=>r.default.createElement(U,null,r.default.createElement($,null,"\u0414\u0430\u0442\u044B
    \u0432\u044B\u043F\u043B\u0430\u0442 (\u0447\u0435\u0440\u0435\u0437
    \u0437\u0430\u043F\u044F\u0442\u0443\u044E)"),r.default.createElement(Y,null,r.default.createElement(se,{placeholder:"5,
    20",...d})),r.default.createElement(J,null))}),r.default.createElement(Z,{control:M.control,name:"color",render:({field:d})=>r.default.createElement(U,null,r.default.createElement($,null,"\u0426\u0432\u0435\u0442"),r.default.createElement(Te,{onValueChange:d.onChange,value:d.value},r.default.createElement(Y,null,r.default.createElement(xe,null,r.default.createElement(Pe,{placeholder:"\u0412\u044B\u0431\u0435\u0440\u0438\u0442\u0435
    \u0446\u0432\u0435\u0442"}))),r.default.createElement(be,null,Ze.map(X=>r.default.createElement(Q,{key:X.value,value:X.value},r.default.createElement("div",{className:"flex
    items-center gap-2"},r.default.createElement("div",{className:"w-4 h-4
    rounded-full",style:{backgroundColor:X.value}}),r.default.createElement("span",null,X.label)))))),r.default.createElement(J,null))}),r.default.createElement(A,{type:"submit",className:"w-full"},"\u0414\u043E\u0431\u0430\u0432\u0438\u0442\u044C")))))),r.default.createElement("div",{className:"grid
    gap-6
    md:grid-cols-2"},r.default.createElement(mt.motion.div,{initial:{opacity:0,y:20},animate:{opacity:1,y:0},transition:{duration:.3,delay:.1}},r.default.createElement(V,null,r.default.createElement(W,{className:"p-6"},r.default.createElement(z,null,"\u041C\u043E\u0438
    \u0438\u0441\u0442\u043E\u0447\u043D\u0438\u043A\u0438
    \u0434\u043E\u0445\u043E\u0434\u0430")),r.default.createElement(j,{className:"p-6
    pt-0
    space-y-3"},ue.length===0?r.default.createElement("p",{className:"text-sm
    text-muted-foreground"},"\u041D\u0435\u0442
    \u0438\u0441\u0442\u043E\u0447\u043D\u0438\u043A\u043E\u0432
    \u0434\u043E\u0445\u043E\u0434\u0430"):ue.map(d=>r.default.createElement("div",{key:d.id,className:"p-4
    rounded-lg border space-y-2"},r.default.createElement("div",{className:"flex
    items-center
    justify-between"},r.default.createElement("div",{className:"flex
    items-center gap-2"},r.default.createElement("div",{className:"w-2 h-2
    rounded-full",style:{backgroundColor:d.color}}),r.default.createElement("span",{className:"font-medium"},d.name)),r.default.createElement("div",{className:"flex
    items-center
    gap-2"},r.default.createElement(ze,null,d.type==="main"?"\u041E\u0441\u043D\u043E\u0432\u043D\u0430\u044F":"\u041F\u043E\u0434\u0440\u0430\u0431\u043E\u0442\u043A\u0430"),r.default.createElement(A,{type:"button",variant:"ghost",size:"icon",className:"h-8
    w-8",onClick:()=>Ve(d)},r.default.createElement(Be.Edit,{className:"h-4
    w-4"})),r.default.createElement(A,{type:"button",variant:"ghost",size:"icon",className:"h-8
    w-8",onClick:()=>{v(d),T(!0)}},r.default.createElement(Be.Trash2,{className:"h-4
    w-4"})))),r.default.createElement("div",{className:"text-sm
    text-muted-foreground"},"\u0412\u044B\u043F\u043B\u0430\u0442\u044B:
    ",d.paymentDates.join(", "),"
    \u0447\u0438\u0441\u043B\u0430"),r.default.createElement("div",{className:"text-lg
    font-semibold"},k(d.expectedAmount))))))),r.default.createElement(mt.motion.div,{initial:{opacity:0,y:20},animate:{opacity:1,y:0},transition:{duration:.3,delay:.2}},r.default.createElement(V,null,r.default.createElement(W,{className:"p-6"},r.default.createElement(z,null,"\u0414\u043E\u0445\u043E\u0434\u044B
    \u0434\u0435\u0432\u0443\u0448\u043A\u0438")),r.default.createElement(j,{className:"p-6
    pt-0
    space-y-3"},Je.length===0?r.default.createElement("p",{className:"text-sm
    text-muted-foreground"},"\u041D\u0435\u0442
    \u0438\u0441\u0442\u043E\u0447\u043D\u0438\u043A\u043E\u0432
    \u0434\u043E\u0445\u043E\u0434\u0430"):Je.map(d=>r.default.createElement("div",{key:d.id,className:"p-4
    rounded-lg border space-y-2"},r.default.createElement("div",{className:"flex
    items-center
    justify-between"},r.default.createElement("div",{className:"flex
    items-center gap-2"},r.default.createElement("div",{className:"w-2 h-2
    rounded-full",style:{backgroundColor:d.color}}),r.default.createElement("span",{className:"font-medium"},d.name)),r.default.createElement("div",{className:"flex
    items-center
    gap-2"},r.default.createElement(ze,null,d.type==="main"?"\u041E\u0441\u043D\u043E\u0432\u043D\u0430\u044F":"\u041F\u043E\u0434\u0440\u0430\u0431\u043E\u0442\u043A\u0430"),r.default.createElement(A,{type:"button",variant:"ghost",size:"icon",className:"h-8
    w-8",onClick:()=>Ve(d)},r.default.createElement(Be.Edit,{className:"h-4
    w-4"})),r.default.createElement(A,{type:"button",variant:"ghost",size:"icon",className:"h-8
    w-8",onClick:()=>{v(d),T(!0)}},r.default.createElement(Be.Trash2,{className:"h-4
    w-4"})))),r.default.createElement("div",{className:"text-sm
    text-muted-foreground"},"\u0412\u044B\u043F\u043B\u0430\u0442\u044B:
    ",d.paymentDates.join(", "),"
    \u0447\u0438\u0441\u043B\u0430"),r.default.createElement("div",{className:"text-lg
    font-semibold"},k(d.expectedAmount)))))))),r.default.createElement(mt.motion.div,{initial:{opacity:0,y:20},animate:{opacity:1,y:0},transition:{duration:.3,delay:.3}},r.default.createElement(V,null,r.default.createElement(W,{className:"p-6"},r.default.createElement(z,null,"\u041A\u0430\u043B\u0435\u043D\u0434\u0430\u0440\u044C
    \u0432\u044B\u043F\u043B\u0430\u0442")),r.default.createElement(j,{className:"p-6
    pt-0
    space-y-3"},G.length===0?r.default.createElement("p",{className:"text-sm
    text-muted-foreground"},"\u041D\u0435\u0442
    \u0437\u0430\u043F\u043B\u0430\u043D\u0438\u0440\u043E\u0432\u0430\u043D\u043D\u044B\u0445
    \u0432\u044B\u043F\u043B\u0430\u0442"):G.map((d,X)=>r.default.createElement(mt.motion.div,{key:X,initial:{opacity:0,x:-20},animate:{opacity:1,x:0},transition:{duration:.3,delay:.05*X},className:"flex
    items-center justify-between p-4 rounded-lg
    border"},r.default.createElement("div",{className:"flex items-center
    gap-3"},r.default.createElement("div",{className:"w-10 h-10 rounded-full
    flex items-center
    justify-center",style:{backgroundColor:`${d.source.color}20`}},r.default.createElement(Be.Wallet,{className:"h-5
    w-5",style:{color:d.source.color}})),r.default.createElement("div",null,r.default.createElement("div",{className:"font-medium"},d.source.name),r.default.createElement("div",{className:"text-sm
    text-muted-foreground flex items-center
    gap-1"},r.default.createElement(Be.Calendar,{className:"h-3
    w-3"}),(0,$t.format)(d.date,"d MMMM
    yyyy",{locale:oa.ru})))),r.default.createElement("div",{className:"text-right"},r.default.createElement("div",{className:"font-semibold"},k(d.source.expectedAmount)),r.default.createElement("div",{className:"text-xs
    text-muted-foreground"},d.source.person==="me"?"\u042F":"\u0414\u0435\u0432\u0443\u0448\u043A\u0430"))))))),r.default.createElement(_e,{open:b,onOpenChange:C},r.default.createElement(Ie,{className:"max-w-md
    max-h-[90vh]
    overflow-y-auto"},r.default.createElement(Me,null,r.default.createElement(Le,null,"\u0420\u0435\u0434\u0430\u043A\u0442\u0438\u0440\u043E\u0432\u0430\u0442\u044C
    \u0438\u0441\u0442\u043E\u0447\u043D\u0438\u043A
    \u0434\u043E\u0445\u043E\u0434\u0430")),r.default.createElement(Re,{...u},r.default.createElement("form",{onSubmit:u.handleSubmit(Ce),className:"space-y-4"},r.default.createElement(Z,{control:u.control,name:"person",render:({field:d})=>r.default.createElement(U,null,r.default.createElement($,null,"\u0427\u0435\u043B\u043E\u0432\u0435\u043A"),r.default.createElement(Te,{onValueChange:d.onChange,value:d.value},r.default.createElement(Y,null,r.default.createElement(xe,null,r.default.createElement(Pe,{placeholder:"\u0412\u044B\u0431\u0435\u0440\u0438\u0442\u0435
    \u0447\u0435\u043B\u043E\u0432\u0435\u043A\u0430"}))),r.default.createElement(be,null,r.default.createElement(Q,{value:"me"},"\u042F"),r.default.createElement(Q,{value:"girlfriend"},"\u0414\u0435\u0432\u0443\u0448\u043A\u0430"))),r.default.createElement(J,null))}),r.default.createElement(Z,{control:u.control,name:"name",render:({field:d})=>r.default.createElement(U,null,r.default.createElement($,null,"\u041D\u0430\u0437\u0432\u0430\u043D\u0438\u0435"),r.default.createElement(Y,null,r.default.createElement(se,{placeholder:"\u041E\u0441\u043D\u043E\u0432\u043D\u0430\u044F
    \u0440\u0430\u0431\u043E\u0442\u0430",...d})),r.default.createElement(J,null))}),r.default.createElement(Z,{control:u.control,name:"type",render:({field:d})=>r.default.createElement(U,null,r.default.createElement($,null,"\u0422\u0438\u043F"),r.default.createElement(Te,{onValueChange:d.onChange,value:d.value},r.default.createElement(Y,null,r.default.createElement(xe,null,r.default.createElement(Pe,{placeholder:"\u0412\u044B\u0431\u0435\u0440\u0438\u0442\u0435
    \u0442\u0438\u043F"}))),r.default.createElement(be,null,r.default.createElement(Q,{value:"main"},"\u041E\u0441\u043D\u043E\u0432\u043D\u0430\u044F"),r.default.createElement(Q,{value:"secondary"},"\u041F\u043E\u0434\u0440\u0430\u0431\u043E\u0442\u043A\u0430"))),r.default.createElement(J,null))}),r.default.createElement(Z,{control:u.control,name:"expectedAmount",render:({field:d})=>r.default.createElement(U,null,r.default.createElement($,null,"\u041E\u0436\u0438\u0434\u0430\u0435\u043C\u0430\u044F
    \u0441\u0443\u043C\u043C\u0430"),r.default.createElement(Y,null,r.default.createElement(se,{type:"number",placeholder:"50000",...d,onChange:X=>d.onChange(parseFloat(X.target.value))})),r.default.createElement(J,null))}),r.default.createElement(Z,{control:u.control,name:"paymentDates",render:({field:d})=>r.default.createElement(U,null,r.default.createElement($,null,"\u0414\u0430\u0442\u044B
    \u0432\u044B\u043F\u043B\u0430\u0442 (\u0447\u0435\u0440\u0435\u0437
    \u0437\u0430\u043F\u044F\u0442\u0443\u044E)"),r.default.createElement(Y,null,r.default.createElement(se,{placeholder:"5,
    20",...d})),r.default.createElement(J,null))}),r.default.createElement(Z,{control:u.control,name:"color",render:({field:d})=>r.default.createElement(U,null,r.default.createElement($,null,"\u0426\u0432\u0435\u0442"),r.default.createElement(Te,{onValueChange:d.onChange,value:d.value},r.default.createElement(Y,null,r.default.createElement(xe,null,r.default.createElement(Pe,{placeholder:"\u0412\u044B\u0431\u0435\u0440\u0438\u0442\u0435
    \u0446\u0432\u0435\u0442"}))),r.default.createElement(be,null,Ze.map(X=>r.default.createElement(Q,{key:X.value,value:X.value},r.default.createElement("div",{className:"flex
    items-center gap-2"},r.default.createElement("div",{className:"w-4 h-4
    rounded-full",style:{backgroundColor:X.value}}),r.default.createElement("span",null,X.label)))))),r.default.createElement(J,null))}),r.default.createElement(A,{type:"submit",className:"w-full"},"\u0421\u043E\u0445\u0440\u0430\u043D\u0438\u0442\u044C"))))),r.default.createElement(_e,{open:f,onOpenChange:T},r.default.createElement(Ie,null,r.default.createElement(Me,null,r.default.createElement(Le,null,"\u0423\u0434\u0430\u043B\u0438\u0442\u044C
    \u0438\u0441\u0442\u043E\u0447\u043D\u0438\u043A
    \u0434\u043E\u0445\u043E\u0434\u0430?"),r.default.createElement(pt,null,"\u042D\u0442\u043E
    \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435
    \u043D\u0435\u043B\u044C\u0437\u044F
    \u043E\u0442\u043C\u0435\u043D\u0438\u0442\u044C.
    \u0418\u0441\u0442\u043E\u0447\u043D\u0438\u043A
    \u0434\u043E\u0445\u043E\u0434\u0430 \u0431\u0443\u0434\u0435\u0442
    \u0443\u0434\u0430\u043B\u0435\u043D
    \u043D\u0430\u0432\u0441\u0435\u0433\u0434\u0430.")),r.default.createElement("div",{className:"flex
    justify-end
    gap-2"},r.default.createElement(A,{type:"button",variant:"outline",onClick:()=>T(!1)},"\u041E\u0442\u043C\u0435\u043D\u0430"),r.default.createElement(A,{type:"button",variant:"destructive",onClick:_},"\u0423\u0434\u0430\u043B\u0438\u0442\u044C")))))}});var
    w,B,Nt,Ee,na,ia,sa=I(()=>{c();w=D(s("react"));De();je();B=s("recharts"),Nt=s("framer-motion");ke();Ee=s("date-fns"),na=s("date-fns/locale"),ia=()=>{let{data:e}=fe(),o=(0,w.useMemo)(()=>{let
    i=new Date,m=(0,Ee.startOfMonth)(i),b=(0,Ee.endOfMonth)(i),C={};return
    e.transactions.filter(f=>f.type==="expense"&&f.date>=m&&f.date<=b).forEach(f=>{if(!C[f.category]){let
    T=e.categories.find(g=>g.name===f.category);C[f.category]={value:0,color:T?.color||"#6b7280"}}C[f.category].value+=f.amount}),Object.entries(C).map(([f,T])=>({name:f,value:T.value,color:T.color}))},[e.transactions,e.categories]),t=(0,w.useMemo)(()=>{let
    i=[];for(let m=5;m>=0;m--){let b=(0,Ee.subMonths)(new
    Date,m),C=(0,Ee.startOfMonth)(b),f=(0,Ee.endOfMonth)(b),T=e.transactions.filter(v=>v.type==="income"&&v.date>=C&&v.date<=f).reduce((v,M)=>v+M.amount,0),g=e.transactions.filter(v=>v.type==="expense"&&v.date>=C&&v.date<=f).reduce((v,M)=>v+M.amount,0);i.push({month:(0,Ee.format)(b,"MMM",{locale:na.ru}),income:T,expenses:g})}return
    i},[e.transactions]),n=(0,w.useMemo)(()=>e.categories.map(i=>{let m=new
    Date,b=(0,Ee.startOfMonth)(m),C=(0,Ee.endOfMonth)(m),f=e.transactions.filter(T=>T.type==="expense"&&T.category===i.name&&T.date>=b&&T.date<=C).reduce((T,g)=>T+g.amount,0);return{name:i.name,planned:i.plannedAmount,actual:f,color:i.color}}).filter(i=>i.planned>0||i.actual>0),[e.categories,e.transactions]);return
    w.default.createElement("div",{className:"p-4 lg:p-6 space-y-6 pb-20
    lg:pb-6"},w.default.createElement(Nt.motion.div,{initial:{opacity:0,y:20},animate:{opacity:1,y:0},transition:{duration:.3}},w.default.createElement("h1",{className:"text-3xl
    font-bold"},"\u0410\u043D\u0430\u043B\u0438\u0442\u0438\u043A\u0430 \u0438
    \u043E\u0442\u0447\u0435\u0442\u044B")),w.default.createElement(Nt.motion.div,{initial:{opacity:0,y:20},animate:{opacity:1,y:0},transition:{duration:.3,delay:.1}},w.default.createElement(V,null,w.default.createElement(W,{className:"p-6"},w.default.createElement(z,null,"\u0420\u0430\u0441\u043F\u0440\u0435\u0434\u0435\u043B\u0435\u043D\u0438\u0435
    \u0440\u0430\u0441\u0445\u043E\u0434\u043E\u0432 \u043F\u043E
    \u043A\u0430\u0442\u0435\u0433\u043E\u0440\u0438\u044F\u043C")),w.default.createElement(j,{className:"p-6
    pt-0"},o.length>0?w.default.createElement(B.ResponsiveContainer,{width:"100%",height:300},w.default.createElement(B.PieChart,null,w.default.createElement(B.Pie,{data:o,cx:"50%",cy:"50%",labelLine:!1,label:i=>i.name,outerRadius:100,fill:"#8884d8",dataKey:"value"},o.map((i,m)=>w.default.createElement(B.Cell,{key:`cell-${m}`,fill:i.color}))),w.default.createElement(B.Tooltip,{formatter:i=>k(i)}))):w.default.createElement("div",{className:"h-[300px]
    flex items-center justify-center text-muted-foreground"},"\u041D\u0435\u0442
    \u0434\u0430\u043D\u043D\u044B\u0445 \u0434\u043B\u044F
    \u043E\u0442\u043E\u0431\u0440\u0430\u0436\u0435\u043D\u0438\u044F")))),w.default.createElement(Nt.motion.div,{initial:{opacity:0,y:20},animate:{opacity:1,y:0},transition:{duration:.3,delay:.2}},w.default.createElement(V,null,w.default.createElement(W,{className:"p-6"},w.default.createElement(z,null,"\u0414\u0438\u043D\u0430\u043C\u0438\u043A\u0430
    \u0434\u043E\u0445\u043E\u0434\u043E\u0432 \u0438
    \u0440\u0430\u0441\u0445\u043E\u0434\u043E\u0432")),w.default.createElement(j,{className:"p-6
    pt-0"},w.default.createElement(B.ResponsiveContainer,{width:"100%",height:300},w.default.createElement(B.LineChart,{data:t},w.default.createElement(B.CartesianGrid,{strokeDasharray:"3
    3"}),w.default.createElement(B.XAxis,{dataKey:"month"}),w.default.createElement(B.YAxis,null),w.default.createElement(B.Tooltip,{formatter:i=>k(i)}),w.default.createElement(B.Legend,null),w.default.createElement(B.Line,{type:"monotone",dataKey:"income",stroke:"#10b981",strokeWidth:2,name:"\u0414\u043E\u0445\u043E\u0434\u044B"}),w.default.createElement(B.Line,{type:"monotone",dataKey:"expenses",stroke:"#ef4444",strokeWidth:2,name:"\u0420\u0430\u0441\u0445\u043E\u0434\u044B"})))))),w.default.createElement(Nt.motion.div,{initial:{opacity:0,y:20},animate:{opacity:1,y:0},transition:{duration:.3,delay:.3}},w.default.createElement(V,null,w.default.createElement(W,{className:"p-6"},w.default.createElement(z,null,"\u041F\u043B\u0430\u043D
    vs \u0424\u0430\u043A\u0442 \u043F\u043E
    \u043A\u0430\u0442\u0435\u0433\u043E\u0440\u0438\u044F\u043C")),w.default.createElement(j,{className:"p-6
    pt-0"},n.length>0?w.default.createElement(B.ResponsiveContainer,{width:"100%",height:300},w.default.createElement(B.BarChart,{data:n},w.default.createElement(B.CartesianGrid,{strokeDasharray:"3
    3"}),w.default.createElement(B.XAxis,{dataKey:"name"}),w.default.createElement(B.YAxis,null),w.default.createElement(B.Tooltip,{formatter:i=>k(i)}),w.default.createElement(B.Legend,null),w.default.createElement(B.Bar,{dataKey:"planned",fill:"#3b82f6",name:"\u041F\u043B\u0430\u043D"}),w.default.createElement(B.Bar,{dataKey:"actual",fill:"#ef4444",name:"\u0424\u0430\u043A\u0442"}))):w.default.createElement("div",{className:"h-[300px]
    flex items-center justify-center text-muted-foreground"},"\u041D\u0435\u0442
    \u0434\u0430\u043D\u043D\u044B\u0445 \u0434\u043B\u044F
    \u043E\u0442\u043E\u0431\u0440\u0430\u0436\u0435\u043D\u0438\u044F")))))}});var
    ye,ie,la,ma,da,No,Ya,To,Ja,Po,wo,So,ca=I(()=>{c();ye=D(s("react")),ie=D(s("@radix-ui/react-toast")),la=s("class-variance-authority");oe();ma=s("@radix-ui/react-icons"),da=ie.Provider,No=ye.forwardRef(({className:e,...o},t)=>ye.createElement(ie.Viewport,{ref:t,className:l("fixed
    top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0
    sm:right-0 sm:top-auto sm:flex-col
    md:max-w-[420px]",e),...o}));No.displayName=ie.Viewport.displayName;Ya=(0,la.cva)("group
    pointer-events-auto relative flex w-full items-center justify-between
    space-x-2 overflow-hidden rounded-md border p-4 pr-6 shadow-lg
    transition-all data-[swipe=cancel]:translate-x-0
    data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)]
    data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)]
    data-[swipe=move]:transition-none data-[state=open]:animate-in
    data-[state=closed]:animate-out data-[swipe=end]:animate-out
    data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full
    data-[state=open]:slide-in-from-top-full
    data-[state=open]:sm:slide-in-from-bottom-full",{variants:{variant:{default:"border
    bg-background text-foreground",destructive:"destructive group
    border-destructive bg-destructive
    text-destructive-foreground"}},defaultVariants:{variant:"default"}}),To=ye.forwardRef(({className:e,variant:o,...t},n)=>ye.createElement(ie.Root,{ref:n,className:l(Ya({variant:o}),e),...t}));To.displayName=ie.Root.displayName;Ja=ye.forwardRef(({className:e,...o},t)=>ye.createElement(ie.Action,{ref:t,className:l("inline-flex
    h-8 shrink-0 items-center justify-center rounded-md border bg-transparent
    px-3 text-sm font-medium transition-colors hover:bg-secondary
    focus:outline-none focus:ring-1 focus:ring-ring disabled:pointer-events-none
    disabled:opacity-50 group-[.destructive]:border-muted/40
    group-[.destructive]:hover:border-destructive/30
    group-[.destructive]:hover:bg-destructive
    group-[.destructive]:hover:text-destructive-foreground
    group-[.destructive]:focus:ring-destructive",e),...o}));Ja.displayName=ie.Action.displayName;Po=ye.forwardRef(({className:e,...o},t)=>ye.createElement(ie.Close,{ref:t,className:l("absolute
    right-1 top-1 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity
    hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-1
    group-hover:opacity-100 group-[.destructive]:text-red-300
    group-[.destructive]:hover:text-red-50
    group-[.destructive]:focus:ring-red-400
    group-[.destructive]:focus:ring-offset-red-600",e),"toast-close":"",...o},ye.createElement(ma.Cross2Icon,{className:"h-4
    w-4"})));Po.displayName=ie.Close.displayName;wo=ye.forwardRef(({className:e,...o},t)=>ye.createElement(ie.Title,{ref:t,className:l("text-sm
    font-semibold
    [&+div]:text-xs",e),...o}));wo.displayName=ie.Title.displayName;So=ye.forwardRef(({className:e,...o},t)=>ye.createElement(ie.Description,{ref:t,className:l("text-sm
    opacity-90",e),...o}));So.displayName=ie.Description.displayName});function
    pa(){let{toasts:e}=zt();return
    React.createElement(da,null,e.map(function({id:o,title:t,description:n,action:i,...m}){return
    React.createElement(To,{key:o,...m},React.createElement("div",{className:"grid
    gap-1"},t&&React.createElement(wo,null,t),n&&React.createElement(So,null,n)),i,React.createElement(Po,null))}),React.createElement(No,null))}var
    ua=I(()=>{c();xo();ca()});var fa={};Ca(fa,{default:()=>Qa});function
    Za(){let[e,o]=(0,de.useState)("dashboard");return
    de.default.createElement(Eo,{defaultTheme:"system"},de.default.createElement(Lo,null,de.default.createElement("div",{className:"min-h-screen
    bg-background"},de.default.createElement(Go,{currentPage:e,onNavigate:o}),de.default.createElement("main",{className:"lg:pl-64"},(()=>{switch(e){case"dashboard":return
    de.default.createElement(ro,{onNavigate:o});case"transactions":return
    de.default.createElement(Vr,null);case"calendar":return
    de.default.createElement(Wr,null);case"budget":return
    de.default.createElement($r,null);case"goals":return
    de.default.createElement(Rr,null);case"salary":return
    de.default.createElement(ra,null);case"analytics":return
    de.default.createElement(ia,null);default:return
    de.default.createElement(ro,{onNavigate:o})}})()),de.default.createElement(Wo,{currentPage:e,onNavigate:o}),de.default.createElement(pa,null))))}var
    de,Qa,ga=I(()=>{c();de=D(s("react"));je();Yt();zo();ur();jr();zr();Kr();ea();aa();sa();ua();Qa=Za});c();function
    Xa(){let e=s("react"),o=(ga(),Na(fa)).default;window.React=e;let
    t=s("react-dom/client").createRoot,n=t(S.container.querySelector(".root"));class
    i extends e.Component{state={hasError:!1};static
    getDerivedStateFromError(b){return{hasError:!0}}componentDidCatch(b,C){S.handleError(b,b?.name==="ModuleLoadingError")}render(){return
    this.state.hasError?e.createElement("div",{class:"module-error"},"Something
    went
    wrong."):this.props.children}}n.render(e.createElement(i,null,e.createElement(o,null)))}Zone.current.fork({name:"angular-bootstrap",onHandleError(e,o,t,n){return
    S.handleError(n,n?.name==="ModuleLoadingError"),S.onModulesLoaded(),!1}}).runGuarded(()=>{loadModulesSequentially(window["UIB_MODULES_TO_LOAD_UIB_PROD_BUILD_COMPONENT_ID_MOCK.id"]).then(()=>{delete
    window["UIB_MODULES_TO_LOAD_UIB_PROD_BUILD_COMPONENT_ID_MOCK.id"],S.onModulesLoaded(),Xa()})});})();


    //# sourceURL=UIB_script_UIB_PROD_BUILD_COMPONENT_ID_MOCK.id.js</script>
actions: {}
slots:
  - id: moduleContainerSlot
    name: content
    children: []
